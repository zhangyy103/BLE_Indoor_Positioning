/********************************************************************************************************
 * @file     boot.link
 *
 * @brief    This file tells the linker how to link the compiled object files and libraries
 *
 * @author   junwei.lu@telink-semi.com
 * @date     Nov. 18, 2017
 *
 * @par      Copyright (c) 2017, Telink Semiconductor (Shanghai) Co., Ltd.
 *           All rights reserved.
 *           
 *           The information contained herein is confidential property of Telink 
 *           Semiconductor (Shanghai) Co., Ltd. and is available under the terms 
 *           of Commercial License Agreement between Telink Semiconductor (Shanghai) 
 *           Co., Ltd. and the licensee or the terms described here-in. This heading 
 *           MUST NOT be removed from this file.
 *
 *           Licensees are granted free, non-transferable use of the information in this 
 *           file under Mutual Non-Disclosure Agreement. NO WARRENTY of ANY KIND is provided. 
 *           
 *******************************************************************************************************/

/* to tell the linker the program begin from __start label in cstartup.s, thus do not treat it as a unused symbol */
ENTRY(__start)

SECTIONS
{
    . = 0x0;
        .vectors :
        {
        *(.vectors)
        *(.vectors.*)	/* MUST as follows, when compile with -ffunction-sections -fdata-sections, session name may changed */
        }
        .ram_code :
        {
        *(.ram_code)
        *(.ram_code.*)
        }
    PROVIDE(_ramcode_size_ = . );
	PROVIDE(_ramcode_size_div_16_ = (. + 15 ) / 16);
	PROVIDE(_ramcode_size_div_256_ = (. + 255) / 256);
	PROVIDE(_ramcode_size_div_16_align_256_ = ( (. + 255) / 256) * 16);
	PROVIDE(_ramcode_size_align_256_ = ( _ramcode_size_div_16_align_256_)* 16);
       .text 0x4000+SIZEOF(.vectors)+SIZEOF(.ram_code): AT(0x0000+SIZEOF(.vectors)+SIZEOF(.ram_code))
        {
        *(.text)
        *(.text.*)
        }
        .rodata 0x4000+SIZEOF(.vectors)+SIZEOF(.ram_code)+SIZEOF(.text): AT(0x0000+SIZEOF(.vectors)+SIZEOF(.ram_code)+SIZEOF(.text))
        {
        *(.rodata)
        *(.rodata.*)
        }

    . = (((. + 3) / 4)*4);
        PROVIDE(_dstored_ = . );
        PROVIDE( _code_size_ = . -0x4000);
		PROVIDE( _code_size_div_16_ = (_code_size_ + 15) / 16 );
		
		
	. = 0x840900 + _ramcode_size_div_256_ * 0x100;	/* 0x100 alighned, must greater than or equal to:0x808000 + ram_code_size +  irq_vector(0x100) + IC_tag(0x100) + IC_cache(0x800) == 0x808a00 + ram_code_size */
        .data :
          AT ( _dstored_ -0x4000)
         {
    . = (((. + 3) / 4)*4);
         PROVIDE(_start_data_ = . );
         *(.data);
         *(.data.*);
    . = (((. + 3) / 4)*4);
         PROVIDE(_end_data_ = . );
         }

        .bss :
        {
	. = (((. + 3) / 4)*4);
	PROVIDE(_start_bss_ = .);
        *(.sbss)
        *(.sbss.*)
        *(.bss)
        *(.bss.*)
        }
    PROVIDE(_end_bss_ = .);
    PROVIDE(_bin_size_ = _code_size_ + _end_data_ - _start_data_);
    PROVIDE(_ictag_start_ = 0x840000 + (_ramcode_size_div_256_) * 0x100);
    PROVIDE(_ictag_end_ = 0x840000 + (_ramcode_size_div_256_ + 1) * 0x100);
}
};
}