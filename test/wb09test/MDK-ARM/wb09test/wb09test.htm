<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [wb09test\wb09test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image wb09test\wb09test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sun Nov  3 19:20:53 2024
<BR><P>
<H3>Maximum Stack Usage =       2308 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
hci_acl_data_ind_event_int_cb_ucfg &rArr; hci_acl_data_ind_event_int_cb &rArr; L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e3]">__user_initial_stackheap</a>
 <LI><a href="#[249]">ACL_list_get_pckt_count</a>
 <LI><a href="#[244]">ACL_list_init</a>
 <LI><a href="#[4f5]">ACL_list_insert_head</a>
 <LI><a href="#[253]">ACL_list_insert_tail</a>
 <LI><a href="#[241]">ACL_list_remove</a>
 <LI><a href="#[24a]">ACL_list_remove_head</a>
 <LI><a href="#[fa]">ACL_pkt_cmp</a>
 <LI><a href="#[fc]">ACL_pkt_connection</a>
 <LI><a href="#[fe]">ACL_pkt_disconnection</a>
 <LI><a href="#[2e8]">ACL_pkt_extract_pdu</a>
 <LI><a href="#[100]">ACL_pkt_get</a>
 <LI><a href="#[102]">ACL_pkt_get_available_mem_buffers</a>
 <LI><a href="#[104]">ACL_pkt_init</a>
 <LI><a href="#[106]">ACL_pkt_read</a>
 <LI><a href="#[51]">ACL_pkt_read_16b</a>
 <LI><a href="#[10c]">ACL_pkt_release</a>
 <LI><a href="#[10e]">ACL_pkt_resize</a>
 <LI><a href="#[2d]">ACL_pkt_write</a>
 <LI><a href="#[111]">ACL_pkt_write_16b</a>
 <LI><a href="#[3d]">ADV_ISR</a>
 <LI><a href="#[125]">ADV_ISR_connect_request_received</a>
 <LI><a href="#[3c]">ADV_cancelslot</a>
 <LI><a href="#[3e]">ADV_createslot</a>
 <LI><a href="#[3f]">ADV_skiproutine</a>
 <LI><a href="#[5f]">AES_CMAC_Encrypt</a>
 <LI><a href="#[385]">Acl_Init</a>
 <LI><a href="#[140]">Acl_Rcv_Pkt_Handler</a>
 <LI><a href="#[143]">Acl_Transmit_Data</a>
 <LI><a href="#[145]">Acl_Tx_Cmpl_Pkt_Handler</a>
 <LI><a href="#[184]">BLEPLAT_aes128_encrypt</a>
 <LI><a href="#[1ad]">BLE_STACK_EndOfRadioActivityCb</a>
 <LI><a href="#[18a]">BLE_STACK_Init</a>
 <LI><a href="#[1a3]">BLE_STACK_RadioHandler</a>
 <LI><a href="#[187]">BLE_STACK_SleepCheck</a>
 <LI><a href="#[186]">BLE_STACK_Tick</a>
 <LI><a href="#[1f2]">CST_init</a>
 <LI><a href="#[1b0]">CST_start</a>
 <LI><a href="#[1b1]">CST_stop</a>
 <LI><a href="#[1ba]">Controller_Process_Q</a>
 <LI><a href="#[2fb]">Data_Len_Update_Offline_Processing_ucfg</a>
 <LI><a href="#[55e]">Data_Len_Update_Offline_Processing_ucfg_weak</a>
 <LI><a href="#[1bd]">EADV_init</a>
 <LI><a href="#[1bf]">EADV_start_request_radio_tasks</a>
 <LI><a href="#[12d]">EADV_vPrepareAdvOrRspLegacyPacket</a>
 <LI><a href="#[63]">Events_Process_Q</a>
 <LI><a href="#[1cd]">Events_Process_init</a>
 <LI><a href="#[3ff]">GAP_DiscProcTimeoutcb_ucfg</a>
 <LI><a href="#[55f]">GAP_DiscProcTimeoutcb_ucfg_weak</a>
 <LI><a href="#[1d1]">GAP_Init</a>
 <LI><a href="#[1da]">GAP_LimDiscTimeoutcb</a>
 <LI><a href="#[1dd]">GAP_PrivateAddrTimercb</a>
 <LI><a href="#[69]">GAP_ResumeAdvertising_ucfg</a>
 <LI><a href="#[560]">GAP_ResumeAdvertising_ucfg_weak</a>
 <LI><a href="#[1f0]">GAP_central_connection_complete_handler_ucfg</a>
 <LI><a href="#[561]">GAP_central_connection_complete_handler_ucfg_weak</a>
 <LI><a href="#[1de]">GAP_check_adv_status</a>
 <LI><a href="#[1e6]">GAP_check_flags</a>
 <LI><a href="#[1f4]">GAP_discover_peer_name_ucfg</a>
 <LI><a href="#[562]">GAP_discover_peer_name_ucfg_weak</a>
 <LI><a href="#[1d3]">GAP_enable_controller_privacy_ucfg</a>
 <LI><a href="#[563]">GAP_enable_controller_privacy_ucfg_weak</a>
 <LI><a href="#[1df]">GAP_enable_disable_scan_ucfg</a>
 <LI><a href="#[564]">GAP_enable_disable_scan_ucfg_weak</a>
 <LI><a href="#[1e1]">GAP_generate_new_rpa</a>
 <LI><a href="#[1e9]">GAP_get_current_address</a>
 <LI><a href="#[1d7]">GAP_get_default_le_event_mask</a>
 <LI><a href="#[3eb]">GAP_get_identity_address_type</a>
 <LI><a href="#[1eb]">GAP_get_own_address_type</a>
 <LI><a href="#[1ed]">GAP_get_public_address</a>
 <LI><a href="#[1ea]">GAP_get_rpa</a>
 <LI><a href="#[1ec]">GAP_get_static_random_address</a>
 <LI><a href="#[408]">GAP_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[1ee]">GAP_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[1d4]">GAP_init_advertising_sets_ucfg</a>
 <LI><a href="#[565]">GAP_init_advertising_sets_ucfg_weak</a>
 <LI><a href="#[1f1]">GAP_init_context</a>
 <LI><a href="#[1f3]">GAP_name_disc_proc_connected_check</a>
 <LI><a href="#[1ef]">GAP_peripheral_connection_complete_handler_ucfg</a>
 <LI><a href="#[566]">GAP_peripheral_connection_complete_handler_ucfg_weak</a>
 <LI><a href="#[1d6]">GAP_reset_privacy_timer</a>
 <LI><a href="#[1e7]">GAP_search_flags_index</a>
 <LI><a href="#[1db]">GAP_set_advertising_enable_ucfg</a>
 <LI><a href="#[567]">GAP_set_advertising_enable_ucfg_weak</a>
 <LI><a href="#[1d5]">GAP_set_controller_random_address_ucfg</a>
 <LI><a href="#[568]">GAP_set_controller_random_address_ucfg_weak</a>
 <LI><a href="#[1f7]">GAP_set_legacy_advertising_enable</a>
 <LI><a href="#[1e2]">GAP_start_privacy_timer</a>
 <LI><a href="#[1e3]">GAP_stop_privacy_timer</a>
 <LI><a href="#[1e0]">GAP_suspend_resume_active_advertising_sets_ucfg</a>
 <LI><a href="#[569]">GAP_suspend_resume_active_advertising_sets_ucfg_weak</a>
 <LI><a href="#[1fb]">GAT_att_clt_bearer_close</a>
 <LI><a href="#[1fd]">GAT_att_clt_connection</a>
 <LI><a href="#[1ff]">GAT_att_clt_init</a>
 <LI><a href="#[201]">GAT_att_clt_rcv</a>
 <LI><a href="#[20b]">GAT_att_cmn_connection</a>
 <LI><a href="#[20d]">GAT_att_cmn_disconnection</a>
 <LI><a href="#[2c]">GAT_att_cmn_dscr_flag_check_is_not_set_f</a>
 <LI><a href="#[31]">GAT_att_cmn_dscr_flag_clear_f</a>
 <LI><a href="#[2e]">GAT_att_cmn_dscr_flag_set_f</a>
 <LI><a href="#[21e]">GAT_att_cmn_for_each_ch_descr</a>
 <LI><a href="#[203]">GAT_att_cmn_get_channel_descr_p</a>
 <LI><a href="#[267]">GAT_att_cmn_get_conn_index</a>
 <LI><a href="#[212]">GAT_att_cmn_get_pckt</a>
 <LI><a href="#[214]">GAT_att_cmn_init</a>
 <LI><a href="#[217]">GAT_att_cmn_rcv</a>
 <LI><a href="#[219]">GAT_att_cmn_send</a>
 <LI><a href="#[206]">GAT_att_cmn_start_timer</a>
 <LI><a href="#[205]">GAT_att_cmn_stop_timer</a>
 <LI><a href="#[2a]">GAT_att_cmn_timeout_cb</a>
 <LI><a href="#[29]">GAT_att_cmn_timeout_cb_wrapper</a>
 <LI><a href="#[21d]">GAT_att_cmn_timer_expire_tsk</a>
 <LI><a href="#[21f]">GAT_att_cmn_tx_pool_evt_tsk</a>
 <LI><a href="#[225]">GAT_att_db_find_by_def</a>
 <LI><a href="#[226]">GAT_att_db_find_by_handle</a>
 <LI><a href="#[227]">GAT_att_db_find_from_handle</a>
 <LI><a href="#[263]">GAT_att_db_find_last_attr_of_type</a>
 <LI><a href="#[22a]">GAT_att_db_get_last_group_handle</a>
 <LI><a href="#[230]">GAT_att_db_get_last_handle</a>
 <LI><a href="#[22b]">GAT_att_db_get_next</a>
 <LI><a href="#[22c]">GAT_att_db_init</a>
 <LI><a href="#[22d]">GAT_att_db_insert</a>
 <LI><a href="#[22e]">GAT_att_db_reverse_find_attr_of_type</a>
 <LI><a href="#[22f]">GAT_att_db_rm_att_range</a>
 <LI><a href="#[20f]">GAT_att_srv_bearer_close</a>
 <LI><a href="#[235]">GAT_att_srv_confirmation_pending</a>
 <LI><a href="#[20c]">GAT_att_srv_connection</a>
 <LI><a href="#[23a]">GAT_att_srv_extract_write_packet_data</a>
 <LI><a href="#[242]">GAT_att_srv_flush_user_pending_list</a>
 <LI><a href="#[243]">GAT_att_srv_hvtx</a>
 <LI><a href="#[215]">GAT_att_srv_init</a>
 <LI><a href="#[248]">GAT_att_srv_process_rx_pckt_tsk</a>
 <LI><a href="#[218]">GAT_att_srv_rcv</a>
 <LI><a href="#[252]">GAT_att_srv_request_user_pending</a>
 <LI><a href="#[1fc]">GAT_clt_bearer_close</a>
 <LI><a href="#[1fe]">GAT_clt_connection</a>
 <LI><a href="#[200]">GAT_clt_init</a>
 <LI><a href="#[6f]">GAT_clt_proc_exec_tsk</a>
 <LI><a href="#[20a]">GAT_clt_rcv_corrupted</a>
 <LI><a href="#[207]">GAT_clt_rcv_srv_initiated</a>
 <LI><a href="#[25d]">GAT_srv_add_char_descriptor</a>
 <LI><a href="#[260]">GAT_srv_add_characteristic</a>
 <LI><a href="#[262]">GAT_srv_add_service</a>
 <LI><a href="#[255]">GAT_srv_attr_value_read</a>
 <LI><a href="#[257]">GAT_srv_attr_value_write</a>
 <LI><a href="#[231]">GAT_srv_bearer_close</a>
 <LI><a href="#[24e]">GAT_srv_check_change_aware</a>
 <LI><a href="#[26f]">GAT_srv_check_client_support_feature</a>
 <LI><a href="#[250]">GAT_srv_check_perms</a>
 <LI><a href="#[236]">GAT_srv_connection</a>
 <LI><a href="#[274]">GAT_srv_db_hash_tsk</a>
 <LI><a href="#[23c]">GAT_srv_find_by_type_attr_p</a>
 <LI><a href="#[23e]">GAT_srv_get_att_group_end_handle</a>
 <LI><a href="#[23f]">GAT_srv_get_attr_type</a>
 <LI><a href="#[24f]">GAT_srv_get_attr_value</a>
 <LI><a href="#[277]">GAT_srv_get_attribute_handle</a>
 <LI><a href="#[273]">GAT_srv_get_cccd_attr_p</a>
 <LI><a href="#[26c]">GAT_srv_get_cccd_val</a>
 <LI><a href="#[278]">GAT_srv_get_char_decl_handle</a>
 <LI><a href="#[279]">GAT_srv_get_service_handle</a>
 <LI><a href="#[245]">GAT_srv_init</a>
 <LI><a href="#[24d]">GAT_srv_is_supported_grouping_type</a>
 <LI><a href="#[261]">GAT_srv_rm_characteristic</a>
 <LI><a href="#[264]">GAT_srv_rm_service</a>
 <LI><a href="#[27c]">GAT_srv_send_srv_change_tsk</a>
 <LI><a href="#[234]">GAT_srv_set_change_aware</a>
 <LI><a href="#[4bf]">GapIsPrivacySupported</a>
 <LI><a href="#[38]">HAL_Generate_Random_Bytes_To</a>
 <LI><a href="#[2b2]">HAL_Set_TX_Power_Level</a>
 <LI><a href="#[2be]">HAL_Write_ConfigData</a>
 <LI><a href="#[39b]">HCI_Init</a>
 <LI><a href="#[283]">Hal_Get_Random_Number</a>
 <LI><a href="#[48]">Hal_Get_Random_Number32</a>
 <LI><a href="#[1d2]">IDD_Initialize_Device_IDs</a>
 <LI><a href="#[4fa]">Is_Address_Initialized</a>
 <LI><a href="#[2d4]">L2C_acl_cframe_signaling_hndl</a>
 <LI><a href="#[2dc]">L2C_build_command_reject_pdu</a>
 <LI><a href="#[2e1]">L2C_cos_cfc_init_ucfg</a>
 <LI><a href="#[56a]">L2C_cos_cfc_init_ucfg_weak</a>
 <LI><a href="#[2de]">L2C_cos_channel_descriptors_reset_pending</a>
 <LI><a href="#[2d6]">L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg</a>
 <LI><a href="#[56b]">L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak</a>
 <LI><a href="#[423]">L2C_cos_physical_link_disconnection_hndl_ucfg</a>
 <LI><a href="#[56c]">L2C_cos_physical_link_disconnection_hndl_ucfg_weak</a>
 <LI><a href="#[2d7]">L2C_cos_process_cfc_mode_command_ucfg</a>
 <LI><a href="#[56d]">L2C_cos_process_cfc_mode_command_ucfg_weak</a>
 <LI><a href="#[202]">L2C_get_cid_from_basic_packet_header</a>
 <LI><a href="#[2e0]">L2C_init</a>
 <LI><a href="#[2e3]">L2C_mux_acl_packet</a>
 <LI><a href="#[2e7]">L2C_receive_data</a>
 <LI><a href="#[21a]">L2C_send_frame</a>
 <LI><a href="#[2eb]">L2C_timeout_handler_signalling</a>
 <LI><a href="#[2ec]">LLC_authenticated_payload_timeout_cb</a>
 <LI><a href="#[2f0]">LLC_authenticated_payload_timeout_processing</a>
 <LI><a href="#[2f1]">LLC_authenticated_payload_timeout_reset</a>
 <LI><a href="#[2f5]">LLC_channel_map_copy_to_cpf_context_ucfg</a>
 <LI><a href="#[56e]">LLC_channel_map_copy_to_cpf_context_ucfg_weak</a>
 <LI><a href="#[2fc]">LLC_channel_map_update_offline_processing_ucfg</a>
 <LI><a href="#[56f]">LLC_channel_map_update_offline_processing_ucfg_weak</a>
 <LI><a href="#[386]">LLC_chc_ll_cntxt_init_ucfg</a>
 <LI><a href="#[570]">LLC_chc_ll_cntxt_init_ucfg_weak</a>
 <LI><a href="#[2fd]">LLC_chc_reporting_offline_processing_ucfg</a>
 <LI><a href="#[571]">LLC_chc_reporting_offline_processing_ucfg_weak</a>
 <LI><a href="#[447]">LLC_conn_init_chc_ctxt_ucfg</a>
 <LI><a href="#[572]">LLC_conn_init_chc_ctxt_ucfg_weak</a>
 <LI><a href="#[2fe]">LLC_cte_request_procedure_ucfg</a>
 <LI><a href="#[573]">LLC_cte_request_procedure_ucfg_weak</a>
 <LI><a href="#[2f6]">LLC_init_le_ping_params</a>
 <LI><a href="#[44]">LLC_le_ping</a>
 <LI><a href="#[2f8]">LLC_offline_control_procedures_processing</a>
 <LI><a href="#[39d]">LLC_pcl_hal_cntxt_init_ucfg</a>
 <LI><a href="#[574]">LLC_pcl_hal_cntxt_init_ucfg_weak</a>
 <LI><a href="#[467]">LLC_pcl_incr_rx_packets_ucfg</a>
 <LI><a href="#[575]">LLC_pcl_incr_rx_packets_ucfg_weak</a>
 <LI><a href="#[2ff]">LLC_pcl_offline_processing_ucfg</a>
 <LI><a href="#[576]">LLC_pcl_offline_processing_ucfg_weak</a>
 <LI><a href="#[2b3]">LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg</a>
 <LI><a href="#[577]">LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak</a>
 <LI><a href="#[300]">LLC_pcl_set_radio_tx_power_conn_start_ucfg</a>
 <LI><a href="#[578]">LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak</a>
 <LI><a href="#[46c]">LLC_pcl_update_avg_rssi_ucfg</a>
 <LI><a href="#[579]">LLC_pcl_update_avg_rssi_ucfg_weak</a>
 <LI><a href="#[302]">LLC_update_le_ping_params</a>
 <LI><a href="#[304]">LL_Get_LTK</a>
 <LI><a href="#[307]">LL_Get_Supported_Features</a>
 <LI><a href="#[30a]">LL_LE_Set_Advertise_Enable</a>
 <LI><a href="#[30e]">LL_LE_Set_Advertising_Parameters</a>
 <LI><a href="#[2f9]">LL_Read_Remote_Used_Features</a>
 <LI><a href="#[311]">LL_Set_Advertising_Set_Random_Address</a>
 <LI><a href="#[30c]">LL_Set_Extented_Advertising_Enable</a>
 <LI><a href="#[30d]">LL_Set_Extented_Advertising_Set_Random_Address</a>
 <LI><a href="#[45]">LL_channel_map_update</a>
 <LI><a href="#[31c]">LL_channel_map_update_param_check</a>
 <LI><a href="#[324]">LL_conn_get_version_exchange_cached</a>
 <LI><a href="#[35c]">LL_conn_upd_data_length_change_event_ucfg</a>
 <LI><a href="#[57a]">LL_conn_upd_data_length_change_event_ucfg_weak</a>
 <LI><a href="#[35a]">LL_conn_upd_max_tx_time_coded_ucfg</a>
 <LI><a href="#[57b]">LL_conn_upd_max_tx_time_coded_ucfg_weak</a>
 <LI><a href="#[325]">LL_conn_version_exchange_set_cached</a>
 <LI><a href="#[2f7]">LL_cpe_clr_active</a>
 <LI><a href="#[328]">LL_cpe_conn_exception_opcode_from_sm</a>
 <LI><a href="#[310]">LL_cpe_conn_get_proc_id_from_sm</a>
 <LI><a href="#[1bb]">LL_cpe_engine</a>
 <LI><a href="#[2f2]">LL_cpe_get_active_status</a>
 <LI><a href="#[306]">LL_cpe_get_cntxt</a>
 <LI><a href="#[348]">LL_cpe_init</a>
 <LI><a href="#[350]">LL_cpe_init_chc_enable_ucfg</a>
 <LI><a href="#[57c]">LL_cpe_init_chc_enable_ucfg_weak</a>
 <LI><a href="#[351]">LL_cpe_init_chc_reporting_ucfg</a>
 <LI><a href="#[57d]">LL_cpe_init_chc_reporting_ucfg_weak</a>
 <LI><a href="#[355]">LL_cpe_init_chmap_update</a>
 <LI><a href="#[352]">LL_cpe_init_cis_ucfg</a>
 <LI><a href="#[57e]">LL_cpe_init_cis_ucfg_weak</a>
 <LI><a href="#[356]">LL_cpe_init_conn_update</a>
 <LI><a href="#[34e]">LL_cpe_init_cte_ucfg</a>
 <LI><a href="#[57f]">LL_cpe_init_cte_ucfg_weak</a>
 <LI><a href="#[34b]">LL_cpe_init_length_update_ucfg</a>
 <LI><a href="#[580]">LL_cpe_init_length_update_ucfg_weak</a>
 <LI><a href="#[34d]">LL_cpe_init_past_ucfg</a>
 <LI><a href="#[581]">LL_cpe_init_past_ucfg_weak</a>
 <LI><a href="#[34f]">LL_cpe_init_pcl_ucfg</a>
 <LI><a href="#[582]">LL_cpe_init_pcl_ucfg_weak</a>
 <LI><a href="#[34c]">LL_cpe_init_phy_update_ucfg</a>
 <LI><a href="#[583]">LL_cpe_init_phy_update_ucfg_weak</a>
 <LI><a href="#[354]">LL_cpe_init_sca_upd_ucfg</a>
 <LI><a href="#[584]">LL_cpe_init_sca_upd_ucfg_weak</a>
 <LI><a href="#[353]">LL_cpe_init_subrate_ucfg</a>
 <LI><a href="#[585]">LL_cpe_init_subrate_ucfg_weak</a>
 <LI><a href="#[41]">LL_cpe_register_cpf</a>
 <LI><a href="#[2f4]">LL_cpe_set_active</a>
 <LI><a href="#[31e]">LL_cpe_set_blocked</a>
 <LI><a href="#[2f3]">LL_cpe_set_prepare_tx_pdu</a>
 <LI><a href="#[31f]">LL_cpe_set_rx_with_instant</a>
 <LI><a href="#[321]">LL_cpe_set_tx_with_instant</a>
 <LI><a href="#[77]">LL_cpf_cis_processing_ucfg</a>
 <LI><a href="#[586]">LL_cpf_cis_processing_ucfg_weak</a>
 <LI><a href="#[46]">LL_cpf_conn_upd</a>
 <LI><a href="#[35d]">LL_dtm_init</a>
 <LI><a href="#[315]">LL_eadv_BLUE_SM</a>
 <LI><a href="#[31a]">LL_eadv_Blue_Rx</a>
 <LI><a href="#[319]">LL_eadv_Blue_Tx</a>
 <LI><a href="#[317]">LL_eadv_start_extended_ucfg</a>
 <LI><a href="#[587]">LL_eadv_start_extended_ucfg_weak</a>
 <LI><a href="#[127]">LL_eadv_switchbackupdata_data_struc</a>
 <LI><a href="#[40]">LL_encryption</a>
 <LI><a href="#[42]">LL_feature_exchange</a>
 <LI><a href="#[2c3]">LL_force_chsel_1</a>
 <LI><a href="#[476]">LL_get_control_pdu_size</a>
 <LI><a href="#[113]">LL_get_rx_common_buffer_p</a>
 <LI><a href="#[12c]">LL_get_tx_common_buffer_p</a>
 <LI><a href="#[381]">LL_init</a>
 <LI><a href="#[382]">LL_init_ucfg_weak</a>
 <LI><a href="#[44c]">LL_link_calc_packetlength</a>
 <LI><a href="#[44f]">LL_link_calculate_window_widening_from_ppm</a>
 <LI><a href="#[44d]">LL_link_get_own_sca_ppm</a>
 <LI><a href="#[449]">LL_past_default_params_ucfg</a>
 <LI><a href="#[588]">LL_past_default_params_ucfg_weak</a>
 <LI><a href="#[337]">LL_past_initialize_connect_context_ucfg</a>
 <LI><a href="#[589]">LL_past_initialize_connect_context_ucfg_weak</a>
 <LI><a href="#[433]">LL_phy_upd_evt_pending_check_isr_ucfg</a>
 <LI><a href="#[58a]">LL_phy_upd_evt_pending_check_isr_ucfg_weak</a>
 <LI><a href="#[42d]">LL_phy_upd_pending_ucfg</a>
 <LI><a href="#[58b]">LL_phy_upd_pending_ucfg_weak</a>
 <LI><a href="#[444]">LL_phy_update_init_per_st_data_ucfg</a>
 <LI><a href="#[58c]">LL_phy_update_init_per_st_data_ucfg_weak</a>
 <LI><a href="#[45a]">LL_phy_update_init_ucfg</a>
 <LI><a href="#[58d]">LL_phy_update_init_ucfg_weak</a>
 <LI><a href="#[481]">LL_sched_anchorstretch</a>
 <LI><a href="#[1c7]">LL_sched_check_and_call_sched</a>
 <LI><a href="#[43b]">LL_sched_delete_taskslot</a>
 <LI><a href="#[5d]">LL_sched_enable_taskslot</a>
 <LI><a href="#[124]">LL_sched_engine</a>
 <LI><a href="#[12f]">LL_sched_engine_return_actual_scheduler_margin</a>
 <LI><a href="#[398]">LL_sched_init</a>
 <LI><a href="#[31b]">LL_sched_is_scheduler_call_pending</a>
 <LI><a href="#[1c3]">LL_sched_release_taskslot</a>
 <LI><a href="#[1c1]">LL_sched_reserve_taskslot</a>
 <LI><a href="#[135]">LL_sched_set_anchor</a>
 <LI><a href="#[1c6]">LL_sched_set_cancel_request</a>
 <LI><a href="#[5c]">LL_sched_set_params</a>
 <LI><a href="#[42a]">LL_sched_set_per_state</a>
 <LI><a href="#[116]">LL_sched_set_priority</a>
 <LI><a href="#[47f]">LL_sched_set_taskslot_length_anchor</a>
 <LI><a href="#[130]">LL_sched_time_t1_ge_t2</a>
 <LI><a href="#[43]">LL_version_exchange</a>
 <LI><a href="#[101]">MBM_get</a>
 <LI><a href="#[103]">MBM_get_available_mem_buffers</a>
 <LI><a href="#[3a9]">MBM_init</a>
 <LI><a href="#[10d]">MBM_release</a>
 <LI><a href="#[fd]">MBM_reserve</a>
 <LI><a href="#[10f]">MBM_resize</a>
 <LI><a href="#[ff]">MBM_unreserve</a>
 <LI><a href="#[2e9]">Mem_Buff_append</a>
 <LI><a href="#[43d]">Mem_Buff_block_copy</a>
 <LI><a href="#[475]">Mem_Buff_block_write</a>
 <LI><a href="#[fb]">Mem_Buff_cmp</a>
 <LI><a href="#[3a8]">Mem_Buff_get</a>
 <LI><a href="#[109]">Mem_Buff_get_buff_off</a>
 <LI><a href="#[3ac]">Mem_Buff_get_chain_count</a>
 <LI><a href="#[3b0]">Mem_Buff_get_chain_size</a>
 <LI><a href="#[3aa]">Mem_Buff_init</a>
 <LI><a href="#[107]">Mem_Buff_read</a>
 <LI><a href="#[3ae]">Mem_Buff_release</a>
 <LI><a href="#[3b1]">Mem_Buff_resize</a>
 <LI><a href="#[110]">Mem_Buff_write</a>
 <LI><a href="#[272]">SDB_sap_read_peer_bonded_gatt_client_data</a>
 <LI><a href="#[26e]">SDB_sap_write_peer_bonded_gatt_client_data</a>
 <LI><a href="#[275]">UUID_cmp</a>
 <LI><a href="#[27b]">UUID_cmp_128bits</a>
 <LI><a href="#[240]">UUID_get_value_p</a>
 <LI><a href="#[276]">UUID_write_to_flat</a>
 <LI><a href="#[1a2]">_BlueNRG_Stack_Initialization</a>
 <LI><a href="#[237]">aci_att_exchange_mtu_resp_event_push_noinline</a>
 <LI><a href="#[239]">aci_att_srv_exec_write_req_event_push_noinline</a>
 <LI><a href="#[4c]">aci_att_srv_prepare_write_req_event_cb</a>
 <LI><a href="#[3de]">aci_att_srv_prepare_write_req_event_copy</a>
 <LI><a href="#[247]">aci_att_srv_prepare_write_req_event_push_noinline</a>
 <LI><a href="#[142]">aci_event_fifo_push</a>
 <LI><a href="#[141]">aci_event_fifo_push_header</a>
 <LI><a href="#[18f]">aci_gap_init</a>
 <LI><a href="#[3e0]">aci_gap_numeric_comparison_value_confirm_yesno_api</a>
 <LI><a href="#[3e3]">aci_gap_pairing_complete_event_push_noinline</a>
 <LI><a href="#[3e4]">aci_gap_passkey_resp_api</a>
 <LI><a href="#[3e6]">aci_gap_proc_complete_event_copy</a>
 <LI><a href="#[1f5]">aci_gap_proc_complete_event_wrapper</a>
 <LI><a href="#[3e8]">aci_gap_set_io_capability_api</a>
 <LI><a href="#[3ea]">aci_gap_set_security_requirements_api</a>
 <LI><a href="#[4d]">aci_gatt_clt_indication_event_cb</a>
 <LI><a href="#[3ed]">aci_gatt_clt_indication_event_copy</a>
 <LI><a href="#[25c]">aci_gatt_clt_indication_event_push_noinline</a>
 <LI><a href="#[4e]">aci_gatt_clt_multi_notification_int_event_cb</a>
 <LI><a href="#[3ee]">aci_gatt_clt_multi_notification_int_event_copy</a>
 <LI><a href="#[25b]">aci_gatt_clt_multi_notification_int_event_push_noinline</a>
 <LI><a href="#[4f]">aci_gatt_clt_notification_event_cb</a>
 <LI><a href="#[3f0]">aci_gatt_clt_notification_event_copy</a>
 <LI><a href="#[3ef]">aci_gatt_clt_notification_event_notify</a>
 <LI><a href="#[25a]">aci_gatt_clt_notification_event_push_noinline</a>
 <LI><a href="#[213]">aci_gatt_proc_timeout_event_push_noinline</a>
 <LI><a href="#[3f1]">aci_gatt_srv_add_char_api</a>
 <LI><a href="#[3f2]">aci_gatt_srv_add_service_api</a>
 <LI><a href="#[266]">aci_gatt_srv_attribute_modified_event_push_noinline</a>
 <LI><a href="#[233]">aci_gatt_srv_confirmation_event_push_noinline</a>
 <LI><a href="#[3f3]">aci_gatt_srv_get_char_decl_handle_api</a>
 <LI><a href="#[3f4]">aci_gatt_srv_get_service_handle_api</a>
 <LI><a href="#[251]">aci_gatt_srv_read_event_push_noinline</a>
 <LI><a href="#[50]">aci_gatt_srv_write_event_cb</a>
 <LI><a href="#[3f5]">aci_gatt_srv_write_event_copy</a>
 <LI><a href="#[258]">aci_gatt_srv_write_event_push_noinline</a>
 <LI><a href="#[221]">aci_gatt_tx_pool_available_event_push_noinline</a>
 <LI><a href="#[375]">aci_hal_adv_scan_resp_data_update_event_push_noinline</a>
 <LI><a href="#[208]">aci_hal_fw_error_event_push_noinline</a>
 <LI><a href="#[18d]">aci_hal_set_tx_power_level</a>
 <LI><a href="#[18c]">aci_hal_write_config_data</a>
 <LI><a href="#[2d9]">aci_l2cap_command_reject_event_copy</a>
 <LI><a href="#[2db]">aci_l2cap_connection_update_req_event_copy</a>
 <LI><a href="#[3a]">aci_l2cap_proc_timeout_event_cb</a>
 <LI><a href="#[3f6]">aci_l2cap_proc_timeout_event_copy</a>
 <LI><a href="#[3f7]">addr8_list_add</a>
 <LI><a href="#[39e]">addr8_list_clear</a>
 <LI><a href="#[3f9]">addr8_list_remove_by_addr</a>
 <LI><a href="#[3f8]">addr8_list_search</a>
 <LI><a href="#[309]">bis_csr_ucfg</a>
 <LI><a href="#[58e]">bis_csr_ucfg_weak</a>
 <LI><a href="#[39c]">ble_HAL_Init</a>
 <LI><a href="#[47]">char_copy</a>
 <LI><a href="#[1a1]">chc_csr_ucfg</a>
 <LI><a href="#[58f]">chc_csr_ucfg_weak</a>
 <LI><a href="#[308]">cis_csr_ucfg</a>
 <LI><a href="#[590]">cis_csr_ucfg_weak</a>
 <LI><a href="#[2c4]">configBitmapSet</a>
 <LI><a href="#[3fa]">conn_supp_csr</a>
 <LI><a href="#[60]">copy_swap_buffer</a>
 <LI><a href="#[3da]">csmem_init</a>
 <LI><a href="#[27]">csmem_mem_0_assign</a>
 <LI><a href="#[4a]">csmem_mem_assign</a>
 <LI><a href="#[21c]">cst_sharedCallback</a>
 <LI><a href="#[19f]">cte_csr_ucfg</a>
 <LI><a href="#[591]">cte_csr_ucfg_weak</a>
 <LI><a href="#[198]">data_length_extension_csr_ucfg</a>
 <LI><a href="#[592]">data_length_extension_csr_ucfg_weak</a>
 <LI><a href="#[199]">ext_adv_scan_enabled_ucfg</a>
 <LI><a href="#[593]">ext_adv_scan_enabled_ucfg_weak</a>
 <LI><a href="#[1e5]">gap_extended_adv_scan_supported</a>
 <LI><a href="#[53]">gap_timers_callback</a>
 <LI><a href="#[28]">gap_timers_callback_wrapper</a>
 <LI><a href="#[46b]">get_rf_rx_path_compensation_db</a>
 <LI><a href="#[1cc]">hal_radio_activity_state_cb_check</a>
 <LI><a href="#[1ce]">hal_radio_activity_state_init</a>
 <LI><a href="#[400]">hal_read_radio_activity_state</a>
 <LI><a href="#[3fd]">hci_aci_event_notify_cb</a>
 <LI><a href="#[401]">hci_acl_data_ind_event_int_cb</a>
 <LI><a href="#[403]">hci_acl_data_tx_cmpl_event_int_cb</a>
 <LI><a href="#[132]">hci_check_legacy_ext_flag</a>
 <LI><a href="#[405]">hci_disconnection_complete_event_int_cb</a>
 <LI><a href="#[409]">hci_encryption_change_event_int_cb</a>
 <LI><a href="#[40b]">hci_encryption_key_refresh_complete_event_int_cb</a>
 <LI><a href="#[3fb]">hci_event_notify_cb</a>
 <LI><a href="#[41d]">hci_get_set_legacy_ext_flag</a>
 <LI><a href="#[8c]">hci_le_advertising_report_event_int_cb_ucfg</a>
 <LI><a href="#[594]">hci_le_advertising_report_event_int_cb_ucfg_weak</a>
 <LI><a href="#[94]">hci_le_advertising_set_terminated_event_int_cb_ucfg</a>
 <LI><a href="#[595]">hci_le_advertising_set_terminated_event_int_cb_ucfg_weak</a>
 <LI><a href="#[40c]">hci_le_connection_complete_event_int_cb</a>
 <LI><a href="#[91]">hci_le_directed_advertising_report_event_int_cb_ucfg</a>
 <LI><a href="#[596]">hci_le_directed_advertising_report_event_int_cb_ucfg_weak</a>
 <LI><a href="#[40f]">hci_le_encrypt</a>
 <LI><a href="#[410]">hci_le_enhanced_connection_complete_event_int_cb</a>
 <LI><a href="#[95]">hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg</a>
 <LI><a href="#[597]">hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak</a>
 <LI><a href="#[92]">hci_le_extended_advertising_report_event_int_cb_ucfg</a>
 <LI><a href="#[598]">hci_le_extended_advertising_report_event_int_cb_ucfg_weak</a>
 <LI><a href="#[412]">hci_le_generate_dhkey_api</a>
 <LI><a href="#[54]">hci_le_generate_dhkey_cb</a>
 <LI><a href="#[413]">hci_le_generate_dhkey_complete_event_int_cb</a>
 <LI><a href="#[415]">hci_le_long_term_key_request_event_int_cb</a>
 <LI><a href="#[417]">hci_le_long_term_key_request_negative_reply_api</a>
 <LI><a href="#[419]">hci_le_long_term_key_request_reply_api</a>
 <LI><a href="#[41a]">hci_le_read_local_p256_public_key_api</a>
 <LI><a href="#[55]">hci_le_read_local_p256_public_key_cb</a>
 <LI><a href="#[41b]">hci_le_read_local_p256_public_key_complete_event_int_cb</a>
 <LI><a href="#[380]">hci_le_read_remote_features_complete_event_push_noinline</a>
 <LI><a href="#[93]">hci_le_scan_timeout_event_int_cb_ucfg</a>
 <LI><a href="#[599]">hci_le_scan_timeout_event_int_cb_ucfg_weak</a>
 <LI><a href="#[1fa]">hci_le_set_advertising_enable</a>
 <LI><a href="#[1d8]">hci_le_set_event_mask</a>
 <LI><a href="#[1f8]">hci_le_set_random_address</a>
 <LI><a href="#[56]">hci_number_of_completed_packets_event_cb</a>
 <LI><a href="#[41e]">hci_number_of_completed_packets_event_copy</a>
 <LI><a href="#[41f]">hci_number_of_completed_packets_event_push_noinline</a>
 <LI><a href="#[420]">hci_read_remote_version_information_complete_event_copy</a>
 <LI><a href="#[402]">hci_rx_acl_data</a>
 <LI><a href="#[421]">hci_rx_acl_data_event_copy</a>
 <LI><a href="#[3fc]">hci_rx_data_notify_cb</a>
 <LI><a href="#[1d9]">hci_set_event_mask</a>
 <LI><a href="#[404]">hci_tx_acl_data_done</a>
 <LI><a href="#[422]">hci_vs_force_local_p256_debug_key_api</a>
 <LI><a href="#[2d3]">is_Buffer_All_Set_To</a>
 <LI><a href="#[85]">iso_rx_bn_pdu_event_int_cb_ucfg</a>
 <LI><a href="#[59a]">iso_rx_bn_pdu_event_int_cb_ucfg_weak</a>
 <LI><a href="#[87]">iso_terminate_event_int_cb_ucfg</a>
 <LI><a href="#[59b]">iso_terminate_event_int_cb_ucfg_weak</a>
 <LI><a href="#[86]">iso_tx_bn_pdu_event_int_cb_ucfg</a>
 <LI><a href="#[59c]">iso_tx_bn_pdu_event_int_cb_ucfg_weak</a>
 <LI><a href="#[46e]">isr_Acl_Data_Indication_Queue_Full</a>
 <LI><a href="#[471]">isr_Acl_Data_TX_Cmpl_Queue_Full</a>
 <LI><a href="#[2df]">l2c_cos_channel_descriptor_reset</a>
 <LI><a href="#[19e]">l2c_cos_csr_ucfg</a>
 <LI><a href="#[59d]">l2c_cos_csr_ucfg_weak</a>
 <LI><a href="#[2e4]">l2c_cos_hndl_incoming_le_frame_ucfg</a>
 <LI><a href="#[59e]">l2c_cos_hndl_incoming_le_frame_ucfg_weak</a>
 <LI><a href="#[64]">l2c_cos_process_pending_actions_tsk_ucfg</a>
 <LI><a href="#[59f]">l2c_cos_process_pending_actions_tsk_ucfg_weak</a>
 <LI><a href="#[2ea]">l2c_cos_sdu_enqueue_for_segmentation_ucfg</a>
 <LI><a href="#[5a0]">l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak</a>
 <LI><a href="#[65]">l2c_cos_sdu_reassembly_tsk_ucfg</a>
 <LI><a href="#[5a1]">l2c_cos_sdu_reassembly_tsk_ucfg_weak</a>
 <LI><a href="#[67]">l2c_cos_sdu_segmentation_tsk_ucfg</a>
 <LI><a href="#[5a2]">l2c_cos_sdu_segmentation_tsk_ucfg_weak</a>
 <LI><a href="#[66]">l2c_cos_transmit_pdu_packets_tsk_ucfg</a>
 <LI><a href="#[5a3]">l2c_cos_transmit_pdu_packets_tsk_ucfg_weak</a>
 <LI><a href="#[2d5]">l2c_get_link_control_block_index</a>
 <LI><a href="#[2dd]">l2c_get_link_control_block_ref</a>
 <LI><a href="#[2da]">l2c_post_process_incoming_request_packet</a>
 <LI><a href="#[2d8]">l2c_pre_process_incoming_response_packet</a>
 <LI><a href="#[2e5]">l2c_release_unexpected_acl_packet</a>
 <LI><a href="#[407]">l2c_sap_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[40e]">l2c_sap_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[57]">l2cap_timers_callback</a>
 <LI><a href="#[39]">l2cap_timers_callback_wrapper</a>
 <LI><a href="#[465]">ll_cpe_get_cpid_from_opcode</a>
 <LI><a href="#[322]">ll_cpe_set_unknown_rsp_pending</a>
 <LI><a href="#[2c1]">ll_write_supported_data_ucfg</a>
 <LI><a href="#[5a4]">ll_write_supported_data_ucfg_weak</a>
 <LI><a href="#[391]">llc_big_brc_mem_alloc_ucfg</a>
 <LI><a href="#[5a5]">llc_big_brc_mem_alloc_ucfg_weak</a>
 <LI><a href="#[392]">llc_big_sync_mem_alloc_ucfg</a>
 <LI><a href="#[5a6]">llc_big_sync_mem_alloc_ucfg_weak</a>
 <LI><a href="#[428]">llc_check_sreq_or_creq_tx_addr_res_off</a>
 <LI><a href="#[118]">llc_check_sreq_or_creq_tx_addr_ucfg</a>
 <LI><a href="#[5a7]">llc_check_sreq_or_creq_tx_addr_ucfg_weak</a>
 <LI><a href="#[393]">llc_cig_cmn_mem_alloc_ucfg</a>
 <LI><a href="#[5a8]">llc_cig_cmn_mem_alloc_ucfg_weak</a>
 <LI><a href="#[42e]">llc_cig_cmn_start_cis_ucfg</a>
 <LI><a href="#[5a9]">llc_cig_cmn_start_cis_ucfg_weak</a>
 <LI><a href="#[429]">llc_cig_cmn_terminate_cises_on_acl_ucfg</a>
 <LI><a href="#[5aa]">llc_cig_cmn_terminate_cises_on_acl_ucfg_weak</a>
 <LI><a href="#[437]">llc_conn_calc_skip_ucfg</a>
 <LI><a href="#[5ab]">llc_conn_calc_skip_ucfg_weak</a>
 <LI><a href="#[58]">llc_conn_cancel_slot</a>
 <LI><a href="#[42b]">llc_conn_check_ctrl_proc_rsp_timer</a>
 <LI><a href="#[42c]">llc_conn_check_instant_and_set_params</a>
 <LI><a href="#[477]">llc_conn_check_subrate_and_set_params_ucfg</a>
 <LI><a href="#[5ac]">llc_conn_check_subrate_and_set_params_ucfg_weak</a>
 <LI><a href="#[439]">llc_conn_check_supervision_timer</a>
 <LI><a href="#[344]">llc_conn_clr_instant_reached_passed</a>
 <LI><a href="#[37e]">llc_conn_clr_rx_acl_blocked</a>
 <LI><a href="#[339]">llc_conn_clr_rx_ctrl_pdu_full</a>
 <LI><a href="#[37d]">llc_conn_clr_tx_acl_blocked</a>
 <LI><a href="#[43c]">llc_conn_copy_tx_data_packet</a>
 <LI><a href="#[323]">llc_conn_disconnect_link_from_cpf</a>
 <LI><a href="#[436]">llc_conn_enhanced_get_latency</a>
 <LI><a href="#[347]">llc_conn_get_cntxt_p</a>
 <LI><a href="#[2ed]">llc_conn_get_cntxt_per_p</a>
 <LI><a href="#[305]">llc_conn_get_cntxt_per_p_from_handle</a>
 <LI><a href="#[418]">llc_conn_get_conn_idx</a>
 <LI><a href="#[32e]">llc_conn_get_ctrl_pdu_data_p</a>
 <LI><a href="#[2ee]">llc_conn_get_enc_on</a>
 <LI><a href="#[341]">llc_conn_get_instant_passed</a>
 <LI><a href="#[340]">llc_conn_get_instant_reached</a>
 <LI><a href="#[427]">llc_conn_get_rx_acl_blocked</a>
 <LI><a href="#[426]">llc_conn_get_rx_ctrl_pdu_full</a>
 <LI><a href="#[470]">llc_conn_get_tx_acl_blocked</a>
 <LI><a href="#[32b]">llc_conn_get_tx_ctrl_pdu_state</a>
 <LI><a href="#[126]">llc_conn_go_to_connect</a>
 <LI><a href="#[457]">llc_conn_guard_time_for_close_conn_event</a>
 <LI><a href="#[384]">llc_conn_init</a>
 <LI><a href="#[445]">llc_conn_init_cte_ctxt_ucfg</a>
 <LI><a href="#[5ad]">llc_conn_init_cte_ctxt_ucfg_weak</a>
 <LI><a href="#[446]">llc_conn_init_pcl_ctxt_ucfg</a>
 <LI><a href="#[5ae]">llc_conn_init_pcl_ctxt_ucfg_weak</a>
 <LI><a href="#[59]">llc_conn_isr</a>
 <LI><a href="#[452]">llc_conn_list_add_address</a>
 <LI><a href="#[330]">llc_conn_list_remove_address</a>
 <LI><a href="#[459]">llc_conn_list_reset</a>
 <LI><a href="#[11c]">llc_conn_list_search_address</a>
 <LI><a href="#[38a]">llc_conn_mem_allocate</a>
 <LI><a href="#[479]">llc_conn_multi_link_connection</a>
 <LI><a href="#[336]">llc_conn_per_init</a>
 <LI><a href="#[480]">llc_conn_peripheral_latency_cancellation_tsk</a>
 <LI><a href="#[5a]">llc_conn_program_slot</a>
 <LI><a href="#[450]">llc_conn_push_adv_set_terminated_event</a>
 <LI><a href="#[131]">llc_conn_push_connection_complete_event</a>
 <LI><a href="#[451]">llc_conn_push_csa_event</a>
 <LI><a href="#[1c2]">llc_conn_release_conn_idx</a>
 <LI><a href="#[1c0]">llc_conn_reserve_conn_idx</a>
 <LI><a href="#[144]">llc_conn_send_acl_data</a>
 <LI><a href="#[31d]">llc_conn_set_chmap_params</a>
 <LI><a href="#[35b]">llc_conn_set_conn_update_params</a>
 <LI><a href="#[378]">llc_conn_set_rx_acl_blocked</a>
 <LI><a href="#[37a]">llc_conn_set_start_enc</a>
 <LI><a href="#[377]">llc_conn_set_stop_enc</a>
 <LI><a href="#[43a]">llc_conn_set_taskslot_params</a>
 <LI><a href="#[376]">llc_conn_set_tx_acl_blocked</a>
 <LI><a href="#[358]">llc_conn_set_tx_ctrl_pdu_has_instant</a>
 <LI><a href="#[32c]">llc_conn_set_tx_ctrl_pdu_state</a>
 <LI><a href="#[5b]">llc_conn_skip_slot</a>
 <LI><a href="#[466]">llc_conn_update_receive_window</a>
 <LI><a href="#[129]">llc_convert_hci_phy_enum_to_hw_phy</a>
 <LI><a href="#[44e]">llc_convert_sca_to_ppm</a>
 <LI><a href="#[320]">llc_cpe_calc_instant</a>
 <LI><a href="#[44a]">llc_cpe_init_sm_ctxt</a>
 <LI><a href="#[35e]">llc_cte_get_ctxt</a>
 <LI><a href="#[39a]">llc_cte_init_ucfg</a>
 <LI><a href="#[5af]">llc_cte_init_ucfg_weak</a>
 <LI><a href="#[395]">llc_cte_mem_allocate_ucfg</a>
 <LI><a href="#[5b0]">llc_cte_mem_allocate_ucfg_weak</a>
 <LI><a href="#[478]">llc_cte_process_rx_cte_ucfg</a>
 <LI><a href="#[5b1]">llc_cte_process_rx_cte_ucfg_weak</a>
 <LI><a href="#[3a3]">llc_cte_timer_error_ucfg</a>
 <LI><a href="#[5b2]">llc_cte_timer_error_ucfg_weak</a>
 <LI><a href="#[3a1]">llc_cte_timer_stop_ucfg</a>
 <LI><a href="#[5b3]">llc_cte_timer_stop_ucfg_weak</a>
 <LI><a href="#[313]">llc_eadv_generate_new_rpa_for_one_adv_set</a>
 <LI><a href="#[30f]">llc_get_advertising_set_index</a>
 <LI><a href="#[1c8]">llc_get_channel_sel_algo2_enabled</a>
 <LI><a href="#[1be]">llc_get_linkms_cntxt_p</a>
 <LI><a href="#[442]">llc_get_next_free_conn_handle</a>
 <LI><a href="#[390]">llc_iso_cmn_mem_alloc_ucfg</a>
 <LI><a href="#[5b4]">llc_iso_cmn_mem_alloc_ucfg_weak</a>
 <LI><a href="#[394]">llc_isoal_mem_alloc_ucfg</a>
 <LI><a href="#[5b5]">llc_isoal_mem_alloc_ucfg_weak</a>
 <LI><a href="#[443]">llc_mngm_csa2_select_channel_for_task</a>
 <LI><a href="#[48d]">llc_mngm_csa2_select_subevent_channel_ucfg</a>
 <LI><a href="#[5b6]">llc_mngm_csa2_select_subevent_channel_ucfg_weak</a>
 <LI><a href="#[431]">llc_mngm_csa2_update_remapping_table</a>
 <LI><a href="#[47e]">llc_mngm_mod_37</a>
 <LI><a href="#[399]">llc_padv_init_ucfg</a>
 <LI><a href="#[5b7]">llc_padv_init_ucfg_weak</a>
 <LI><a href="#[38b]">llc_padv_mem_allocate_ucfg</a>
 <LI><a href="#[5b8]">llc_padv_mem_allocate_ucfg_weak</a>
 <LI><a href="#[3b]">llc_padv_periodic_adv_sync_csr_ucfg</a>
 <LI><a href="#[5b9]">llc_padv_periodic_adv_sync_csr_ucfg_weak</a>
 <LI><a href="#[196]">llc_padv_periodic_adv_sync_wr_csr_ucfg</a>
 <LI><a href="#[5ba]">llc_padv_periodic_adv_sync_wr_csr_ucfg_weak</a>
 <LI><a href="#[38e]">llc_past_mem_allocate_ucfg</a>
 <LI><a href="#[5bb]">llc_past_mem_allocate_ucfg_weak</a>
 <LI><a href="#[19b]">llc_priv_controller_privacy_csr_ucfg</a>
 <LI><a href="#[5bc]">llc_priv_controller_privacy_csr_ucfg_weak</a>
 <LI><a href="#[489]">llc_priv_generate_local_rpa_from_peer_id_ucfg</a>
 <LI><a href="#[5bd]">llc_priv_generate_local_rpa_from_peer_id_ucfg_weak</a>
 <LI><a href="#[48a]">llc_priv_generate_peer_rpa_from_peer_id_ucfg</a>
 <LI><a href="#[5be]">llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak</a>
 <LI><a href="#[488]">llc_priv_init_random_part_of_one_local_rpa_ucfg</a>
 <LI><a href="#[5bf]">llc_priv_init_random_part_of_one_local_rpa_ucfg_weak</a>
 <LI><a href="#[39f]">llc_priv_init_ucfg</a>
 <LI><a href="#[5c0]">llc_priv_init_ucfg_weak</a>
 <LI><a href="#[389]">llc_priv_mem_allocate</a>
 <LI><a href="#[73]">llc_priv_offline_rpa_resolution_ucfg</a>
 <LI><a href="#[5c1]">llc_priv_offline_rpa_resolution_ucfg_weak</a>
 <LI><a href="#[314]">llc_priv_start_privacy_timer_ucfg</a>
 <LI><a href="#[5c2]">llc_priv_start_privacy_timer_ucfg_weak</a>
 <LI><a href="#[128]">llc_priv_stop_privacy_timer_ucfg</a>
 <LI><a href="#[5c3]">llc_priv_stop_privacy_timer_ucfg_weak</a>
 <LI><a href="#[48f]">llc_pscan_get_cntxt_per_p</a>
 <LI><a href="#[397]">llc_pscan_init_ucfg</a>
 <LI><a href="#[5c4]">llc_pscan_init_ucfg_weak</a>
 <LI><a href="#[26]">llc_pscan_isr_ucfg</a>
 <LI><a href="#[5c5]">llc_pscan_isr_ucfg_weak</a>
 <LI><a href="#[38d]">llc_pscan_mem_allocate_ucfg</a>
 <LI><a href="#[5c6]">llc_pscan_mem_allocate_ucfg_weak</a>
 <LI><a href="#[338]">llc_pscan_wr_check_pawr_active_ucfg</a>
 <LI><a href="#[5c7]">llc_pscan_wr_check_pawr_active_ucfg_weak</a>
 <LI><a href="#[383]">llc_pscan_wr_init_ucfg</a>
 <LI><a href="#[5c8]">llc_pscan_wr_init_ucfg_weak</a>
 <LI><a href="#[38f]">llc_pscan_wr_mem_allocate_ucfg</a>
 <LI><a href="#[5c9]">llc_pscan_wr_mem_allocate_ucfg_weak</a>
 <LI><a href="#[312]">llc_scan_get_cntxt_p</a>
 <LI><a href="#[396]">llc_scan_init_ucfg</a>
 <LI><a href="#[5ca]">llc_scan_init_ucfg_weak</a>
 <LI><a href="#[38c]">llc_scan_mem_allocate_ucfg</a>
 <LI><a href="#[5cb]">llc_scan_mem_allocate_ucfg_weak</a>
 <LI><a href="#[2c5]">llc_scan_set_scan_channel_bitmap</a>
 <LI><a href="#[45b]">llc_subrate_init_acceptable</a>
 <LI><a href="#[448]">llc_subrate_init_acceptable_per</a>
 <LI><a href="#[438]">llc_subrate_new_sr_base_event_ucfg</a>
 <LI><a href="#[5cc]">llc_subrate_new_sr_base_event_ucfg_weak</a>
 <LI><a href="#[2fa]">llc_subrate_offline_processing_ucfg</a>
 <LI><a href="#[5cd]">llc_subrate_offline_processing_ucfg_weak</a>
 <LI><a href="#[432]">llc_subrate_reset_params</a>
 <LI><a href="#[435]">llc_subrate_update_cont_counter_ucfg</a>
 <LI><a href="#[5ce]">llc_subrate_update_cont_counter_ucfg_weak</a>
 <LI><a href="#[5e]">llc_timers_callback</a>
 <LI><a href="#[49]">llc_timers_callback_wrapper</a>
 <LI><a href="#[388]">llc_wl_mem_allocate</a>
 <LI><a href="#[2d2]">nvm_dev_id_data_add_record</a>
 <LI><a href="#[2d1]">nvm_dev_id_data_get_record</a>
 <LI><a href="#[3cd]">nvm_discard_current_record</a>
 <LI><a href="#[3cc]">nvm_gatt_db_read_full_current_record</a>
 <LI><a href="#[495]">nvm_gatt_db_read_init</a>
 <LI><a href="#[491]">nvm_gatt_db_read_next_record</a>
 <LI><a href="#[3ce]">nvm_gatt_db_update_record</a>
 <LI><a href="#[492]">nvm_sec_db_add_record</a>
 <LI><a href="#[493]">nvm_sec_db_get_record_count</a>
 <LI><a href="#[496]">nvm_sec_db_read_init</a>
 <LI><a href="#[494]">nvm_sec_db_read_next_record</a>
 <LI><a href="#[1a0]">pcl_csr_ucfg</a>
 <LI><a href="#[5cf]">pcl_csr_ucfg_weak</a>
 <LI><a href="#[19a]">phy_upd_csr_ucfg</a>
 <LI><a href="#[5d0]">phy_upd_csr_ucfg_weak</a>
 <LI><a href="#[19d]">scan_csr_ucfg</a>
 <LI><a href="#[5d1]">scan_csr_ucfg_weak</a>
 <LI><a href="#[497]">sdb_sap_add_security_record</a>
 <LI><a href="#[498]">sdb_sap_del_bonded_device</a>
 <LI><a href="#[499]">sdb_sap_get_security_records_count</a>
 <LI><a href="#[3ca]">sdb_sap_read_security_record</a>
 <LI><a href="#[49b]">sdb_sap_read_security_record_matching</a>
 <LI><a href="#[49d]">secure_connections_csr</a>
 <LI><a href="#[4f9]">smp_check_is_any_pairing_ongoing</a>
 <LI><a href="#[49e]">smp_cmn_is_peer_rejectlisted</a>
 <LI><a href="#[49f]">smp_cmn_rejectlist_init</a>
 <LI><a href="#[4a0]">smp_cmn_rejectlist_start_probation_timer2</a>
 <LI><a href="#[4a2]">smp_cmn_repeated_attacks_protection_start</a>
 <LI><a href="#[4a3]">smp_cmn_repeated_attacks_timer_cb</a>
 <LI><a href="#[4a6]">smp_crt_diversify</a>
 <LI><a href="#[4a7]">smp_crt_f4_generate_confirm</a>
 <LI><a href="#[4a8]">smp_crt_f5_generate_keys</a>
 <LI><a href="#[4a9]">smp_crt_f6_generate_check_val</a>
 <LI><a href="#[4aa]">smp_crt_g2_generate_num_comp_val</a>
 <LI><a href="#[4ab]">smp_crt_generate_cmac_tag</a>
 <LI><a href="#[4ad]">smp_crt_generate_csrk</a>
 <LI><a href="#[4ae]">smp_crt_s1_generate_stk</a>
 <LI><a href="#[4af]">smp_debug_trudy__set_config</a>
 <LI><a href="#[4b0]">smp_dep_gap_get_local_identity_address</a>
 <LI><a href="#[4b1]">smp_dep_l2c_send_acl_packet</a>
 <LI><a href="#[4b3]">smp_dep_l2c_send_acl_short_pdu</a>
 <LI><a href="#[4b4]">smp_dep_sdb_add_bonding_record</a>
 <LI><a href="#[4b5]">smp_dep_sdb_find_bonding_record_by_conn_addr</a>
 <LI><a href="#[4b7]">smp_dep_sdb_find_bonding_record_read_address</a>
 <LI><a href="#[4b8]">smp_dep_sdb_find_matching_ltk_read_record</a>
 <LI><a href="#[4b9]">smp_dep_sdb_get_bonding_records_count</a>
 <LI><a href="#[4c5]">smp_fsm_execute_actions_excerpt_cei_ucfg</a>
 <LI><a href="#[5d2]">smp_fsm_execute_actions_excerpt_cei_ucfg_weak</a>
 <LI><a href="#[4ba]">smp_fsm_execute_actions_scp_phase2as2</a>
 <LI><a href="#[4be]">smp_fsm_process_actions_wrt_state_tsk</a>
 <LI><a href="#[4b2]">smp_get_remote_device_list_index</a>
 <LI><a href="#[4f2]">smp_get_remote_device_list_item</a>
 <LI><a href="#[4c6]">smp_init</a>
 <LI><a href="#[4c9]">smp_oob_check_is_remote_data_present</a>
 <LI><a href="#[4ca]">smp_oob_clear_remote_data_entry</a>
 <LI><a href="#[4cb]">smp_oob_get_remote_data_reference</a>
 <LI><a href="#[4cc]">smp_pka_process_ecc_computation_tsk</a>
 <LI><a href="#[4d6]">smp_pp1_auth_req_field_generate_from_device_config</a>
 <LI><a href="#[4d1]">smp_pp1_get_next_free_pairing_idx</a>
 <LI><a href="#[4d5]">smp_pp1_get_pairing_pdu_offset</a>
 <LI><a href="#[4ce]">smp_pp1_hndl_pairing_response_mode_through_event</a>
 <LI><a href="#[4cf]">smp_pp1_key_generation_method_selection</a>
 <LI><a href="#[4d9]">smp_pp1_pairing_packet_build</a>
 <LI><a href="#[4d0]">smp_pp1_per_rxp_pairing_request</a>
 <LI><a href="#[4d4]">smp_pp1_per_send_pairing_response</a>
 <LI><a href="#[4d3]">smp_pp1_reqrsp_pdu_copy_to_pairing_data</a>
 <LI><a href="#[4d8]">smp_pp1_reqrsp_pdu_extract_from_pairing_data</a>
 <LI><a href="#[4d2]">smp_pp1_reqrsp_pdu_params_check</a>
 <LI><a href="#[4da]">smp_pp2_per_auth_stage1_start_excerpt_scp</a>
 <LI><a href="#[4c2]">smp_pp2_per_auth_stage_1_start</a>
 <LI><a href="#[4db]">smp_pp2_per_rx_process_pairing_confirm</a>
 <LI><a href="#[4e0]">smp_pp2_per_rx_process_pairing_confirm_excerpt_scp</a>
 <LI><a href="#[4e1]">smp_pp2_per_rx_process_pairing_random</a>
 <LI><a href="#[4e3]">smp_pp2_per_rx_process_pairing_random_excerpt_scp</a>
 <LI><a href="#[4e5]">smp_pp3_keys_distribution_completed</a>
 <LI><a href="#[4e7]">smp_pp3_keys_distribution_receive</a>
 <LI><a href="#[4c0]">smp_pp3_keys_distribution_send</a>
 <LI><a href="#[4e9]">smp_pp3_keys_distribution_signaling_ack</a>
 <LI><a href="#[4c3]">smp_pp3_keys_distribution_start</a>
 <LI><a href="#[4c4]">smp_pp3_pairing_completed_successful</a>
 <LI><a href="#[4eb]">smp_pp3_pairing_completed_update_stats</a>
 <LI><a href="#[4ed]">smp_pp3_pairing_failed_receive</a>
 <LI><a href="#[4bc]">smp_pp3_pairing_failed_send</a>
 <LI><a href="#[4ee]">smp_rxp_flush_packet_queues</a>
 <LI><a href="#[4ef]">smp_rxp_process_exception_cases_excerpt_scp</a>
 <LI><a href="#[4f1]">smp_rxp_process_rxed_packets_tsk</a>
 <LI><a href="#[4f4]">smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg</a>
 <LI><a href="#[5d3]">smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak</a>
 <LI><a href="#[4f6]">smp_rxp_process_wrt_current_fsm_excerpt_scp</a>
 <LI><a href="#[3e5]">smp_sap_aci_passkey_response</a>
 <LI><a href="#[3e1]">smp_sap_aci_scp_numeric_comparison_response</a>
 <LI><a href="#[3ec]">smp_sap_aci_set_authentication_req</a>
 <LI><a href="#[3e9]">smp_sap_aci_set_io_capabilities</a>
 <LI><a href="#[271]">smp_sap_check_encryption_key_size</a>
 <LI><a href="#[27a]">smp_sap_check_is_peer_device_bonded</a>
 <LI><a href="#[49c]">smp_sap_crt_generate_ediv</a>
 <LI><a href="#[4e8]">smp_sap_crt_generate_local_irk</a>
 <LI><a href="#[1e8]">smp_sap_crt_generate_rpa</a>
 <LI><a href="#[49a]">smp_sap_crt_resolve_rpa</a>
 <LI><a href="#[20e]">smp_sap_forget_device_upon_disconnection</a>
 <LI><a href="#[26d]">smp_sap_get_remote_address_check_addr_type</a>
 <LI><a href="#[270]">smp_sap_get_security_level</a>
 <LI><a href="#[406]">smp_sap_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[40a]">smp_sap_hci_encryption_change_evt_hndl</a>
 <LI><a href="#[40d]">smp_sap_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[411]">smp_sap_hci_le_enhanced_connection_complete_evt_hndl</a>
 <LI><a href="#[4fb]">smp_sap_hci_le_generate_dhkey_complete_evt_hndl</a>
 <LI><a href="#[416]">smp_sap_hci_le_long_term_key_request_evt_hndl</a>
 <LI><a href="#[4fc]">smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl</a>
 <LI><a href="#[2e6]">smp_sap_l2c_acl_data_hndl</a>
 <LI><a href="#[4fe]">smp_sap_scp_force_debug_key_usage</a>
 <LI><a href="#[256]">smp_sap_sm2_packet_data_signing_validate</a>
 <LI><a href="#[500]">smp_scp_continue_on_exclusive_sc_pairing</a>
 <LI><a href="#[4cd]">smp_scp_execute_public_key_generation_request</a>
 <LI><a href="#[501]">smp_scp_init</a>
 <LI><a href="#[4ff]">smp_scp_is_another_sc_pairing_ongoing</a>
 <LI><a href="#[4dc]">smp_scp_oob_confirm_receive_verify</a>
 <LI><a href="#[4f7]">smp_scp_phase_2as2_dhkey_check_receive</a>
 <LI><a href="#[4bb]">smp_scp_phase_2as2_start</a>
 <LI><a href="#[505]">smp_scp_public_key_prepare_and_exchange</a>
 <LI><a href="#[4f8]">smp_scp_public_key_receive</a>
 <LI><a href="#[506]">smp_scp_public_key_send</a>
 <LI><a href="#[4fd]">smp_scp_set_local_public_key</a>
 <LI><a href="#[507]">smp_scp_stats_update_on_pairing_complete</a>
 <LI><a href="#[4e6]">smp_start_encryption_ucfg</a>
 <LI><a href="#[5d4]">smp_start_encryption_ucfg_weak</a>
 <LI><a href="#[4c7]">smp_timer_init</a>
 <LI><a href="#[4a1]">smp_timer_reset</a>
 <LI><a href="#[62]">smp_timers_cb</a>
 <LI><a href="#[61]">smp_timers_cb_wrapper</a>
 <LI><a href="#[508]">smp_timers_protocol_timeout_cb</a>
 <LI><a href="#[346]">subrate_csr_ucfg</a>
 <LI><a href="#[5d5]">subrate_csr_ucfg_weak</a>
 <LI><a href="#[3db]">tsk_init</a>
 <LI><a href="#[1ae]">tsk_no_idle_check</a>
 <LI><a href="#[1ac]">tsk_notify_idx</a>
 <LI><a href="#[1af]">tsk_scheduler</a>
 <LI><a href="#[3c2]">tsk_signal_resource_idx</a>
 <LI><a href="#[222]">tsk_wait_resource_idx</a>
 <LI><a href="#[3df]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[1cb]">event_notify_cb</a>
 <LI><a href="#[1ca]">hci_hardware_error_event_cb</a>
 <LI><a href="#[1f6]">GAP_stop_discoverability</a>
 <LI><a href="#[2b]">GAT_att_cmn_handle_disconnec_iterate_f</a>
 <LI><a href="#[21b]">GAT_att_cmn_get_timer_index</a>
 <LI><a href="#[210]">GAT_att_cmn_get_opcode</a>
 <LI><a href="#[24c]">GAT_att_srv_get_exec_fn_id_by_op</a>
 <LI><a href="#[238]">GAT_att_srv_write_err_packet</a>
 <LI><a href="#[24b]">GAT_att_srv_run</a>
 <LI><a href="#[108]">ACL_pkt_read_8b</a>
 <LI><a href="#[254]">GAT_att_srv_send_response</a>
 <LI><a href="#[23b]">GAT_att_srv_get_handle_range</a>
 <LI><a href="#[232]">GAT_att_srv_flush_rx_pckts</a>
 <LI><a href="#[112]">ACL_pkt_write_8b</a>
 <LI><a href="#[79]">GAT_att_srv_exchange_mtu_exc</a>
 <LI><a href="#[7a]">GAT_att_srv_find_info_exc</a>
 <LI><a href="#[7b]">GAT_att_srv_find_by_type_val_exc</a>
 <LI><a href="#[23d]">GAT_att_srv_value_read</a>
 <LI><a href="#[7c]">GAT_att_srv_read_by_type_exc</a>
 <LI><a href="#[7d]">GAT_att_srv_read_exc</a>
 <LI><a href="#[7e]">GAT_att_srv_read_multi_exc</a>
 <LI><a href="#[7f]">GAT_att_srv_write_exc</a>
 <LI><a href="#[246]">GAT_att_srv_set_attr_value_check</a>
 <LI><a href="#[80]">GAT_att_srv_prep_wr_exc</a>
 <LI><a href="#[81]">GAT_att_srv_exec_wr_exc</a>
 <LI><a href="#[82]">GAT_att_srv_confirm_exc</a>
 <LI><a href="#[26b]">GAT_srv_is_bonded</a>
 <LI><a href="#[269]">GAT_srv_set_zip_val</a>
 <LI><a href="#[26a]">GAT_srv_set_cccd_val</a>
 <LI><a href="#[268]">GAT_srv_get_zip_val</a>
 <LI><a href="#[2f]">GAT_srv_aes_cmac_append</a>
 <LI><a href="#[30]">GAT_srv_tx_service_change</a>
 <LI><a href="#[265]">GAT_srv_attr_direct_value_write</a>
 <LI><a href="#[456]">llc_conn_set_blue_packets</a>
 <LI><a href="#[47a]">llc_conn_peripheral_latency</a>
 <LI><a href="#[47b]">llc_conn_peripheral_latency_cancellation</a>
 <LI><a href="#[32a]">LL_cpe_get_ctrl_flds_common_p</a>
 <LI><a href="#[327]">ll_cpe_get_ctrl_flds_per_sm_p</a>
 <LI><a href="#[326]">ll_cpe_get_cpid_from_sm</a>
 <LI><a href="#[329]">ll_cpe_set_active</a>
 <LI><a href="#[32d]">ll_cpe_check_rx_pdu_can_be_processed</a>
 <LI><a href="#[32f]">ll_cpe_get_blocked_status</a>
 <LI><a href="#[331]">ll_cpe_get_expected_opcode</a>
 <LI><a href="#[332]">ll_cpe_get_state</a>
 <LI><a href="#[333]">LL_cpe_rxctrlpdu_checkreject</a>
 <LI><a href="#[334]">valid_first_opcode</a>
 <LI><a href="#[335]">ll_cpe_reset_state_machines</a>
 <LI><a href="#[33a]">ll_cpe_get_active</a>
 <LI><a href="#[33b]">ll_cpe_get_rx_pdu_discarded_by_one_sm</a>
 <LI><a href="#[33c]">ll_cpe_process_rx_pdu</a>
 <LI><a href="#[33d]">ll_cpe_get_instant_active</a>
 <LI><a href="#[33e]">LL_cpe_get_cpf</a>
 <LI><a href="#[33f]">ll_cpe_set_expected_opcode</a>
 <LI><a href="#[342]">ll_cpe_clr_rx_pdu_discarded_by_one_sm</a>
 <LI><a href="#[343]">ll_cpe_check_instant_blocked</a>
 <LI><a href="#[345]">ll_cpe_set_state</a>
 <LI><a href="#[425]">ll_cpe_get_instant_supported</a>
 <LI><a href="#[424]">LL_cpe_is_opcode_supporting_instant</a>
 <LI><a href="#[2ef]">LLC_authenticated_payload_timeout_start_le_ping</a>
 <LI><a href="#[303]">LL_Context_ReturnFree</a>
 <LI><a href="#[30b]">LL_LE_Set_Advertising_Parameters_Default</a>
 <LI><a href="#[1c5]">EADV_stop</a>
 <LI><a href="#[11e]">UTIL_u8GetNextAdvChannel</a>
 <LI><a href="#[133]">hci_le_advertising_set_terminated_event_push</a>
 <LI><a href="#[134]">EADV_stop_isr</a>
 <LI><a href="#[11a]">hci_le_scan_request_received_event_push</a>
 <LI><a href="#[3ad]">MBM_release_balance</a>
 <LI><a href="#[3af]">MBM_move_class</a>
 <LI><a href="#[4e4]">le4ByteToInt32</a>
 <LI><a href="#[3e2]">aci_gap_numeric_comparison_value_event_push</a>
 <LI><a href="#[4de]">smp_pp2_per_lep_confirm_value_compute</a>
 <LI><a href="#[504]">smp_scp_pp2_as2_set_addresses</a>
 <LI><a href="#[502]">smp_scp_pp2_as2_dhkey_check_generate</a>
 <LI><a href="#[503]">smp_scp_pp2_as2_dhkey_check_send</a>
 <LI><a href="#[1f9]">GAP_set_discoverability_mode</a>
 <LI><a href="#[1e4]">GAP_suspend_resume_active_advertising_sets_legacy</a>
 <LI><a href="#[204]">GAT_att_cmn_get_opcode</a>
 <LI><a href="#[10a]">ACL_pkt_read_8b</a>
 <LI><a href="#[1]">GAT_att_clt_unexpect_rx</a>
 <LI><a href="#[229]">GAT_att_db_get_att_idx</a>
 <LI><a href="#[223]">GAT_att_db_find_attr_idx_with_handle</a>
 <LI><a href="#[224]">GAT_att_db_find_attr_idx_from_handle</a>
 <LI><a href="#[228]">GAT_att_db_get_last_group_attribute</a>
 <LI><a href="#[25e]">GAT_srv_db_update_allowed</a>
 <LI><a href="#[25f]">GAT_srv_check_group_size</a>
 <LI><a href="#[434]">llc_conn_close_event</a>
 <LI><a href="#[43e]">llc_conn_decrement_enc_count_rx</a>
 <LI><a href="#[48b]">llc_mngm_csa2_select_channel</a>
 <LI><a href="#[48c]">llc_mngm_csa2_permutation</a>
 <LI><a href="#[359]">llc_conn_upd_params_check</a>
 <LI><a href="#[379]">le4ByteToInt32</a>
 <LI><a href="#[37b]">hci_encryption_key_refresh_complete_event_push</a>
 <LI><a href="#[37c]">hci_encryption_change_event_push</a>
 <LI><a href="#[37f]">llc_enc_prepare_reject</a>
 <LI><a href="#[3a5]">hci_read_remote_version_information_complete_event_push</a>
 <LI><a href="#[3cf]">sdb_remove_security_record_by_address</a>
 <LI><a href="#[3cb]">sdb_gatt_search_record</a>
 <LI><a href="#[4a5]">smp_crt_calculate_hash</a>
 <LI><a href="#[4ac]">smp_crt_left_shift</a>
 <LI><a href="#[4b6]">smp_dep_sdb_copy_bonding_record_data_to_remdev</a>
 <LI><a href="#[4ea]">smp_pp3_pairing_process_abort</a>
 <LI><a href="#[4a4]">smp_connection_complete_handler</a>
 <LI><a href="#[490]">nvm_convert_bleplat_to_blestack_status</a>
 <LI><a href="#[509]">lsbit</a>
 <LI><a href="#[1b3]">Timer_TryStartFirstActive</a>
 <LI><a href="#[1b2]">Timer_StartFirstActive_sysT</a>
 <LI><a href="#[259]">GAT_clt_get_proc_per_channel</a>
 <LI><a href="#[211]">GAT_att_cmn_get_opcode</a>
 <LI><a href="#[10b]">ACL_pkt_read_8b</a>
 <LI><a href="#[0]">GAT_clt_exec_empty</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_IRQHandler</a><BR>
 <LI><a href="#[3e3]">aci_gap_pairing_complete_event_push_noinline</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">aci_event_fifo_push</a><BR>
 <LI><a href="#[208]">aci_hal_fw_error_event_push_noinline</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">aci_event_fifo_push</a><BR>
 <LI><a href="#[2e9]">Mem_Buff_append</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e9]">Mem_Buff_append</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[47]">char_copy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">char_copy</a><BR>
 <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[51]">ACL_pkt_read_16b</a> from acl_packet.o(.text.ACL_pkt_read_16b) referenced from events.o(.text.aci_l2cap_connection_update_req_event_copy)
 <LI><a href="#[2d]">ACL_pkt_write</a> from acl_packet.o(.text.ACL_pkt_write) referenced from gat_att_srv.o(.text.GAT_att_srv_hvtx)
 <LI><a href="#[11]">ADC_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[3d]">ADV_ISR</a> from ll_ext_adv.o(.text.ADV_ISR) referenced from ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
 <LI><a href="#[3c]">ADV_cancelslot</a> from ll_ext_adv.o(.text.ADV_cancelslot) referenced from ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
 <LI><a href="#[3e]">ADV_createslot</a> from ll_ext_adv.o(.text.ADV_createslot) referenced from ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
 <LI><a href="#[3f]">ADV_skiproutine</a> from ll_ext_adv.o(.text.ADV_skiproutine) referenced from ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
 <LI><a href="#[5f]">AES_CMAC_Encrypt</a> from aes128cmac.o(.text.AES_CMAC_Encrypt) referenced from smp_crypto_toolbox.o(.text.smp_crt_f5_generate_keys)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from aci_hal.o(.text.HAL_Write_ConfigData)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from device_id_data.o(.text.IDD_Initialize_Device_IDs)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from hci_encryption_pka.o(.text.hci_le_encrypt)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from llc_connect_routines.o(.text.llc_conn_push_connection_complete_event)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from smp_sap_hci_cmn.o(.text.smp_connection_complete_handler)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from smp_dep_sdb.o(.text.smp_dep_sdb_copy_bonding_record_data_to_remdev)
 <LI><a href="#[34]">BLEPLAT_MemCpy</a> from bleplat.o(.text.BLEPLAT_MemCpy) referenced from smp_hndl_pairing_phase2.o(.text.smp_pp2_per_lep_confirm_value_compute)
 <LI><a href="#[35]">BLEPLAT_MemSet</a> from bleplat.o(.text.BLEPLAT_MemSet) referenced from hci_common.o(.text.HCI_Init)
 <LI><a href="#[22]">BLEStack_Process</a> from app_ble.o(.text.BLEStack_Process) referenced from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[78]">Controller_Process_Q_ucfg</a> from ble_stack_user_cfg.o(.text.Controller_Process_Q_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[15]">DMA_IRQHandler</a> from stm32wb0x_it.o(.text.DMA_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[63]">Events_Process_Q</a> from events.o(.text.Events_Process_Q) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[69]">GAP_ResumeAdvertising_ucfg</a> from gap_peripheral.o(.text.GAP_ResumeAdvertising_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[68]">GAP_name_disc_proc_connected_check_ucfg</a> from ble_stack_user_cfg.o(.text.GAP_name_disc_proc_connected_check_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[1]">GAT_att_clt_unexpect_rx</a> from gat_att_clt.o(.text.GAT_att_clt_unexpect_rx) referenced 2 times from gat_att_clt.o(.data.rcv_fn_p)
 <LI><a href="#[2c]">GAT_att_cmn_dscr_flag_check_is_not_set_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_check_is_not_set_f) referenced from gat_att_srv.o(.text.GAT_att_srv_confirmation_pending)
 <LI><a href="#[2c]">GAT_att_cmn_dscr_flag_check_is_not_set_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_check_is_not_set_f) referenced from gat_srv.o(.text.GAT_srv_tx_service_change)
 <LI><a href="#[31]">GAT_att_cmn_dscr_flag_clear_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_clear_f) referenced from gat_srv.o(.text.GAT_srv_tx_service_change)
 <LI><a href="#[2e]">GAT_att_cmn_dscr_flag_set_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_set_f) referenced from gat_srv.o(.text.GAT_srv_check_change_aware)
 <LI><a href="#[2e]">GAT_att_cmn_dscr_flag_set_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_set_f) referenced from gat_srv.o(.text.GAT_srv_db_hash_tsk)
 <LI><a href="#[2b]">GAT_att_cmn_handle_disconnec_iterate_f</a> from gat_att_cmn.o(.text.GAT_att_cmn_handle_disconnec_iterate_f) referenced from gat_att_cmn.o(.text.GAT_att_cmn_timer_expire_tsk)
 <LI><a href="#[2a]">GAT_att_cmn_timeout_cb</a> from gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb) referenced from gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb_wrapper)
 <LI><a href="#[29]">GAT_att_cmn_timeout_cb_wrapper</a> from gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb_wrapper) referenced from gat_att_cmn.o(.text.GAT_att_cmn_init)
 <LI><a href="#[6a]">GAT_att_cmn_timer_expire_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.GAT_att_cmn_timer_expire_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[6b]">GAT_att_cmn_tx_pool_evt_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.GAT_att_cmn_tx_pool_evt_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[82]">GAT_att_srv_confirm_exc</a> from gat_att_srv.o(.text.GAT_att_srv_confirm_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[79]">GAT_att_srv_exchange_mtu_exc</a> from gat_att_srv.o(.text.GAT_att_srv_exchange_mtu_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[81]">GAT_att_srv_exec_wr_exc</a> from gat_att_srv.o(.text.GAT_att_srv_exec_wr_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[7b]">GAT_att_srv_find_by_type_val_exc</a> from gat_att_srv.o(.text.GAT_att_srv_find_by_type_val_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[7a]">GAT_att_srv_find_info_exc</a> from gat_att_srv.o(.text.GAT_att_srv_find_info_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[80]">GAT_att_srv_prep_wr_exc</a> from gat_att_srv.o(.text.GAT_att_srv_prep_wr_exc) referenced from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[6c]">GAT_att_srv_process_rx_pckt_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.GAT_att_srv_process_rx_pckt_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[7c]">GAT_att_srv_read_by_type_exc</a> from gat_att_srv.o(.text.GAT_att_srv_read_by_type_exc) referenced 2 times from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[7d]">GAT_att_srv_read_exc</a> from gat_att_srv.o(.text.GAT_att_srv_read_exc) referenced 2 times from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[7e]">GAT_att_srv_read_multi_exc</a> from gat_att_srv.o(.text.GAT_att_srv_read_multi_exc) referenced 2 times from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[7f]">GAT_att_srv_write_exc</a> from gat_att_srv.o(.text.GAT_att_srv_write_exc) referenced 3 times from gat_att_srv.o(.rodata.exec_fn_table_a_full)
 <LI><a href="#[0]">GAT_clt_exec_empty</a> from gat_clt.o(.text.GAT_clt_exec_empty) referenced 2 times from gat_clt.o(.data.exec_fn_p)
 <LI><a href="#[6f]">GAT_clt_proc_exec_tsk</a> from gat_clt.o(.text.GAT_clt_proc_exec_tsk) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[2f]">GAT_srv_aes_cmac_append</a> from gat_srv.o(.text.GAT_srv_aes_cmac_append) referenced from gat_srv.o(.text.GAT_srv_db_hash_tsk)
 <LI><a href="#[6d]">GAT_srv_db_hash_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.GAT_srv_db_hash_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[6e]">GAT_srv_send_srv_change_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.GAT_srv_send_srv_change_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[30]">GAT_srv_tx_service_change</a> from gat_srv.o(.text.GAT_srv_tx_service_change) referenced from gat_srv.o(.text.GAT_srv_send_srv_change_tsk)
 <LI><a href="#[13]">GPIOA_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[14]">GPIOB_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[38]">HAL_Generate_Random_Bytes_To</a> from bluenrgx_rng.o(.text.HAL_Generate_Random_Bytes_To) referenced from device_id_data.o(.text.IDD_Initialize_Device_IDs)
 <LI><a href="#[37]">HW_PKA_WriteOperand</a> from hw_pka.o(.text.HW_PKA_WriteOperand) referenced from hw_pka.o(.text.HW_PKA_P256_StartPointCheck)
 <LI><a href="#[36]">HW_PKA_WriteSingleInput</a> from hw_pka.o(.text.HW_PKA_WriteSingleInput) referenced from hw_pka.o(.text.HW_PKA_P256_StartEccScalarMul)
 <LI><a href="#[48]">Hal_Get_Random_Number32</a> from bluenrgx_rng.o(.text.Hal_Get_Random_Number32) referenced 2 times from ll_cpf_encryption.o(.text.LL_encryption)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32wb0x_it.o(.text.HardFault_Handler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[b]">I2C1_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[75]">LLC_authenticated_payload_timeout_processing_ucfg</a> from ble_stack_user_cfg.o(.text.LLC_authenticated_payload_timeout_processing_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[44]">LLC_le_ping</a> from ll_cpf_le_ping.o(.text.LLC_le_ping) referenced from ll_cpe.o(.text.LL_cpe_init)
 <LI><a href="#[74]">LLC_offline_control_procedures_processing_ucfg</a> from ble_stack_user_cfg.o(.text.LLC_offline_control_procedures_processing_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[45]">LL_channel_map_update</a> from ll_cpf_channel_map_update.o(.text.LL_channel_map_update) referenced from ll_cpe.o(.text.LL_cpe_init_chmap_update)
 <LI><a href="#[41]">LL_cpe_register_cpf</a> from ll_cpe.o(.text.LL_cpe_register_cpf) referenced from ll_cpe.o(.text.LL_cpe_init)
 <LI><a href="#[77]">LL_cpf_cis_processing_ucfg</a> from ll_cpf_cis.o(.text.LL_cpf_cis_processing_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[46]">LL_cpf_conn_upd</a> from ll_cpf_connection_update.o(.text.LL_cpf_conn_upd) referenced from ll_cpe.o(.text.LL_cpe_init_conn_update)
 <LI><a href="#[40]">LL_encryption</a> from ll_cpf_encryption.o(.text.LL_encryption) referenced from ll_cpe.o(.text.LL_cpe_init)
 <LI><a href="#[42]">LL_feature_exchange</a> from ll_cpf_feature_exchange.o(.text.LL_feature_exchange) referenced from ll_cpe.o(.text.LL_cpe_init)
 <LI><a href="#[5d]">LL_sched_enable_taskslot</a> from ll_scheduler.o(.text.LL_sched_enable_taskslot) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[5c]">LL_sched_set_params</a> from ll_scheduler.o(.text.LL_sched_set_params) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[43]">LL_version_exchange</a> from ll_cpf_version_exchange.o(.text.LL_version_exchange) referenced from ll_cpe.o(.text.LL_cpe_init)
 <LI><a href="#[e]">LPUART1_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[4b]">MY_SVC_EventHandler</a> from my_svc.o(.text.MY_SVC_EventHandler) referenced from my_svc.o(.text.MY_SVC_Init)
 <LI><a href="#[3]">NMI_Handler</a> from stm32wb0x_it.o(.text.NMI_Handler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[25]">NVM_Process</a> from app_ble.o(.text.NVM_Process) referenced from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[12]">PKA_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[a]">PVD_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from stm32wb0x_it.o(.text.PendSV_Handler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[18]">RADIO_TIMER_CPU_WKUP_IRQHandler</a> from stm32wb0x_it.o(.text.RADIO_TIMER_CPU_WKUP_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[17]">RADIO_TIMER_ERROR_IRQHandler</a> from stm32wb0x_it.o(.text.RADIO_TIMER_ERROR_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[19]">RADIO_TIMER_TXRX_WKUP_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[16]">RADIO_TXRX_IRQHandler</a> from stm32wb0x_it.o(.text.RADIO_TXRX_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[1a]">RADIO_TXRX_SEQ_IRQHandler</a> from stm32wb0x_it.o(.text.RADIO_TXRX_SEQ_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[c]">SPI3_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from stm32wb0x_it.o(.text.SVC_Handler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from stm32wb0x_it.o(.text.SysTick_Handler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from system_stm32wb0x.o(.text.SystemInit) referenced from startup_stm32wb09.o(.text)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[f]">TIM2_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[1d]">TRNG_IRQHandler</a> from startup_stm32wb09.o(.text) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[33]">UART_DMAAbortOnError</a> from stm32wb0x_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32wb0x_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[d]">USART1_IRQHandler</a> from stm32wb0x_it.o(.text.USART1_IRQHandler) referenced from startup_stm32wb09.o(RESET)
 <LI><a href="#[23]">UTIL_SEQ_RegTask</a> from stm32_seq.o(.text.UTIL_SEQ_RegTask) referenced from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[24]">VTimer_Process</a> from app_ble.o(.text.VTimer_Process) referenced from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[52]">__2printf</a> from __2printf.o(.text) referenced from app_ble.o(.text.connection_complete_event)
 <LI><a href="#[1f]">__main</a> from __main.o(!!!main) referenced from startup_stm32wb09.o(.text)
 <LI><a href="#[32]">_calibration_callback</a> from stm32wb0x_hal_radio_timer.o(.text._calibration_callback) referenced from stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_Init)
 <LI><a href="#[20]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4c]">aci_att_srv_prepare_write_req_event_cb</a> from events_gatt.o(.text.aci_att_srv_prepare_write_req_event_cb) referenced from events_gatt.o(.text.aci_att_srv_prepare_write_req_event_push_noinline)
 <LI><a href="#[4d]">aci_gatt_clt_indication_event_cb</a> from events_gatt.o(.text.aci_gatt_clt_indication_event_cb) referenced from events_gatt.o(.text.aci_gatt_clt_indication_event_push_noinline)
 <LI><a href="#[4e]">aci_gatt_clt_multi_notification_int_event_cb</a> from events_gatt.o(.text.aci_gatt_clt_multi_notification_int_event_cb) referenced from events_gatt.o(.text.aci_gatt_clt_multi_notification_int_event_push_noinline)
 <LI><a href="#[4f]">aci_gatt_clt_notification_event_cb</a> from events_gatt.o(.text.aci_gatt_clt_notification_event_cb) referenced from events_gatt.o(.text.aci_gatt_clt_notification_event_push_noinline)
 <LI><a href="#[50]">aci_gatt_srv_write_event_cb</a> from events_gatt.o(.text.aci_gatt_srv_write_event_cb) referenced from events_gatt.o(.text.aci_gatt_srv_write_event_push_noinline)
 <LI><a href="#[3a]">aci_l2cap_proc_timeout_event_cb</a> from events_l2cap.o(.text.aci_l2cap_proc_timeout_event_cb) referenced from l2c_main.o(.text.L2C_timeout_handler_signalling)
 <LI><a href="#[47]">char_copy</a> from stacklib_utils.o(.text.char_copy) referenced 2 times from ll_cpf_encryption.o(.text.LL_encryption)
 <LI><a href="#[60]">copy_swap_buffer</a> from stacklib_utils.o(.text.copy_swap_buffer) referenced from smp_crypto_toolbox.o(.text.smp_crt_g2_generate_num_comp_val)
 <LI><a href="#[27]">csmem_mem_0_assign</a> from mem_alloc.o(.text.csmem_mem_0_assign) referenced from events.o(.text.Events_Process_init)
 <LI><a href="#[27]">csmem_mem_0_assign</a> from mem_alloc.o(.text.csmem_mem_0_assign) referenced from ll_routines.o(.text.LL_init_ucfg_weak)
 <LI><a href="#[27]">csmem_mem_0_assign</a> from mem_alloc.o(.text.csmem_mem_0_assign) referenced from llc_connect_mem_alloc.o(.text.llc_conn_mem_allocate)
 <LI><a href="#[27]">csmem_mem_0_assign</a> from mem_alloc.o(.text.csmem_mem_0_assign) referenced from smp_main.o(.text.smp_init)
 <LI><a href="#[4a]">csmem_mem_assign</a> from mem_alloc.o(.text.csmem_mem_assign) referenced from mbm.o(.text.MBM_init)
 <LI><a href="#[21]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[53]">gap_timers_callback</a> from gap_common.o(.text.gap_timers_callback) referenced from gap_common.o(.text.gap_timers_callback_wrapper)
 <LI><a href="#[28]">gap_timers_callback_wrapper</a> from gap_common.o(.text.gap_timers_callback_wrapper) referenced from gap_common.o(.text.GAP_init_context)
 <LI><a href="#[84]">hci_acl_data_ind_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_acl_data_ind_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[83]">hci_acl_data_tx_cmpl_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_acl_data_tx_cmpl_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[88]">hci_disconnection_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_disconnection_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[89]">hci_encryption_change_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_encryption_change_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[8a]">hci_encryption_key_refresh_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_encryption_key_refresh_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[8c]">hci_le_advertising_report_event_int_cb_ucfg</a> from events.o(.text.hci_le_advertising_report_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[94]">hci_le_advertising_set_terminated_event_int_cb_ucfg</a> from events.o(.text.hci_le_advertising_set_terminated_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[8b]">hci_le_connection_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_le_connection_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[91]">hci_le_directed_advertising_report_event_int_cb_ucfg</a> from events.o(.text.hci_le_directed_advertising_report_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[90]">hci_le_enhanced_connection_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_le_enhanced_connection_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[95]">hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg</a> from events.o(.text.hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[92]">hci_le_extended_advertising_report_event_int_cb_ucfg</a> from events.o(.text.hci_le_extended_advertising_report_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[54]">hci_le_generate_dhkey_cb</a> from hci_encryption_pka.o(.text.hci_le_generate_dhkey_cb) referenced from hci_encryption_pka.o(.text.hci_le_generate_dhkey_api)
 <LI><a href="#[8f]">hci_le_generate_dhkey_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_le_generate_dhkey_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[8d]">hci_le_long_term_key_request_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_le_long_term_key_request_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[55]">hci_le_read_local_p256_public_key_cb</a> from hci_encryption_pka.o(.text.hci_le_read_local_p256_public_key_cb) referenced from hci_encryption_pka.o(.text.hci_le_read_local_p256_public_key_api)
 <LI><a href="#[8e]">hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg</a> from ble_stack_user_cfg.o(.text.hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[93]">hci_le_scan_timeout_event_int_cb_ucfg</a> from events.o(.text.hci_le_scan_timeout_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[56]">hci_number_of_completed_packets_event_cb</a> from events_hci.o(.text.hci_number_of_completed_packets_event_cb) referenced from events_hci.o(.text.hci_number_of_completed_packets_event_push_noinline)
 <LI><a href="#[85]">iso_rx_bn_pdu_event_int_cb_ucfg</a> from llc_isoal_rx.o(.text.iso_rx_bn_pdu_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[87]">iso_terminate_event_int_cb_ucfg</a> from llc_isoal_sap.o(.text.iso_terminate_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[86]">iso_tx_bn_pdu_event_int_cb_ucfg</a> from llc_isoal_tx.o(.text.iso_tx_bn_pdu_event_int_cb_ucfg_weak) referenced from events_int.o(.rodata.int_evnt_callback_pfunc)
 <LI><a href="#[64]">l2c_cos_process_pending_actions_tsk_ucfg</a> from l2c_cos_cmn.o(.text.l2c_cos_process_pending_actions_tsk_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[65]">l2c_cos_sdu_reassembly_tsk_ucfg</a> from l2c_cos_hndl_sdu_rx_reassembly.o(.text.l2c_cos_sdu_reassembly_tsk_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[67]">l2c_cos_sdu_segmentation_tsk_ucfg</a> from l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_sdu_segmentation_tsk_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[66]">l2c_cos_transmit_pdu_packets_tsk_ucfg</a> from l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_transmit_pdu_packets_tsk_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[57]">l2cap_timers_callback</a> from l2c_main.o(.text.l2cap_timers_callback) referenced from l2c_main.o(.text.l2cap_timers_callback_wrapper)
 <LI><a href="#[39]">l2cap_timers_callback_wrapper</a> from l2c_main.o(.text.l2cap_timers_callback_wrapper) referenced from l2c_main.o(.text.L2C_init)
 <LI><a href="#[58]">llc_conn_cancel_slot</a> from llc_connect_callback.o(.text.llc_conn_cancel_slot) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[59]">llc_conn_isr</a> from llc_connect_isr.o(.text.llc_conn_isr) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[76]">llc_conn_peripheral_latency_cancellation_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.llc_conn_peripheral_latency_cancellation_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[5a]">llc_conn_program_slot</a> from llc_connect_callback.o(.text.llc_conn_program_slot) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[5b]">llc_conn_skip_slot</a> from llc_connect_callback.o(.text.llc_conn_skip_slot) referenced from llc_connect_sap.o(.text.llc_conn_go_to_connect)
 <LI><a href="#[3b]">llc_padv_periodic_adv_sync_csr_ucfg</a> from llc_padv_sap.o(.text.llc_padv_periodic_adv_sync_csr_ucfg_weak) referenced from ll_cpf_feature_exchange.o(.text.LL_Get_Supported_Features)
 <LI><a href="#[73]">llc_priv_offline_rpa_resolution_ucfg</a> from llc_privacy_sap.o(.text.llc_priv_offline_rpa_resolution_ucfg_weak) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[26]">llc_pscan_isr_ucfg</a> from llc_pscan_isr.o(.text.llc_pscan_isr_ucfg_weak) referenced from ll_isr.o(.text.BLE_STACK_RadioHandler)
 <LI><a href="#[5e]">llc_timers_callback</a> from ll_routines.o(.text.llc_timers_callback) referenced from ll_routines.o(.text.llc_timers_callback_wrapper)
 <LI><a href="#[49]">llc_timers_callback_wrapper</a> from ll_routines.o(.text.llc_timers_callback_wrapper) referenced from ll_routines.o(.text.LL_init)
 <LI><a href="#[71]">smp_fsm_process_actions_wrt_state_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.smp_fsm_process_actions_wrt_state_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[70]">smp_pka_process_ecc_computation_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.smp_pka_process_ecc_computation_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[72]">smp_rxp_process_rxed_packets_tsk_ucfg</a> from ble_stack_user_cfg.o(.text.smp_rxp_process_rxed_packets_tsk_ucfg) referenced from stacklib_tasks.o(.rodata.TSK_pfunc)
 <LI><a href="#[62]">smp_timers_cb</a> from smp_hndl_timers.o(.text.smp_timers_cb) referenced from smp_hndl_timers.o(.text.smp_timers_cb_wrapper)
 <LI><a href="#[61]">smp_timers_cb_wrapper</a> from smp_hndl_timers.o(.text.smp_timers_cb_wrapper) referenced from smp_hndl_timers.o(.text.smp_timer_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[50e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50f]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[510]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[511]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[99]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[512]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[513]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[514]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[515]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[516]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[517]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[518]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[519]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[51b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[51c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[51e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[51f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[520]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[521]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[522]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[523]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[524]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[525]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[526]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[527]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[528]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[529]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[52a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[52b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[52c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[52d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[52e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[52f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[530]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_APPE_Init &rArr; APP_BLE_Init &rArr; BLE_Init &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[531]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ed]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ab]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[532]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[533]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RADIO_TIMER_TXRX_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb09.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wb09.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[534]"></a>CPUcontextSave</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cpu_context_switch.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>CPUcontextRestore</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpu_context_switch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[af]"></a>blue_unit_conversion</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, blue_unit_conversion.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul32
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetAnchorPoint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_MachineTimeToSysTime
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_system_time_and_machine
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_configureTxRxDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
</UL>

<P><STRONG><a name="[168]"></a>Osal_MemCpy</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, osal_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>

<P><STRONG><a name="[3d4]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[535]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_configureTxRxDelay
</UL>

<P><STRONG><a name="[536]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.connection_complete_event)
</UL>
<P><STRONG><a name="[cc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[cd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[9b]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b4]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9d]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b5]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[b6]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[b7]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ba]"></a>putchar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, putchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putchar &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[bb]"></a>puts</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[167]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
</UL>

<P><STRONG><a name="[537]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>

<P><STRONG><a name="[538]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[bf]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketInitTo0
</UL>

<P><STRONG><a name="[539]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmInitTo0
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_api
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f5_generate_keys
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[53a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_guard_time_for_close_conn_event
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
</UL>

<P><STRONG><a name="[53b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>__adddf3</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[c4]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[541]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>__subdf3</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[543]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[544]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[545]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[546]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[547]"></a>__muldf3</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[b1]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b2]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cf]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d0]"></a>__flsbuf</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[50d]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[549]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_initio</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[a3]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[dd]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[e0]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[eb]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[e7]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[54a]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[e6]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[54b]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[a5]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d5]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[dc]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[da]"></a>setvbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[d2]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[d6]"></a>_writebuf</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[e8]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[d1]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[d8]"></a>freopen</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[ea]"></a>fopen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[db]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[54c]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d9]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[de]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[df]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[54d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[54e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[551]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[552]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f2]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9f]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f4]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[556]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[557]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[ee]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[e1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[f0]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[ae]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[f1]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[558]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[559]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[f3]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f8]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[55a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[55c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>ACL_list_get_pckt_count</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_get_pckt_count))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>

<P><STRONG><a name="[244]"></a>ACL_list_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4f5]"></a>ACL_list_insert_head</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[253]"></a>ACL_list_insert_tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
</UL>

<P><STRONG><a name="[241]"></a>ACL_list_remove</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_flush_packet_queues
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[24a]"></a>ACL_list_remove_head</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, acl_list.o(.text.ACL_list_remove_head))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[fa]"></a>ACL_pkt_cmp</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_cmp &rArr; Mem_Buff_cmp &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
</UL>

<P><STRONG><a name="[fc]"></a>ACL_pkt_connection</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_connection &rArr; MBM_reserve &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[fe]"></a>ACL_pkt_disconnection</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_disconnection))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_unreserve
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[2e8]"></a>ACL_pkt_extract_pdu</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_extract_pdu))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[100]"></a>ACL_pkt_get</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_get))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_get
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_pckt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_send
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_send
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_short_pdu
</UL>

<P><STRONG><a name="[102]"></a>ACL_pkt_get_available_mem_buffers</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_get_available_mem_buffers))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_get_available_mem_buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
</UL>

<P><STRONG><a name="[104]"></a>ACL_pkt_init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_init &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_init_ucfg
</UL>

<P><STRONG><a name="[105]"></a>ACL_pkt_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.ACL_pkt_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_init_ucfg &rArr; ACL_pkt_init &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[106]"></a>ACL_pkt_read</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_copy
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_copy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_copy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_receive
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_params_check
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_copy_to_pairing_data
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
</UL>

<P><STRONG><a name="[51]"></a>ACL_pkt_read_16b</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_read_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_copy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events.o(.text.aci_l2cap_connection_update_req_event_copy)
</UL>
<P><STRONG><a name="[10c]"></a>ACL_pkt_release</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_release))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_release_unexpected_acl_packet
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_cb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_flush_packet_queues
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[10e]"></a>ACL_pkt_resize</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_resize))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[2d]"></a>ACL_pkt_write</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_write &rArr; Mem_Buff_write &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_send
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_send
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.text.GAT_att_srv_hvtx)
</UL>
<P><STRONG><a name="[111]"></a>ACL_pkt_write_16b</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_packet.o(.text.ACL_pkt_write_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ACL_pkt_write_16b &rArr; ACL_pkt_write &rArr; Mem_Buff_write &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
</UL>

<P><STRONG><a name="[3d]"></a>ADV_ISR</STRONG> (Thumb, 544 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ADV_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ADV_ISR &rArr; ADV_ISR_connect_request_received_ucfg &rArr; ADV_ISR_connect_request_received &rArr; LL_eadv_switchbackupdata_data_struc &rArr; aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxMode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRemapChan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SetRcvLen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetPllTrig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrPllTrig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxDone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusRxOk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobEnableBlue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetRadioCloseTimeout
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received_ucfg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_check_sreq_or_creq_tx_addr_ucfg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_priority
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_rx_common_buffer_p
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_search_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
</UL>
<P><STRONG><a name="[125]"></a>ADV_ISR_connect_request_received</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ADV_ISR_connect_request_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ADV_ISR_connect_request_received &rArr; LL_eadv_switchbackupdata_data_struc &rArr; aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrPllTrig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_stop_privacy_timer_ucfg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchbackupdata_data_struc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received_ucfg
</UL>

<P><STRONG><a name="[11d]"></a>ADV_ISR_connect_request_received_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.ADV_ISR_connect_request_received_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ADV_ISR_connect_request_received_ucfg &rArr; ADV_ISR_connect_request_received &rArr; LL_eadv_switchbackupdata_data_struc &rArr; aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[3c]"></a>ADV_cancelslot</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ADV_cancelslot))
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
</UL>
<P><STRONG><a name="[3e]"></a>ADV_createslot</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ADV_createslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ADV_createslot &rArr; BLEPLAT_CNTR_SmSetTxPhy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPhy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxPhy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobEnableBlue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_convert_hci_phy_enum_to_hw_phy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_tx_common_buffer_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
</UL>
<P><STRONG><a name="[3f]"></a>ADV_skiproutine</STRONG> (Thumb, 396 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ADV_skiproutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ADV_skiproutine &rArr; LL_eadv_switchbackupdata_data_struc &rArr; aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxMode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRemapChan
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_stop_privacy_timer_ucfg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_anchor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchbackupdata_data_struc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_return_actual_scheduler_margin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_check_legacy_ext_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable)
</UL>
<P><STRONG><a name="[136]"></a>AES_128_HW_enc</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, cryptolib_hw_aes.o(.text.AES_128_HW_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>

<P><STRONG><a name="[5f]"></a>AES_CMAC_Encrypt</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, aes128cmac.o(.text.AES_CMAC_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptFinish
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptAppend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f6_generate_check_val
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_g2_generate_num_comp_val
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f4_generate_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_crypto_toolbox.o(.text.smp_crt_f5_generate_keys)
</UL>
<P><STRONG><a name="[13b]"></a>APP_BLE_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_ble.o(.text.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Init &rArr; BLE_Init &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_APP_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process_Schedule
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[188]"></a>APP_DEBUG_SIGNAL_RESET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_debug.o(.text.APP_DEBUG_SIGNAL_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process
</UL>

<P><STRONG><a name="[185]"></a>APP_DEBUG_SIGNAL_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_debug.o(.text.APP_DEBUG_SIGNAL_SET))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process
</UL>

<P><STRONG><a name="[385]"></a>Acl_Init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, acl.o(.text.Acl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[140]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, acl.o(.text.Acl_Rcv_Pkt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Acl_Rcv_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[143]"></a>Acl_Transmit_Data</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, acl.o(.text.Acl_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>

<P><STRONG><a name="[145]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, acl.o(.text.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Acl_Tx_Cmpl_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[146]"></a>BLEEVT_App_Notification</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, app_ble.o(.text.BLEEVT_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_passkey_resp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_APP_EvtRx
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cmd_resp_release
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>

<P><STRONG><a name="[3bf]"></a>BLEEVT_RegisterGattEvtHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_evt.o(.text.BLEEVT_RegisterGattEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEEVT_RegisterGattEvtHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
</UL>

<P><STRONG><a name="[151]"></a>BLENVM_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, blenvm.o(.text.BLENVM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLENVM_Init &rArr; NVMDB_Init &rArr; NVMDB_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[139]"></a>BLEPLAT_AesCMACEncryptAppend</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_AesCMACEncryptAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BLEPLAT_AesCMACEncryptAppend &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[13a]"></a>BLEPLAT_AesCMACEncryptFinish</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_AesCMACEncryptFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[138]"></a>BLEPLAT_AesCMACEncryptInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_AesCMACEncryptInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BLEPLAT_AesCMACEncryptInit &rArr; AES_CMAC_Encrypt_Init &rArr; AESstdInitEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[157]"></a>BLEPLAT_AesEcbEncrypt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_AesEcbEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>

<P><STRONG><a name="[3d9]"></a>BLEPLAT_CNTR_ClearInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_ClearInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[3a0]"></a>BLEPLAT_CNTR_ClearSemareq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_ClearSemareq))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[44b]"></a>BLEPLAT_CNTR_DemodDelaySt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_DemodDelaySt))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_update_receive_window
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[318]"></a>BLEPLAT_CNTR_GetTimer2TimeoutForIfs</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_GetTimer2TimeoutForIfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_GetTimer2TimeoutForIfs
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[3a4]"></a>BLEPLAT_CNTR_GlobDisableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_GlobDisableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[123]"></a>BLEPLAT_CNTR_GlobEnableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_GlobEnableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[3a2]"></a>BLEPLAT_CNTR_GlobWriteSlot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_GlobWriteSlot))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[1ab]"></a>BLEPLAT_CNTR_IntGetIntStatusAnyHwError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusAnyHwError))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[1a7]"></a>BLEPLAT_CNTR_IntGetIntStatusBitAct2Error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusBitAct2Error))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[1a8]"></a>BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[460]"></a>BLEPLAT_CNTR_IntGetIntStatusCrcErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusCrcErr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[1a5]"></a>BLEPLAT_CNTR_IntGetIntStatusDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusDone))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[464]"></a>BLEPLAT_CNTR_IntGetIntStatusEncErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusEncErr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[45d]"></a>BLEPLAT_CNTR_IntGetIntStatusLenErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusLenErr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[1a6]"></a>BLEPLAT_CNTR_IntGetIntStatusNoactiveError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusNoactiveError))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[114]"></a>BLEPLAT_CNTR_IntGetIntStatusRxOk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusRxOk))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[45c]"></a>BLEPLAT_CNTR_IntGetIntStatusTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[115]"></a>BLEPLAT_CNTR_IntGetIntStatusTxDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[1a9]"></a>BLEPLAT_CNTR_IntGetIntStatusTxError1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTxError1))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[1aa]"></a>BLEPLAT_CNTR_IntGetIntStatusTxError3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTxError3))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[45e]"></a>BLEPLAT_CNTR_IntGetIntStatusTxOk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTxOk))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[1a4]"></a>BLEPLAT_CNTR_IntGetIntStatusTxRxSkip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_IntGetIntStatusTxRxSkip))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[46f]"></a>BLEPLAT_CNTR_PacketClrCteSamplingEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketClrCteSamplingEn))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[36c]"></a>BLEPLAT_CNTR_PacketClrIncChan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketClrIncChan))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[119]"></a>BLEPLAT_CNTR_PacketClrPllTrig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketClrPllTrig))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[441]"></a>BLEPLAT_CNTR_PacketGetDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketGetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_enhanced_get_latency
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[158]"></a>BLEPLAT_CNTR_PacketInitTo0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketInitTo0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_PacketInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[365]"></a>BLEPLAT_CNTR_PacketSetAdvPduFormat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetAdvPduFormat))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[482]"></a>BLEPLAT_CNTR_PacketSetCrcinitSel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetCrcinitSel))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[472]"></a>BLEPLAT_CNTR_PacketSetCteSamplingEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetCteSamplingEn))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[368]"></a>BLEPLAT_CNTR_PacketSetDataPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[484]"></a>BLEPLAT_CNTR_PacketSetIncChan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIncChan))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[487]"></a>BLEPLAT_CNTR_PacketSetIntCrcErr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIntCrcErr))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[36d]"></a>BLEPLAT_CNTR_PacketSetIntDone</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIntDone))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[36f]"></a>BLEPLAT_CNTR_PacketSetIntRcvOk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIntRcvOk))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[486]"></a>BLEPLAT_CNTR_PacketSetIntTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIntTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[485]"></a>BLEPLAT_CNTR_PacketSetIntTxOk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetIntTxOk))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[366]"></a>BLEPLAT_CNTR_PacketSetKeepsemareq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetKeepsemareq))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[367]"></a>BLEPLAT_CNTR_PacketSetNextPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetNextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[374]"></a>BLEPLAT_CNTR_PacketSetNextRxMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetNextRxMode))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[371]"></a>BLEPLAT_CNTR_PacketSetNextSlot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetNextSlot))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[36b]"></a>BLEPLAT_CNTR_PacketSetNextTxMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetNextTxMode))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[483]"></a>BLEPLAT_CNTR_PacketSetNsEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetNsEn))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[120]"></a>BLEPLAT_CNTR_PacketSetPllTrig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetPllTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[370]"></a>BLEPLAT_CNTR_PacketSetRxReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetRxReady))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[369]"></a>BLEPLAT_CNTR_PacketSetTimeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[36a]"></a>BLEPLAT_CNTR_PacketSetTimer2Active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetTimer2Active))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[373]"></a>BLEPLAT_CNTR_PacketSetTimerTrigDone</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetTimerTrigDone))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[36e]"></a>BLEPLAT_CNTR_PacketSetTimerTrigRcv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetTimerTrigRcv))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
</UL>

<P><STRONG><a name="[372]"></a>BLEPLAT_CNTR_PacketSetTxReady</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_PacketSetTxReady))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[122]"></a>BLEPLAT_CNTR_SetRcvLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SetRcvLen))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[455]"></a>BLEPLAT_CNTR_SmCteOff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmCteOff))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[461]"></a>BLEPLAT_CNTR_SmEncOff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmEncOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmEncOff
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[462]"></a>BLEPLAT_CNTR_SmEncOn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmEncOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmEncOn
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[47c]"></a>BLEPLAT_CNTR_SmGetAccessAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[48e]"></a>BLEPLAT_CNTR_SmGetChannelMap</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetChannelMap))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel_for_task
</UL>

<P><STRONG><a name="[46a]"></a>BLEPLAT_CNTR_SmGetEncIvPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetEncIvPtr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[469]"></a>BLEPLAT_CNTR_SmGetEncKeyPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetEncKeyPtr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[47d]"></a>BLEPLAT_CNTR_SmGetHopIncr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetHopIncr))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[468]"></a>BLEPLAT_CNTR_SmGetMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetMode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[45f]"></a>BLEPLAT_CNTR_SmGetRemapChan</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetRemapChan))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[43f]"></a>BLEPLAT_CNTR_SmGetRxCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_decrement_enc_count_rx
</UL>

<P><STRONG><a name="[458]"></a>BLEPLAT_CNTR_SmGetRxPhy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetRxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_guard_time_for_close_conn_event
</UL>

<P><STRONG><a name="[42f]"></a>BLEPLAT_CNTR_SmGetTxPhy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetTxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_guard_time_for_close_conn_event
</UL>

<P><STRONG><a name="[453]"></a>BLEPLAT_CNTR_SmGetTxPwr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmGetTxPwr))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[159]"></a>BLEPLAT_CNTR_SmInitTo0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmInitTo0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_CNTR_SmInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[35f]"></a>BLEPLAT_CNTR_SmSetAccessAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[430]"></a>BLEPLAT_CNTR_SmSetChannelMap</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetChannelMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_CNTR_SmSetChannelMap
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[360]"></a>BLEPLAT_CNTR_SmSetCrcInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetCrcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetCrcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[316]"></a>BLEPLAT_CNTR_SmSetDataLength</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[364]"></a>BLEPLAT_CNTR_SmSetHopIncr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetHopIncr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetHopIncr
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[11f]"></a>BLEPLAT_CNTR_SmSetRemapChan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRemapChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetRemapChan
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[440]"></a>BLEPLAT_CNTR_SmSetRxCount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_decrement_enc_count_rx
</UL>

<P><STRONG><a name="[463]"></a>BLEPLAT_CNTR_SmSetRxCountDirectionBit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRxCountDirectionBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_CNTR_SmSetRxCountDirectionBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[363]"></a>BLEPLAT_CNTR_SmSetRxMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRxMode))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[362]"></a>BLEPLAT_CNTR_SmSetRxPacketPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRxPacketPtr))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[12b]"></a>BLEPLAT_CNTR_SmSetRxPhy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetRxPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetRxPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[473]"></a>BLEPLAT_CNTR_SmSetTxCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[474]"></a>BLEPLAT_CNTR_SmSetTxCountDirectionBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxCountDirectionBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetTxCountDirectionBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[11b]"></a>BLEPLAT_CNTR_SmSetTxMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxMode))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[361]"></a>BLEPLAT_CNTR_SmSetTxPacketPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxPacketPtr))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[12a]"></a>BLEPLAT_CNTR_SmSetTxPhy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetTxPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[301]"></a>BLEPLAT_CNTR_SmSetTxPwr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetTxPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetTxPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[454]"></a>BLEPLAT_CNTR_SmSetUnmappedChan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmSetUnmappedChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CNTR_SmSetUnmappedChan
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[46d]"></a>BLEPLAT_CNTR_SmToggleNesn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bleplat_cntr.o(.text.BLEPLAT_CNTR_SmToggleNesn))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[15a]"></a>BLEPLAT_CalculateRSSI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_CalculateRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_CalculateRSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_ReadRSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[117]"></a>BLEPLAT_ClearRadioTimerValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_ClearRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLEPLAT_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_ClearRadioTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[15d]"></a>BLEPLAT_GetAnchorPoint</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_GetAnchorPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLEPLAT_GetAnchorPoint &rArr; HAL_RADIO_TIMER_GetAnchorPoint &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetAnchorPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[12e]"></a>BLEPLAT_GetCurrentSysTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLEPLAT_GetCurrentSysTime &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation_tsk
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[160]"></a>BLEPLAT_GetDefaultPALevel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_GetDefaultPALevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_GetDefaultPALevel
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetDefaultPALevel
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[162]"></a>BLEPLAT_GetMaxPALevel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_GetMaxPALevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_GetMaxPALevel
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetMaxPALevel
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>

<P><STRONG><a name="[164]"></a>BLEPLAT_GetPartInfo</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, bleplat.o(.text.BLEPLAT_GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BLEPLAT_GetPartInfo &rArr; GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[166]"></a>BLEPLAT_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_receive
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_is_peer_rejectlisted
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record_matching
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_resolve_rpa
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_add_security_record
</UL>

<P><STRONG><a name="[34]"></a>BLEPLAT_MemCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_set_authentication_req
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_api
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_rpa
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_rpa
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_copy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_reserve
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_init_acceptable_per
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_force_local_p256_debug_key_api
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_cb
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push_noinline
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_remote_address_check_addr_type
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_notify
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_set_local_public_key
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_set_addresses
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_s1_generate_stk
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_features_complete_event_push_noinline
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_channel_map_copy_to_cpf_context_ucfg
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_read_address
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_add_bonding_record
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_calculate_hash
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>
<BR>[Address Reference Count : 7]<UL><LI> hci_encryption_pka.o(.text.hci_le_encrypt)
<LI> aci_hal.o(.text.HAL_Write_ConfigData)
<LI> llc_connect_routines.o(.text.llc_conn_push_connection_complete_event)
<LI> smp_hndl_pairing_phase2.o(.text.smp_pp2_per_lep_confirm_value_compute)
<LI> device_id_data.o(.text.IDD_Initialize_Device_IDs)
<LI> smp_dep_sdb.o(.text.smp_dep_sdb_copy_bonding_record_data_to_remdev)
<LI> smp_sap_hci_cmn.o(.text.smp_connection_complete_handler)
</UL>
<P><STRONG><a name="[35]"></a>BLEPLAT_MemSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_default_le_event_mask
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_update_remapping_table
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cb
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_channel_descriptor_reset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_connection_complete_handler
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_protocol_timeout_cb
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_clear_remote_data_entry
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_add_bonding_record
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_calculate_hash
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_common.o(.text.HCI_Init)
</UL>
<P><STRONG><a name="[169]"></a>BLEPLAT_NvmAdd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, blenvm.o(.text.BLEPLAT_NvmAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_dev_id_data_add_record
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_update_record
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_add_record
</UL>

<P><STRONG><a name="[16b]"></a>BLEPLAT_NvmCompare</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blenvm.o(.text.BLEPLAT_NvmCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLEPLAT_NvmCompare &rArr; NVMDB_CompareCurrentRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
</UL>

<P><STRONG><a name="[16d]"></a>BLEPLAT_NvmDiscard</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blenvm.o(.text.BLEPLAT_NvmDiscard))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300<LI>Call Chain = BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_discard_current_record
</UL>

<P><STRONG><a name="[170]"></a>BLEPLAT_NvmGet</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, blenvm.o(.text.BLEPLAT_NvmGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadCurrentRecord
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadNextRecord
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_dev_id_data_get_record
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_next_record
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_full_current_record
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_next_record
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_get_record_count
</UL>

<P><STRONG><a name="[173]"></a>BLEPLAT_PkaStartDHkey</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_PkaStartDHkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLEPLAT_PkaStartDHkey &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_api
</UL>

<P><STRONG><a name="[175]"></a>BLEPLAT_PkaStartP256Key</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_PkaStartP256Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_StartP256PublicKeyGeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_api
</UL>

<P><STRONG><a name="[177]"></a>BLEPLAT_RngGetRandom16</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_RngGetRandom16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_RngGetRandom16
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_GetRandom16
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>

<P><STRONG><a name="[179]"></a>BLEPLAT_RngGetRandom32</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_RngGetRandom32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_RngGetRandom32
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_GetRandom32
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_api
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
</UL>

<P><STRONG><a name="[17b]"></a>BLEPLAT_SetHighPower</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_SetHighPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetHighPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[121]"></a>BLEPLAT_SetRadioCloseTimeout</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_SetRadioCloseTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_SetRadioCloseTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_SetRadioCloseTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[17e]"></a>BLEPLAT_SetRadioTimerValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_SetRadioTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[180]"></a>BLEPLAT_StartTimer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StartVirtualTimerSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[182]"></a>BLEPLAT_StopTimer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BLEPLAT_StopTimer &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StopVirtualTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>

<P><STRONG><a name="[184]"></a>BLEPLAT_aes128_encrypt</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrgx_aes.o(.text.BLEPLAT_aes128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>

<P><STRONG><a name="[13e]"></a>BLEStack_Process_Schedule</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.BLEStack_Process_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEStack_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CpuWakeUpCallback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process
</UL>

<P><STRONG><a name="[13d]"></a>BLE_Init</STRONG> (Thumb, 364 bytes, Stack size 112 bytes, app_ble.o(.text.BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = BLE_Init &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_profile_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_appearance
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[1ad]"></a>BLE_STACK_EndOfRadioActivityCb</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_isr.o(.text.BLE_STACK_EndOfRadioActivityCb))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[195]"></a>BLE_STACK_Event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_evt.o(.text.BLE_STACK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_aci_event_notify_cb
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_data_notify_cb
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_notify_cb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event_cb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_cb_check
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_notify
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[18a]"></a>BLE_STACK_Init</STRONG> (Thumb, 1228 bytes, Stack size unknown bytes, bluenrg_main_func.o(.text.BLE_STACK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_Init &rArr; _BlueNRG_Stack_Initialization &rArr; BLEPLAT_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_supp_csr_ucfg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chc_csr_ucfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_wr_csr_ucfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_csr_ucfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_controller_privacy_csr_ucfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[1a3]"></a>BLE_STACK_RadioHandler</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, ll_isr.o(.text.BLE_STACK_RadioHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxError3
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxError1
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxRxSkip
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusNoactiveError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusDone
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusBitAct2Error
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusAnyHwError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetAnchorPoint
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_EndOfRadioActivityCb
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxCallback
</UL>

<P><STRONG><a name="[187]"></a>BLE_STACK_SleepCheck</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, bluenrg_main_func.o(.text.BLE_STACK_SleepCheck))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_no_idle_check
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process
</UL>

<P><STRONG><a name="[186]"></a>BLE_STACK_Tick</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_main_func.o(.text.BLE_STACK_Tick))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process
</UL>

<P><STRONG><a name="[1f2]"></a>CST_init</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, stacklib_timers.o(.text.CST_init))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_init
</UL>

<P><STRONG><a name="[1b0]"></a>CST_start</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, stacklib_timers.o(.text.CST_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_start_privacy_timer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
</UL>

<P><STRONG><a name="[1b1]"></a>CST_stop</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, stacklib_timers.o(.text.CST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_discoverability
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_privacy_timer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_reset
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_pre_process_incoming_response_packet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
</UL>

<P><STRONG><a name="[1ba]"></a>Controller_Process_Q</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, hci_common.o(.text.Controller_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Controller_Process_Q &rArr; LL_cpe_engine &rArr; Acl_Tx_Cmpl_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q_ucfg
</UL>

<P><STRONG><a name="[78]"></a>Controller_Process_Q_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.Controller_Process_Q_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Controller_Process_Q_ucfg &rArr; Controller_Process_Q &rArr; LL_cpe_engine &rArr; Acl_Tx_Cmpl_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[15]"></a>DMA_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[2fb]"></a>Data_Len_Update_Offline_Processing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(.text.Data_Len_Update_Offline_Processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[55e]"></a>Data_Len_Update_Offline_Processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(.text.Data_Len_Update_Offline_Processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[1bd]"></a>EADV_init</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.EADV_init))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[1bf]"></a>EADV_start_request_radio_tasks</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.EADV_start_request_radio_tasks))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_release_taskslot
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_reserve_taskslot
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_release_conn_idx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_reserve_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks_ucfg
</UL>

<P><STRONG><a name="[1c4]"></a>EADV_start_request_radio_tasks_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.EADV_start_request_radio_tasks_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EADV_start_request_radio_tasks_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[12d]"></a>EADV_vPrepareAdvOrRspLegacyPacket</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.EADV_vPrepareAdvOrRspLegacyPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EADV_vPrepareAdvOrRspLegacyPacket &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_channel_sel_algo2_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[18b]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_PKA_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[63]"></a>Events_Process_Q</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, events.o(.text.Events_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Events_Process_Q &rArr; hci_hardware_error_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event_cb
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_notify_cb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_cb_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[1cd]"></a>Events_Process_init</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, events.o(.text.Events_Process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Events_Process_init &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[1cf]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wb0x_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[3ff]"></a>GAP_DiscProcTimeoutcb_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_DiscProcTimeoutcb_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[55f]"></a>GAP_DiscProcTimeoutcb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_DiscProcTimeoutcb_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d1]"></a>GAP_Init</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_event_mask
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_default_le_event_mask
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_event_mask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_advertising_sets_ucfg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_controller_privacy_ucfg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_reset_privacy_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[1da]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_LimDiscTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb &rArr; GAP_set_advertising_enable_ucfg &rArr; GAP_set_legacy_advertising_enable &rArr; GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_enable_ucfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb_ucfg
</UL>

<P><STRONG><a name="[1dc]"></a>GAP_LimDiscTimeoutcb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAP_LimDiscTimeoutcb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; GAP_set_advertising_enable_ucfg &rArr; GAP_set_legacy_advertising_enable &rArr; GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[1dd]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; GAP_suspend_resume_active_advertising_sets_ucfg &rArr; GAP_suspend_resume_active_advertising_sets_legacy &rArr; hci_le_set_advertising_enable &rArr; LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_ucfg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_adv_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_reset_privacy_timer
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_privacy_timer
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_disable_scan_ucfg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_start_privacy_timer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[69]"></a>GAP_ResumeAdvertising_ucfg</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_ResumeAdvertising_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAP_ResumeAdvertising_ucfg &rArr; GAP_suspend_resume_active_advertising_sets_legacy &rArr; hci_le_set_advertising_enable &rArr; LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_legacy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[560]"></a>GAP_ResumeAdvertising_ucfg_weak</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_ResumeAdvertising_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f0]"></a>GAP_central_connection_complete_handler_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_central_connection_complete_handler_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[561]"></a>GAP_central_connection_complete_handler_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_central_connection_complete_handler_ucfg_weak), UNUSED)

<P><STRONG><a name="[1de]"></a>GAP_check_adv_status</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_check_adv_status))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_extended_adv_scan_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_privacy_timer
</UL>

<P><STRONG><a name="[1e6]"></a>GAP_check_flags</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_check_flags))
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_search_flags_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[1f4]"></a>GAP_discover_peer_name_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_discover_peer_name_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
</UL>

<P><STRONG><a name="[562]"></a>GAP_discover_peer_name_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_discover_peer_name_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d3]"></a>GAP_enable_controller_privacy_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_enable_controller_privacy_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[563]"></a>GAP_enable_controller_privacy_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_enable_controller_privacy_ucfg_weak), UNUSED)

<P><STRONG><a name="[1df]"></a>GAP_enable_disable_scan_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_enable_disable_scan_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[564]"></a>GAP_enable_disable_scan_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_enable_disable_scan_ucfg_weak), UNUSED)

<P><STRONG><a name="[1e1]"></a>GAP_generate_new_rpa</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_generate_new_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GAP_generate_new_rpa &rArr; smp_sap_crt_generate_rpa &rArr; smp_sap_crt_generate_local_irk &rArr; smp_crt_diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_rpa
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1e9]"></a>GAP_get_current_address</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_current_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAP_get_current_address &rArr; GAP_get_public_address &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_rpa
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_own_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_connection_complete_evt_hndl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
</UL>

<P><STRONG><a name="[1d7]"></a>GAP_get_default_le_event_mask</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_default_le_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_get_default_le_event_mask &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[3eb]"></a>GAP_get_identity_address_type</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_identity_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements_api
</UL>

<P><STRONG><a name="[1eb]"></a>GAP_get_own_address_type</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_own_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
</UL>

<P><STRONG><a name="[1ed]"></a>GAP_get_public_address</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_public_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAP_get_public_address &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_gap_get_local_identity_address
</UL>

<P><STRONG><a name="[1ea]"></a>GAP_get_rpa</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAP_get_rpa &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
</UL>

<P><STRONG><a name="[1ec]"></a>GAP_get_static_random_address</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_get_static_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAP_get_static_random_address &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_gap_get_local_identity_address
</UL>

<P><STRONG><a name="[408]"></a>GAP_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_hci_disconnection_complete_evt_hndl))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[1ee]"></a>GAP_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_hci_le_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_hci_le_connection_complete_evt_hndl &rArr; GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_peripheral_connection_complete_handler_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_central_connection_complete_handler_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[1d4]"></a>GAP_init_advertising_sets_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_init_advertising_sets_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[565]"></a>GAP_init_advertising_sets_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_init_advertising_sets_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f1]"></a>GAP_init_context</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_init_context &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[1f3]"></a>GAP_name_disc_proc_connected_check</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_central.o(.text.GAP_name_disc_proc_connected_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_name_disc_proc_connected_check &rArr; aci_gap_proc_complete_event_wrapper &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name_ucfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check_ucfg
</UL>

<P><STRONG><a name="[68]"></a>GAP_name_disc_proc_connected_check_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAP_name_disc_proc_connected_check_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GAP_name_disc_proc_connected_check_ucfg &rArr; GAP_name_disc_proc_connected_check &rArr; aci_gap_proc_complete_event_wrapper &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[1ef]"></a>GAP_peripheral_connection_complete_handler_ucfg</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_peripheral_connection_complete_handler_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_discoverability
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_privacy_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[566]"></a>GAP_peripheral_connection_complete_handler_ucfg_weak</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_peripheral_connection_complete_handler_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d6]"></a>GAP_reset_privacy_timer</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_reset_privacy_timer))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1e7]"></a>GAP_search_flags_index</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_search_flags_index))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_flags
</UL>

<P><STRONG><a name="[1db]"></a>GAP_set_advertising_enable_ucfg</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap_peripheral.o(.text.GAP_set_advertising_enable_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_set_advertising_enable_ucfg &rArr; GAP_set_legacy_advertising_enable &rArr; GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[567]"></a>GAP_set_advertising_enable_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap_peripheral.o(.text.GAP_set_advertising_enable_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d5]"></a>GAP_set_controller_random_address_ucfg</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_set_controller_random_address_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_set_controller_random_address_ucfg &rArr; hci_le_set_random_address &rArr; LL_Set_Advertising_Set_Random_Address &rArr; LL_LE_Set_Advertising_Parameters_Default &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
</UL>

<P><STRONG><a name="[568]"></a>GAP_set_controller_random_address_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_set_controller_random_address_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f7]"></a>GAP_set_legacy_advertising_enable</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_set_legacy_advertising_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_set_legacy_advertising_enable &rArr; GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_privacy_timer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_start_privacy_timer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_flags
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_enable_ucfg
</UL>

<P><STRONG><a name="[1e2]"></a>GAP_start_privacy_timer</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_start_privacy_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GAP_start_privacy_timer &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1e3]"></a>GAP_stop_privacy_timer</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_stop_privacy_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GAP_stop_privacy_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_adv_status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_peripheral_connection_complete_handler_ucfg
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1e0]"></a>GAP_suspend_resume_active_advertising_sets_ucfg</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_suspend_resume_active_advertising_sets_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAP_suspend_resume_active_advertising_sets_ucfg &rArr; GAP_suspend_resume_active_advertising_sets_legacy &rArr; hci_le_set_advertising_enable &rArr; LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_legacy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[569]"></a>GAP_suspend_resume_active_advertising_sets_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_suspend_resume_active_advertising_sets_ucfg_weak), UNUSED)

<P><STRONG><a name="[1fb]"></a>GAT_att_clt_bearer_close</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_clt_bearer_close))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_bearer_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[1fd]"></a>GAT_att_clt_connection</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_clt_connection))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
</UL>

<P><STRONG><a name="[1ff]"></a>GAT_att_clt_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_clt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_init &rArr; GAT_clt_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
</UL>

<P><STRONG><a name="[201]"></a>GAT_att_clt_rcv</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_clt_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_rcv &rArr; GAT_clt_rcv_srv_initiated &rArr; aci_gatt_clt_multi_notification_int_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>

<P><STRONG><a name="[20b]"></a>GAT_att_cmn_connection</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_connection &rArr; GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; smp_sap_check_is_peer_device_bonded &rArr; smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_connection
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[20d]"></a>GAT_att_cmn_disconnection</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_disconnection &rArr; GAT_att_srv_bearer_close &rArr; GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_forget_device_upon_disconnection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_bearer_close
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_bearer_close
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
</UL>

<P><STRONG><a name="[2c]"></a>GAT_att_cmn_dscr_flag_check_is_not_set_f</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_check_is_not_set_f))
<BR>[Address Reference Count : 2]<UL><LI> gat_srv.o(.text.GAT_srv_tx_service_change)
<LI> gat_att_srv.o(.text.GAT_att_srv_confirmation_pending)
</UL>
<P><STRONG><a name="[31]"></a>GAT_att_cmn_dscr_flag_clear_f</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_clear_f))
<BR>[Address Reference Count : 1]<UL><LI> gat_srv.o(.text.GAT_srv_tx_service_change)
</UL>
<P><STRONG><a name="[2e]"></a>GAT_att_cmn_dscr_flag_set_f</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_dscr_flag_set_f))
<BR>[Address Reference Count : 2]<UL><LI> gat_srv.o(.text.GAT_srv_db_hash_tsk)
<LI> gat_srv.o(.text.GAT_srv_check_change_aware)
</UL>
<P><STRONG><a name="[21e]"></a>GAT_att_cmn_for_each_ch_descr</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_for_each_ch_descr))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_change_aware
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirmation_pending
</UL>

<P><STRONG><a name="[203]"></a>GAT_att_cmn_get_channel_descr_p</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_get_channel_descr_p))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>

<P><STRONG><a name="[267]"></a>GAT_att_cmn_get_conn_index</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_get_conn_index))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
</UL>

<P><STRONG><a name="[212]"></a>GAT_att_cmn_get_pckt</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_get_pckt))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[214]"></a>GAT_att_cmn_init</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_init &rArr; GAT_att_clt_init &rArr; GAT_clt_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init_ucfg
</UL>

<P><STRONG><a name="[216]"></a>GAT_att_cmn_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_att_cmn_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_init_ucfg &rArr; GAT_att_cmn_init &rArr; GAT_att_clt_init &rArr; GAT_clt_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[217]"></a>GAT_att_cmn_rcv</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_rcv &rArr; GAT_att_clt_rcv &rArr; GAT_clt_rcv_srv_initiated &rArr; aci_gatt_clt_multi_notification_int_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_buff_off
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[219]"></a>GAT_att_cmn_send</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_resize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[206]"></a>GAT_att_cmn_start_timer</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_start_timer &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_timer_index
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[205]"></a>GAT_att_cmn_stop_timer</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_timer_index
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[2a]"></a>GAT_att_cmn_timeout_cb</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb_wrapper)
</UL>
<P><STRONG><a name="[29]"></a>GAT_att_cmn_timeout_cb_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_timeout_cb_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_timeout_cb_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(.text.GAT_att_cmn_init)
</UL>
<P><STRONG><a name="[21d]"></a>GAT_att_cmn_timer_expire_tsk</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_timer_expire_tsk))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk_ucfg
</UL>

<P><STRONG><a name="[6a]"></a>GAT_att_cmn_timer_expire_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_att_cmn_timer_expire_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_timer_expire_tsk_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[21f]"></a>GAT_att_cmn_tx_pool_evt_tsk</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_tx_pool_evt_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_tx_pool_evt_tsk &rArr; aci_gatt_tx_pool_available_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_push_noinline
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get_available_mem_buffers
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk_ucfg
</UL>

<P><STRONG><a name="[6b]"></a>GAT_att_cmn_tx_pool_evt_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_att_cmn_tx_pool_evt_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_tx_pool_evt_tsk_ucfg &rArr; GAT_att_cmn_tx_pool_evt_tsk &rArr; aci_gatt_tx_pool_available_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[225]"></a>GAT_att_db_find_by_def</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_by_def))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>

<P><STRONG><a name="[226]"></a>GAT_att_db_find_by_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_by_handle))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
</UL>

<P><STRONG><a name="[227]"></a>GAT_att_db_find_from_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_from_handle))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[263]"></a>GAT_att_db_find_last_attr_of_type</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_last_attr_of_type))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
</UL>

<P><STRONG><a name="[22a]"></a>GAT_att_db_get_last_group_handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_get_last_group_handle))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
</UL>

<P><STRONG><a name="[230]"></a>GAT_att_db_get_last_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_get_last_handle))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
</UL>

<P><STRONG><a name="[22b]"></a>GAT_att_db_get_next</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
</UL>

<P><STRONG><a name="[22c]"></a>GAT_att_db_init</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_db_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_init
</UL>

<P><STRONG><a name="[22d]"></a>GAT_att_db_insert</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_db_insert &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[22e]"></a>GAT_att_db_reverse_find_attr_of_type</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_reverse_find_attr_of_type))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[22f]"></a>GAT_att_db_rm_att_range</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_rm_att_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_db_rm_att_range &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_handle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
</UL>

<P><STRONG><a name="[20f]"></a>GAT_att_srv_bearer_close</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_bearer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_bearer_close &rArr; GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[235]"></a>GAT_att_srv_confirmation_pending</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_confirmation_pending))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[20c]"></a>GAT_att_srv_connection</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; smp_sap_check_is_peer_device_bonded &rArr; smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
</UL>

<P><STRONG><a name="[23a]"></a>GAT_att_srv_extract_write_packet_data</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_extract_write_packet_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_extract_write_packet_data &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[242]"></a>GAT_att_srv_flush_user_pending_list</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_flush_user_pending_list))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[243]"></a>GAT_att_srv_hvtx</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_hvtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_pckt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
</UL>

<P><STRONG><a name="[215]"></a>GAT_att_srv_init</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_init &rArr; GAT_srv_init &rArr; GAT_att_db_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
</UL>

<P><STRONG><a name="[248]"></a>GAT_att_srv_process_rx_pckt_tsk</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_process_rx_pckt_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_process_rx_pckt_tsk &rArr; GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_get_pckt_count
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk_ucfg
</UL>

<P><STRONG><a name="[6c]"></a>GAT_att_srv_process_rx_pckt_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_att_srv_process_rx_pckt_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_process_rx_pckt_tsk_ucfg &rArr; GAT_att_srv_process_rx_pckt_tsk &rArr; GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[218]"></a>GAT_att_srv_rcv</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_rcv &rArr; GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_pckt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>

<P><STRONG><a name="[252]"></a>GAT_att_srv_request_user_pending</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_request_user_pending))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[1fc]"></a>GAT_clt_bearer_close</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_bearer_close))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_bearer_close
</UL>

<P><STRONG><a name="[1fe]"></a>GAT_clt_connection</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_connection))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_connection
</UL>

<P><STRONG><a name="[200]"></a>GAT_clt_init</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_clt_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_init
</UL>

<P><STRONG><a name="[6f]"></a>GAT_clt_proc_exec_tsk</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_proc_exec_tsk))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[20a]"></a>GAT_clt_rcv_corrupted</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_rcv_corrupted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_clt_rcv_corrupted &rArr; L2C_get_cid_from_basic_packet_header &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_get_proc_per_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[207]"></a>GAT_clt_rcv_srv_initiated</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_rcv_srv_initiated))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_clt_rcv_srv_initiated &rArr; aci_gatt_clt_multi_notification_int_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_push_noinline
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_push_noinline
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_push_noinline
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[25d]"></a>GAT_srv_add_char_descriptor</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_add_char_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_char_descriptor &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_reverse_find_attr_of_type
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[260]"></a>GAT_srv_add_characteristic</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_add_characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char_api
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[262]"></a>GAT_srv_add_service</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_last_attr_of_type
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_handle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service_api
</UL>

<P><STRONG><a name="[255]"></a>GAT_srv_attr_value_read</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_attr_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_attr_value_read &rArr; GAT_srv_get_attr_value &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
</UL>

<P><STRONG><a name="[257]"></a>GAT_srv_attr_value_write</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_attr_value_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_srv_attr_value_write &rArr; GAT_srv_attr_direct_value_write &rArr; aci_gatt_srv_attribute_modified_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push_noinline
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_reverse_find_attr_of_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[231]"></a>GAT_srv_bearer_close</STRONG> (Thumb, 460 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_bearer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_remote_address_check_addr_type
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_bearer_close
</UL>

<P><STRONG><a name="[24e]"></a>GAT_srv_check_change_aware</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_check_change_aware))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_change_aware &rArr; GAT_srv_check_client_support_feature &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_change_aware
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
</UL>

<P><STRONG><a name="[26f]"></a>GAT_srv_check_client_support_feature</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_check_client_support_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_client_support_feature &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>

<P><STRONG><a name="[250]"></a>GAT_srv_check_perms</STRONG> (Thumb, 234 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_check_perms))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_security_level
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_check_encryption_key_size
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[236]"></a>GAT_srv_connection</STRONG> (Thumb, 292 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; smp_sap_check_is_peer_device_bonded &rArr; smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_read_peer_bonded_gatt_client_data
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_remote_address_check_addr_type
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_connection
</UL>

<P><STRONG><a name="[274]"></a>GAT_srv_db_hash_tsk</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_db_hash_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GAT_srv_db_hash_tsk &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptFinish
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptAppend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk_ucfg
</UL>

<P><STRONG><a name="[6d]"></a>GAT_srv_db_hash_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_srv_db_hash_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GAT_srv_db_hash_tsk_ucfg &rArr; GAT_srv_db_hash_tsk &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[23c]"></a>GAT_srv_find_by_type_attr_p</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_find_by_type_attr_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
</UL>

<P><STRONG><a name="[23e]"></a>GAT_srv_get_att_group_end_handle</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_att_group_end_handle))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
</UL>

<P><STRONG><a name="[23f]"></a>GAT_srv_get_attr_type</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_attr_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_type &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
</UL>

<P><STRONG><a name="[24f]"></a>GAT_srv_get_attr_value</STRONG> (Thumb, 492 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_attr_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_value &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[277]"></a>GAT_srv_get_attribute_handle</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_attribute_handle))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_char_decl_handle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_service_handle
</UL>

<P><STRONG><a name="[273]"></a>GAT_srv_get_cccd_attr_p</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_cccd_attr_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_cccd_attr_p &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[26c]"></a>GAT_srv_get_cccd_val</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
</UL>

<P><STRONG><a name="[278]"></a>GAT_srv_get_char_decl_handle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_get_char_decl_handle))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle_api
</UL>

<P><STRONG><a name="[279]"></a>GAT_srv_get_service_handle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_get_service_handle))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle_api
</UL>

<P><STRONG><a name="[245]"></a>GAT_srv_init</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_init &rArr; GAT_att_db_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
</UL>

<P><STRONG><a name="[24d]"></a>GAT_srv_is_supported_grouping_type</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_is_supported_grouping_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_srv_is_supported_grouping_type &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
</UL>

<P><STRONG><a name="[261]"></a>GAT_srv_rm_characteristic</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_rm_characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_rm_characteristic &rArr; GAT_att_db_rm_att_range &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[264]"></a>GAT_srv_rm_service</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_rm_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_rm_service &rArr; GAT_att_db_rm_att_range &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[27c]"></a>GAT_srv_send_srv_change_tsk</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_send_srv_change_tsk))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk_ucfg
</UL>

<P><STRONG><a name="[6e]"></a>GAT_srv_send_srv_change_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.GAT_srv_send_srv_change_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_send_srv_change_tsk_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[234]"></a>GAT_srv_set_change_aware</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_set_change_aware))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
</UL>

<P><STRONG><a name="[4bf]"></a>GapIsPrivacySupported</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gap_common.o(.text.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[192]"></a>Gap_profile_set_appearance</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_profile.o(.text.Gap_profile_set_appearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Gap_profile_set_appearance &rArr; Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[27e]"></a>Gap_profile_set_char_value</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gap_profile.o(.text.Gap_profile_set_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_appearance
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
</UL>

<P><STRONG><a name="[191]"></a>Gap_profile_set_dev_name</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_profile.o(.text.Gap_profile_set_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Gap_profile_set_dev_name &rArr; Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[165]"></a>GetPartInfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, miscutil.o(.text.GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetRAMSize
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetPartInfo
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32wb0x_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32wb0x_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32wb0x_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, stm32wb0x_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
</UL>

<P><STRONG><a name="[280]"></a>HAL_FLASH_Program</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32wb0x_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Burst
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>

<P><STRONG><a name="[38]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, bluenrgx_rng.o(.text.HAL_Generate_Random_Bytes_To))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = HAL_Generate_Random_Bytes_To &rArr; Hal_Get_Random_Number &rArr; BLEPLAT_RngGetRandom16
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage_1_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_id_data.o(.text.IDD_Initialize_Device_IDs)
</UL>
<P><STRONG><a name="[1d0]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wb0x_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_GetTickPrio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wb0x_hal.o(.text.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[3d0]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wb0x_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[284]"></a>HAL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wb0x_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[285]"></a>HAL_InitTick</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32wb0x_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[286]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[292]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wb0x_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[289]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[28b]"></a>HAL_PKA_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32wb0x_hal_pka.o(.text.HAL_PKA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PKA_Init &rArr; HAL_PKA_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_MspInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_PKA_Init
</UL>

<P><STRONG><a name="[28c]"></a>HAL_PKA_MspInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, pka.o(.text.HAL_PKA_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PKA_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
</UL>

<P><STRONG><a name="[28d]"></a>HAL_RADIO_Init</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, stm32wb0x_hal_radio.o(.text.HAL_RADIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RADIO_Init &rArr; HAL_RADIO_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RADIO_Init
</UL>

<P><STRONG><a name="[28e]"></a>HAL_RADIO_MspInit</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, radio.o(.text.HAL_RADIO_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RADIO_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_DEBUG_GPIO_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RADIO_ReadRSSI</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32wb0x_hal_radio.o(.text.HAL_RADIO_ReadRSSI))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CalculateRSSI
</UL>

<P><STRONG><a name="[293]"></a>HAL_RADIO_TIMER_CPU_WKUP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_CPU_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RADIO_TIMER_CPU_WKUP_IRQHandler &rArr; HAL_RADIO_TIMER_CpuWakeUpCallback &rArr; VTimer_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CpuWakeUpCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_TimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TIMER_CPU_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RADIO_TIMER_ClearRadioTimerValue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_ClearRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RADIO_TIMER_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
</UL>

<P><STRONG><a name="[295]"></a>HAL_RADIO_TIMER_CpuWakeUpCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.HAL_RADIO_TIMER_CpuWakeUpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RADIO_TIMER_CpuWakeUpCallback &rArr; VTimer_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTimer_Process_Schedule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CPU_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_RADIO_TIMER_ERROR_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_ERROR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RADIO_TIMER_ERROR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TIMER_ERROR_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_RADIO_TIMER_EndOfRadioActivityIsr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_EndOfRadioActivityIsr))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RADIO_TIMER_GetAnchorPoint</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_GetAnchorPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RADIO_TIMER_GetAnchorPoint &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetAnchorPoint
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RADIO_TIMER_GetCurrentSysTime</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_ClearRadioTimerValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>

<P><STRONG><a name="[298]"></a>HAL_RADIO_TIMER_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RADIO_TIMER_Init &rArr; _start_timer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_MachineTimeToSysTime
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_configureTxRxDelay
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_calibration_data
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RADIO_TIMER_Init
</UL>

<P><STRONG><a name="[29a]"></a>HAL_RADIO_TIMER_MachineTimeToSysTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_MachineTimeToSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RADIO_TIMER_MachineTimeToSysTime
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_RADIO_TIMER_RadioTimerIsr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_RadioTimerIsr))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>HAL_RADIO_TIMER_SetRadioCloseTimeout</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_SetRadioCloseTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetRadioCloseTimeout
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RADIO_TIMER_SetRadioTimerValue</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetRadioTimerValue
</UL>

<P><STRONG><a name="[181]"></a>HAL_RADIO_TIMER_StartVirtualTimerSysTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_StartVirtualTimerSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_StartTimer
</UL>

<P><STRONG><a name="[183]"></a>HAL_RADIO_TIMER_StopVirtualTimer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_StopVirtualTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_StopTimer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_RADIO_TIMER_Tick</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RADIO_TIMER_Tick &rArr; _start_timer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StopVirtualTimer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calibration_callback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_configureTxRxDelay
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_calibration_data
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTimer_Process
</UL>

<P><STRONG><a name="[294]"></a>HAL_RADIO_TIMER_TimeoutCallback</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_TimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RADIO_TIMER_TimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CPU_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_RADIO_TXRX_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32wb0x_hal_radio.o(.text.HAL_RADIO_TXRX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_RADIO_TXRX_IRQHandler &rArr; HAL_RADIO_TxRxCallback &rArr; BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_RadioTimerIsr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_EndOfRadioActivityIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TXRX_IRQHandler
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_RADIO_TXRX_SEQ_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_hal_radio.o(.text.HAL_RADIO_TXRX_SEQ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RADIO_TXRX_SEQ_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxSeqCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TXRX_SEQ_IRQHandler
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_RADIO_TxRxCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ble.o(.text.HAL_RADIO_TxRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_RADIO_TxRxCallback &rArr; BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Process_Schedule
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTimer_Process_Schedule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_RADIO_TxRxSeqCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_utils.o(.text.HAL_RADIO_TxRxSeqCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_SEQ_IRQHandler
</UL>

<P><STRONG><a name="[28f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32wb0x_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32wb0x_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[287]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wb0x_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, stm32wb0x_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_RTC_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32wb0x_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32wb0x_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[288]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wb0x_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, aci_hal.o(.text.HAL_Set_TX_Power_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HAL_Set_TX_Power_Level &rArr; BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetMaxPALevel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, stm32wb0x_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2be]"></a>HAL_Write_ConfigData</STRONG> (Thumb, 356 bytes, Stack size unknown bytes, aci_hal.o(.text.HAL_Write_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HAL_Write_ConfigData &rArr; smp_sap_scp_force_debug_key_usage_ucfg &rArr; smp_sap_scp_force_debug_key_usage &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_debug_trudy__set_config_ucfg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_multi_link_connection_ucfg
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_scp_force_debug_key_usage_ucfg
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_set_scan_channel_bitmap
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_force_chsel_1
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_write_supported_data_ucfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configBitmapSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>

<P><STRONG><a name="[39b]"></a>HCI_Init</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, hci_common.o(.text.HCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[137]"></a>HW_AES_Encrypt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hw_aes.o(.text.HW_AES_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_HW_enc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>

<P><STRONG><a name="[3b4]"></a>HW_AES_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, hw_aes.o(.text.HW_AES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HW_AES_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[2c6]"></a>HW_PKA_Comparison</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hw_pka.o(.text.HW_PKA_Comparison))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_PKA_Comparison &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteOperand
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[2c7]"></a>HW_PKA_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hw_pka.o(.text.HW_PKA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_PKA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[2c9]"></a>HW_PKA_IsPointCheckOk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_IsPointCheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_PKA_IsPointCheckOk
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[2cb]"></a>HW_PKA_IsRangeCheckOk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_IsRangeCheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_PKA_IsRangeCheckOk
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[2cf]"></a>HW_PKA_P256_StartEccScalarMul</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hw_pka.o(.text.HW_PKA_P256_StartEccScalarMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_PKA_P256_StartEccScalarMul
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[2cc]"></a>HW_PKA_P256_StartPointCheck</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hw_pka.o(.text.HW_PKA_P256_StartPointCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[2ca]"></a>HW_PKA_ReadResult</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_ReadResult))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_IsPointCheckOk
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_IsRangeCheckOk
</UL>

<P><STRONG><a name="[174]"></a>HW_PKA_StartP256DHkeyGeneration</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hw_pka.o(.text.HW_PKA_StartP256DHkeyGeneration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Unlock
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_IsPointCheckOk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_IsRangeCheckOk
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Comparison
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_isStartPoint
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_StartP256PublicKeyGeneration
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartDHkey
</UL>

<P><STRONG><a name="[37]"></a>HW_PKA_WriteOperand</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_WriteOperand))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Comparison
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_pka.o(.text.HW_PKA_P256_StartPointCheck)
</UL>
<P><STRONG><a name="[36]"></a>HW_PKA_WriteSingleInput</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_pka.o(.text.HW_PKA_WriteSingleInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Comparison
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_pka.o(.text.HW_PKA_P256_StartEccScalarMul)
</UL>
<P><STRONG><a name="[2ce]"></a>HW_PKA_isStartPoint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_isStartPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_PKA_isStartPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[178]"></a>HW_RNG_GetRandom16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_rng.o(.text.HW_RNG_GetRandom16))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGetRandom16
</UL>

<P><STRONG><a name="[17a]"></a>HW_RNG_GetRandom32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_rng.o(.text.HW_RNG_GetRandom32))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGetRandom32
</UL>

<P><STRONG><a name="[3b3]"></a>HW_RNG_Init</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, hw_rng.o(.text.HW_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HW_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[283]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, bluenrgx_rng.o(.text.Hal_Get_Random_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Hal_Get_Random_Number &rArr; BLEPLAT_RngGetRandom16
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGetRandom16
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_rpa
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
</UL>

<P><STRONG><a name="[48]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, bluenrgx_rng.o(.text.Hal_Get_Random_Number32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Hal_Get_Random_Number32 &rArr; BLEPLAT_RngGetRandom32
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGetRandom32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpf_encryption.o(.text.LL_encryption)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, device_id_data.o(.text.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_dev_id_data_get_record
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_dev_id_data_add_record
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[4fa]"></a>Is_Address_Initialized</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_routines.o(.text.Is_Address_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_enhanced_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[2d4]"></a>L2C_acl_cframe_signaling_hndl</STRONG> (Thumb, 532 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_acl_cframe_signaling_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = L2C_acl_cframe_signaling_hndl &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_copy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_copy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_post_process_incoming_request_packet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_pre_process_incoming_response_packet
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_process_cfc_mode_command_ucfg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_get_link_control_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[2dc]"></a>L2C_build_command_reject_pdu</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.L2C_build_command_reject_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = L2C_build_command_reject_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_get_link_control_block_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2e1]"></a>L2C_cos_cfc_init_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.L2C_cos_cfc_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
</UL>

<P><STRONG><a name="[56a]"></a>L2C_cos_cfc_init_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.L2C_cos_cfc_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[2de]"></a>L2C_cos_channel_descriptors_reset_pending</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.L2C_cos_channel_descriptors_reset_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_cos_channel_descriptors_reset_pending &rArr; l2c_cos_channel_descriptor_reset &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_channel_descriptor_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
</UL>

<P><STRONG><a name="[2d6]"></a>L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_channel_commands.o(.text.L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[56b]"></a>L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_channel_commands.o(.text.L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak), UNUSED)

<P><STRONG><a name="[423]"></a>L2C_cos_physical_link_disconnection_hndl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.L2C_cos_physical_link_disconnection_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_disconnection_complete_evt_hndl
</UL>

<P><STRONG><a name="[56c]"></a>L2C_cos_physical_link_disconnection_hndl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.L2C_cos_physical_link_disconnection_hndl_ucfg_weak), UNUSED)

<P><STRONG><a name="[2d7]"></a>L2C_cos_process_cfc_mode_command_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_channel_commands.o(.text.L2C_cos_process_cfc_mode_command_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[56d]"></a>L2C_cos_process_cfc_mode_command_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_channel_commands.o(.text.L2C_cos_process_cfc_mode_command_ucfg_weak), UNUSED)

<P><STRONG><a name="[202]"></a>L2C_get_cid_from_basic_packet_header</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.L2C_get_cid_from_basic_packet_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = L2C_get_cid_from_basic_packet_header &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
</UL>

<P><STRONG><a name="[2e0]"></a>L2C_init</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_init &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_cfc_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init_ucfg
</UL>

<P><STRONG><a name="[2e2]"></a>L2C_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.L2C_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_init_ucfg &rArr; L2C_init &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[2e3]"></a>L2C_mux_acl_packet</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_mux_acl_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_release_unexpected_acl_packet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_hndl_incoming_le_frame_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[2e7]"></a>L2C_receive_data</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_extract_pdu
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_resize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_append
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_get_link_control_block_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[21a]"></a>L2C_send_frame</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_sdu_enqueue_for_segmentation_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_short_pdu
</UL>

<P><STRONG><a name="[2eb]"></a>L2C_timeout_handler_signalling</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2c_main.o(.text.L2C_timeout_handler_signalling))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = L2C_timeout_handler_signalling &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_channel_descriptors_reset_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_timers_callback
</UL>

<P><STRONG><a name="[2ec]"></a>LLC_authenticated_payload_timeout_cb</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_authenticated_payload_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_cb &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_timers_callback
</UL>

<P><STRONG><a name="[2f0]"></a>LLC_authenticated_payload_timeout_processing</STRONG> (Thumb, 288 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_authenticated_payload_timeout_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_processing &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing_ucfg
</UL>

<P><STRONG><a name="[75]"></a>LLC_authenticated_payload_timeout_processing_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.LLC_authenticated_payload_timeout_processing_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_processing_ucfg &rArr; LLC_authenticated_payload_timeout_processing &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[2f1]"></a>LLC_authenticated_payload_timeout_reset</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_authenticated_payload_timeout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[2f5]"></a>LLC_channel_map_copy_to_cpf_context_ucfg</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LLC_channel_map_copy_to_cpf_context_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LLC_channel_map_copy_to_cpf_context_ucfg &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[56e]"></a>LLC_channel_map_copy_to_cpf_context_ucfg_weak</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LLC_channel_map_copy_to_cpf_context_ucfg_weak), UNUSED)

<P><STRONG><a name="[2fc]"></a>LLC_channel_map_update_offline_processing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LLC_channel_map_update_offline_processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[56f]"></a>LLC_channel_map_update_offline_processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LLC_channel_map_update_offline_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[386]"></a>LLC_chc_ll_cntxt_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_chc_ll_cntxt_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[570]"></a>LLC_chc_ll_cntxt_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_chc_ll_cntxt_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[2fd]"></a>LLC_chc_reporting_offline_processing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_chc_reporting_offline_processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[571]"></a>LLC_chc_reporting_offline_processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_chc_reporting_offline_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[447]"></a>LLC_conn_init_chc_ctxt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_conn_init_chc_ctxt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[572]"></a>LLC_conn_init_chc_ctxt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_chan_class.o(.text.LLC_conn_init_chc_ctxt_ucfg_weak), UNUSED)

<P><STRONG><a name="[2fe]"></a>LLC_cte_request_procedure_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.LLC_cte_request_procedure_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[573]"></a>LLC_cte_request_procedure_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.LLC_cte_request_procedure_ucfg_weak), UNUSED)

<P><STRONG><a name="[2f6]"></a>LLC_init_le_ping_params</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_init_le_ping_params))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[44]"></a>LLC_le_ping</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_le_ping))
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init)
</UL>
<P><STRONG><a name="[2f8]"></a>LLC_offline_control_procedures_processing</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, hci_common.o(.text.LLC_offline_control_procedures_processing))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_offline_processing_ucfg
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_cte_request_procedure_ucfg
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_chc_reporting_offline_processing_ucfg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_channel_map_update_offline_processing_ucfg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Len_Update_Offline_Processing_ucfg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_offline_processing_ucfg
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing_ucfg
</UL>

<P><STRONG><a name="[74]"></a>LLC_offline_control_procedures_processing_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.LLC_offline_control_procedures_processing_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LLC_offline_control_procedures_processing_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[39d]"></a>LLC_pcl_hal_cntxt_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_hal_cntxt_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[574]"></a>LLC_pcl_hal_cntxt_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_hal_cntxt_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[467]"></a>LLC_pcl_incr_rx_packets_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_incr_rx_packets_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[575]"></a>LLC_pcl_incr_rx_packets_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_incr_rx_packets_ucfg_weak), UNUSED)

<P><STRONG><a name="[2ff]"></a>LLC_pcl_offline_processing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_offline_processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[576]"></a>LLC_pcl_offline_processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_offline_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[2b3]"></a>LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[577]"></a>LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak), UNUSED)

<P><STRONG><a name="[300]"></a>LLC_pcl_set_radio_tx_power_conn_start_ucfg</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LLC_pcl_set_radio_tx_power_conn_start_ucfg &rArr; BLEPLAT_CNTR_SmSetTxPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPwr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[578]"></a>LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak), UNUSED)

<P><STRONG><a name="[46c]"></a>LLC_pcl_update_avg_rssi_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_update_avg_rssi_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[579]"></a>LLC_pcl_update_avg_rssi_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.LLC_pcl_update_avg_rssi_ucfg_weak), UNUSED)

<P><STRONG><a name="[302]"></a>LLC_update_le_ping_params</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_update_le_ping_params))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[304]"></a>LL_Get_LTK</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.LL_Get_LTK))
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p_from_handle
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_negative_reply_api
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply_api
</UL>

<P><STRONG><a name="[307]"></a>LL_Get_Supported_Features</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(.text.LL_Get_Supported_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_Get_Supported_Features &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chc_csr_ucfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_wr_csr_ucfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_controller_privacy_csr_ucfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_channel_sel_algo2_enabled
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cis_csr_ucfg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bis_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[30a]"></a>LL_LE_Set_Advertise_Enable</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_LE_Set_Advertise_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>

<P><STRONG><a name="[30e]"></a>LL_LE_Set_Advertising_Parameters</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_LE_Set_Advertising_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_LE_Set_Advertising_Parameters &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_advertising_set_index
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>

<P><STRONG><a name="[2f9]"></a>LL_Read_Remote_Used_Features</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(.text.LL_Read_Remote_Used_Features))
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p_from_handle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_get_proc_id_from_sm
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[311]"></a>LL_Set_Advertising_Set_Random_Address</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_Set_Advertising_Set_Random_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Set_Advertising_Set_Random_Address &rArr; LL_LE_Set_Advertising_Parameters_Default &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
</UL>

<P><STRONG><a name="[30c]"></a>LL_Set_Extented_Advertising_Enable</STRONG> (Thumb, 708 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetDataLength
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GetTimer2TimeoutForIfs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks_ucfg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_anchor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_rx_common_buffer_p
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_tx_common_buffer_p
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_extended_ucfg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_start_privacy_timer_ucfg
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_eadv_generate_new_rpa_for_one_adv_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_advertising_set_index
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_enable_taskslot
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[30d]"></a>LL_Set_Extented_Advertising_Set_Random_Address</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_Set_Extented_Advertising_Set_Random_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_Set_Extented_Advertising_Set_Random_Address &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_advertising_set_index
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
</UL>

<P><STRONG><a name="[45]"></a>LL_channel_map_update</STRONG> (Thumb, 256 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LL_channel_map_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LL_channel_map_update &rArr; llc_conn_disconnect_link_from_cpf &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_calc_instant
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_disconnect_link_from_cpf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_chmap_params
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_channel_map_copy_to_cpf_context_ucfg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update_param_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init_chmap_update)
</UL>
<P><STRONG><a name="[31c]"></a>LL_channel_map_update_param_check</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(.text.LL_channel_map_update_param_check))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[324]"></a>LL_conn_get_version_exchange_cached</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(.text.LL_conn_get_version_exchange_cached))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[35c]"></a>LL_conn_upd_data_length_change_event_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.LL_conn_upd_data_length_change_event_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[57a]"></a>LL_conn_upd_data_length_change_event_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.LL_conn_upd_data_length_change_event_ucfg_weak), UNUSED)

<P><STRONG><a name="[35a]"></a>LL_conn_upd_max_tx_time_coded_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.LL_conn_upd_max_tx_time_coded_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[57b]"></a>LL_conn_upd_max_tx_time_coded_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.LL_conn_upd_max_tx_time_coded_ucfg_weak), UNUSED)

<P><STRONG><a name="[325]"></a>LL_conn_version_exchange_set_cached</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(.text.LL_conn_version_exchange_set_cached))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[2f7]"></a>LL_cpe_clr_active</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_clr_active))
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[328]"></a>LL_cpe_conn_exception_opcode_from_sm</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_conn_exception_opcode_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_ctrl_proc_rsp_timer
</UL>

<P><STRONG><a name="[310]"></a>LL_cpe_conn_get_proc_id_from_sm</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_conn_get_proc_id_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[1bb]"></a>LL_cpe_engine</STRONG> (Thumb, 1928 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_cpe_engine &rArr; Acl_Tx_Cmpl_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chc_csr_ucfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_wr_csr_ucfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_wr_check_pawr_active_ucfg
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_past_initialize_connect_context_ucfg
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_reset
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_state
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_clr_rx_pdu_discarded_by_one_sm
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_rx_pdu_discarded_by_one_sm
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_active
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_first_opcode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_active
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_tx_ctrl_pdu_state
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_remove_address
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_tx_ctrl_pdu_state
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_instant_reached
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_instant_passed
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_rx_ctrl_pdu_full
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_instant_reached_passed
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cis_csr_ucfg
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subrate_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[2f2]"></a>LL_cpe_get_active_status</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_get_active_status))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_enhanced_get_latency
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_ctrl_proc_rsp_timer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[306]"></a>LL_cpe_get_cntxt</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_get_cntxt))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[348]"></a>LL_cpe_init</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_cpe_init &rArr; LL_cpe_init_chmap_update_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chmap_update_ucfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_conn_update_ucfg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_sca_upd_ucfg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_subrate_ucfg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cis_ucfg
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chc_reporting_ucfg
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chc_enable_ucfg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_pcl_ucfg
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cte_ucfg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_past_ucfg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_phy_update_ucfg
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_length_update_ucfg
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_ucfg
</UL>

<P><STRONG><a name="[350]"></a>LL_cpe_init_chc_enable_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_chc_enable_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[57c]"></a>LL_cpe_init_chc_enable_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_chc_enable_ucfg_weak), UNUSED)

<P><STRONG><a name="[351]"></a>LL_cpe_init_chc_reporting_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_chc_reporting_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[57d]"></a>LL_cpe_init_chc_reporting_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_chc_reporting_ucfg_weak), UNUSED)

<P><STRONG><a name="[355]"></a>LL_cpe_init_chmap_update</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_chmap_update))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chmap_update_ucfg
</UL>

<P><STRONG><a name="[34a]"></a>LL_cpe_init_chmap_update_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.LL_cpe_init_chmap_update_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_cpe_init_chmap_update_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chmap_update
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[352]"></a>LL_cpe_init_cis_ucfg</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_cis_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[57e]"></a>LL_cpe_init_cis_ucfg_weak</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_cis_ucfg_weak), UNUSED)

<P><STRONG><a name="[356]"></a>LL_cpe_init_conn_update</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_conn_update))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_conn_update_ucfg
</UL>

<P><STRONG><a name="[349]"></a>LL_cpe_init_conn_update_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.LL_cpe_init_conn_update_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_cpe_init_conn_update_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_conn_update
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[34e]"></a>LL_cpe_init_cte_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_cte_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[57f]"></a>LL_cpe_init_cte_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_cte_ucfg_weak), UNUSED)

<P><STRONG><a name="[34b]"></a>LL_cpe_init_length_update_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_length_update_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[580]"></a>LL_cpe_init_length_update_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_length_update_ucfg_weak), UNUSED)

<P><STRONG><a name="[34d]"></a>LL_cpe_init_past_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_past_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[581]"></a>LL_cpe_init_past_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_past_ucfg_weak), UNUSED)

<P><STRONG><a name="[34f]"></a>LL_cpe_init_pcl_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_pcl_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[582]"></a>LL_cpe_init_pcl_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_pcl_ucfg_weak), UNUSED)

<P><STRONG><a name="[34c]"></a>LL_cpe_init_phy_update_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_phy_update_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[583]"></a>LL_cpe_init_phy_update_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_phy_update_ucfg_weak), UNUSED)

<P><STRONG><a name="[354]"></a>LL_cpe_init_sca_upd_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_sca_upd_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[584]"></a>LL_cpe_init_sca_upd_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_sca_upd_ucfg_weak), UNUSED)

<P><STRONG><a name="[353]"></a>LL_cpe_init_subrate_ucfg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_subrate_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[585]"></a>LL_cpe_init_subrate_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_init_subrate_ucfg_weak), UNUSED)

<P><STRONG><a name="[357]"></a>LL_cpe_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.LL_cpe_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_cpe_init_ucfg &rArr; LL_cpe_init &rArr; LL_cpe_init_chmap_update_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[41]"></a>LL_cpe_register_cpf</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_register_cpf))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chmap_update
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_conn_update
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_sca_upd_ucfg
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_subrate_ucfg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cis_ucfg
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chc_reporting_ucfg
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_chc_enable_ucfg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_pcl_ucfg
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cte_ucfg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_past_ucfg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_phy_update_ucfg
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_length_update_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init)
</UL>
<P><STRONG><a name="[2f4]"></a>LL_cpe_set_active</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_set_active))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[31e]"></a>LL_cpe_set_blocked</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_set_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[2f3]"></a>LL_cpe_set_prepare_tx_pdu</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_set_prepare_tx_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[31f]"></a>LL_cpe_set_rx_with_instant</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_set_rx_with_instant))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[321]"></a>LL_cpe_set_tx_with_instant</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_set_tx_with_instant))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_tx_ctrl_pdu_has_instant
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[77]"></a>LL_cpf_cis_processing_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cis.o(.text.LL_cpf_cis_processing_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[586]"></a>LL_cpf_cis_processing_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cis.o(.text.LL_cpf_cis_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[46]"></a>LL_cpf_conn_upd</STRONG> (Thumb, 608 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.LL_cpf_conn_upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_cpf_conn_upd &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_calc_instant
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_disconnect_link_from_cpf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_conn_update_params
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_upd_data_length_change_event_ucfg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_upd_max_tx_time_coded_ucfg
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_upd_params_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init_conn_update)
</UL>
<P><STRONG><a name="[35d]"></a>LL_dtm_init</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ll_dtm.o(.text.LL_dtm_init))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_get_ctxt
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[315]"></a>LL_eadv_BLUE_SM</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_BLUE_SM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_eadv_BLUE_SM &rArr; BLEPLAT_CNTR_SmInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPwr
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPacketPtr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxMode
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxPacketPtr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxMode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetHopIncr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetCrcInit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetAccessAddr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmInitTo0
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[31a]"></a>LL_eadv_Blue_Rx</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_Blue_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_eadv_Blue_Rx &rArr; BLEPLAT_CNTR_PacketInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimerTrigRcv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimer2Active
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimeout
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetRxReady
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetPllTrig
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextTxMode
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextSlot
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextPtr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetKeepsemareq
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntRcvOk
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntDone
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetDataPtr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetAdvPduFormat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketInitTo0
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrPllTrig
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrIncChan
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[319]"></a>LL_eadv_Blue_Tx</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_Blue_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_eadv_Blue_Tx &rArr; BLEPLAT_CNTR_PacketInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTxReady
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimerTrigRcv
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimerTrigDone
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimer2Active
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetPllTrig
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextSlot
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextRxMode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextPtr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetKeepsemareq
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntDone
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetDataPtr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetAdvPduFormat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketInitTo0
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrIncChan
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[317]"></a>LL_eadv_start_extended_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_start_extended_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[587]"></a>LL_eadv_start_extended_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_start_extended_ucfg_weak), UNUSED)

<P><STRONG><a name="[127]"></a>LL_eadv_switchbackupdata_data_struc</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_eadv_switchbackupdata_data_struc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_eadv_switchbackupdata_data_struc &rArr; aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push_noinline
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[40]"></a>LL_encryption</STRONG> (Thumb, 1660 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.LL_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_encryption &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_disconnect_link_from_cpf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_tx_acl_blocked
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_stop_enc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_start_enc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_rx_acl_blocked
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_tx_acl_blocked
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_rx_acl_blocked
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_prepare_reject
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init)
</UL>
<P><STRONG><a name="[42]"></a>LL_feature_exchange</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(.text.LL_feature_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_feature_exchange &rArr; hci_le_read_remote_features_complete_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_features_complete_event_push_noinline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init)
</UL>
<P><STRONG><a name="[2c3]"></a>LL_force_chsel_1</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_force_chsel_1))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[476]"></a>LL_get_control_pdu_size</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(.text.LL_get_control_pdu_size))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[113]"></a>LL_get_rx_common_buffer_p</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(.text.LL_get_rx_common_buffer_p))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[12c]"></a>LL_get_tx_common_buffer_p</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(.text.LL_get_tx_common_buffer_p))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[381]"></a>LL_init</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_routines.o(.text.LL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_init &rArr; LL_init_ucfg_weak &rArr; BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_ucfg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_chc_ll_cntxt_init_ucfg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_wr_init_ucfg
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg
</UL>

<P><STRONG><a name="[387]"></a>LL_init_ucfg</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ble_stack_user_cfg.o(.text.LL_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LL_init_ucfg &rArr; LL_init &rArr; LL_init_ucfg_weak &rArr; BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[382]"></a>LL_init_ucfg_weak</STRONG> (Thumb, 752 bytes, Stack size unknown bytes, ll_routines.o(.text.LL_init_ucfg_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_init_ucfg_weak &rArr; BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetDefaultPALevel
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_clear
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_init_ucfg
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_hal_cntxt_init_ucfg
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_init_ucfg
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_init_ucfg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_init_ucfg
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_init_ucfg
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_mem_allocate_ucfg
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_isoal_mem_alloc_ucfg
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cig_cmn_mem_alloc_ucfg
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_big_sync_mem_alloc_ucfg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_big_brc_mem_alloc_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_iso_cmn_mem_alloc_ucfg
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_wr_mem_allocate_ucfg
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_past_mem_allocate_ucfg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_mem_allocate_ucfg
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_mem_allocate_ucfg
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_mem_allocate_ucfg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_mem_allocate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_mem_allocate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_wl_mem_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[44c]"></a>LL_link_calc_packetlength</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_link_manager.o(.text.LL_link_calc_packetlength))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[44f]"></a>LL_link_calculate_window_widening_from_ppm</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_link_manager.o(.text.LL_link_calculate_window_widening_from_ppm))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[44d]"></a>LL_link_get_own_sca_ppm</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_link_manager.o(.text.LL_link_get_own_sca_ppm))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[449]"></a>LL_past_default_params_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.LL_past_default_params_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[588]"></a>LL_past_default_params_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.LL_past_default_params_ucfg_weak), UNUSED)

<P><STRONG><a name="[337]"></a>LL_past_initialize_connect_context_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.LL_past_initialize_connect_context_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[589]"></a>LL_past_initialize_connect_context_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.LL_past_initialize_connect_context_ucfg_weak), UNUSED)

<P><STRONG><a name="[433]"></a>LL_phy_upd_evt_pending_check_isr_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_upd_evt_pending_check_isr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[58a]"></a>LL_phy_upd_evt_pending_check_isr_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_upd_evt_pending_check_isr_ucfg_weak), UNUSED)

<P><STRONG><a name="[42d]"></a>LL_phy_upd_pending_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_upd_pending_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[58b]"></a>LL_phy_upd_pending_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_upd_pending_ucfg_weak), UNUSED)

<P><STRONG><a name="[444]"></a>LL_phy_update_init_per_st_data_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_update_init_per_st_data_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[58c]"></a>LL_phy_update_init_per_st_data_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_update_init_per_st_data_ucfg_weak), UNUSED)

<P><STRONG><a name="[45a]"></a>LL_phy_update_init_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_update_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[58d]"></a>LL_phy_update_init_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(.text.LL_phy_update_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[481]"></a>LL_sched_anchorstretch</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_anchorstretch))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
</UL>

<P><STRONG><a name="[1c7]"></a>LL_sched_check_and_call_sched</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_check_and_call_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_disconnect_link_from_cpf
</UL>

<P><STRONG><a name="[43b]"></a>LL_sched_delete_taskslot</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_delete_taskslot))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_disconnect_link_from_cpf
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[5d]"></a>LL_sched_enable_taskslot</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_enable_taskslot))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[124]"></a>LL_sched_engine</STRONG> (Thumb, 880 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobWriteSlot
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobEnableBlue
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobDisableBlue
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_ClearSemareq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetRadioCloseTimeout
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetRadioTimerValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_timer_error_ucfg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_timer_stop_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[12f]"></a>LL_sched_engine_return_actual_scheduler_margin</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_engine_return_actual_scheduler_margin))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_guard_time_for_close_conn_event
</UL>

<P><STRONG><a name="[398]"></a>LL_sched_init</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_init))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[31b]"></a>LL_sched_is_scheduler_call_pending</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_is_scheduler_call_pending))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
</UL>

<P><STRONG><a name="[1c3]"></a>LL_sched_release_taskslot</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_release_taskslot))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks
</UL>

<P><STRONG><a name="[1c1]"></a>LL_sched_reserve_taskslot</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_reserve_taskslot))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks
</UL>

<P><STRONG><a name="[135]"></a>LL_sched_set_anchor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_anchor))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[1c6]"></a>LL_sched_set_cancel_request</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_cancel_request))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
</UL>

<P><STRONG><a name="[5c]"></a>LL_sched_set_params</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_params))
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[42a]"></a>LL_sched_set_per_state</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_per_state))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_cancel_slot
</UL>

<P><STRONG><a name="[116]"></a>LL_sched_set_priority</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_priority))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[47f]"></a>LL_sched_set_taskslot_length_anchor</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_set_taskslot_length_anchor))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[130]"></a>LL_sched_time_t1_ge_t2</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_scheduler.o(.text.LL_sched_time_t1_ge_t2))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[43]"></a>LL_version_exchange</STRONG> (Thumb, 398 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(.text.LL_version_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LL_version_exchange &rArr; hci_read_remote_version_information_complete_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_version_exchange_cached
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(.text.LL_cpe_init)
</UL>
<P><STRONG><a name="[101]"></a>MBM_get</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, mbm.o(.text.MBM_get))
<BR><BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
</UL>

<P><STRONG><a name="[103]"></a>MBM_get_available_mem_buffers</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, mbm.o(.text.MBM_get_available_mem_buffers))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get_available_mem_buffers
</UL>

<P><STRONG><a name="[3a9]"></a>MBM_init</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, mbm.o(.text.MBM_init))
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_init_ucfg
</UL>

<P><STRONG><a name="[3ab]"></a>MBM_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.MBM_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MBM_init_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[10d]"></a>MBM_release</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, mbm.o(.text.MBM_release))
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_count
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release_balance
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>

<P><STRONG><a name="[fd]"></a>MBM_reserve</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, mbm.o(.text.MBM_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = MBM_reserve &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_move_class
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_connection
</UL>

<P><STRONG><a name="[10f]"></a>MBM_resize</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, mbm.o(.text.MBM_resize))
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_size
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_get
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_append
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release_balance
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_resize
</UL>

<P><STRONG><a name="[ff]"></a>MBM_unreserve</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, mbm.o(.text.MBM_unreserve))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_move_class
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_disconnection
</UL>

<P><STRONG><a name="[3b2]"></a>MX_APPE_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = MX_APPE_Init &rArr; APP_BLE_Init &rArr; BLE_Init &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_RESET
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_SET
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b5]"></a>MX_APPE_Process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run &rArr; SEQ_BitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b7]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b8]"></a>MX_GPIO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_GPIO_Init &rArr; LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_DEBUG_GPIO_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ba]"></a>MX_PKA_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pka.o(.text.MX_PKA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_PKA_Init &rArr; HAL_PKA_Init &rArr; HAL_PKA_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PKA_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bb]"></a>MX_RADIO_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, radio.o(.text.MX_RADIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_RADIO_Init &rArr; HAL_RADIO_Init &rArr; HAL_RADIO_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bc]"></a>MX_RADIO_TIMER_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, radio_timer.o(.text.MX_RADIO_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_RADIO_TIMER_Init &rArr; HAL_RADIO_TIMER_Init &rArr; _start_timer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bd]"></a>MX_RTC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>MY_SVC_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, my_svc_app.o(.text.MY_SVC_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[13f]"></a>MY_SVC_APP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, my_svc_app.o(.text.MY_SVC_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MY_SVC_APP_Init &rArr; MY_SVC_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[3be]"></a>MY_SVC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, my_svc.o(.text.MY_SVC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MY_SVC_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_RegisterGattEvtHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_APP_Init
</UL>

<P><STRONG><a name="[2e9]"></a>Mem_Buff_append</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_append))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_append
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_append
</UL>

<P><STRONG><a name="[43d]"></a>Mem_Buff_block_copy</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_block_copy))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_copy_tx_data_packet
</UL>

<P><STRONG><a name="[475]"></a>Mem_Buff_block_write</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_block_write))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[fb]"></a>Mem_Buff_cmp</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_cmp &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_cmp
</UL>

<P><STRONG><a name="[3a8]"></a>Mem_Buff_get</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_get))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
</UL>

<P><STRONG><a name="[109]"></a>Mem_Buff_get_buff_off</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_get_buff_off))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
</UL>

<P><STRONG><a name="[3ac]"></a>Mem_Buff_get_chain_count</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_get_chain_count))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release
</UL>

<P><STRONG><a name="[3b0]"></a>Mem_Buff_get_chain_size</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_get_chain_size))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
</UL>

<P><STRONG><a name="[3aa]"></a>Mem_Buff_init</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_init))
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_init
</UL>

<P><STRONG><a name="[107]"></a>Mem_Buff_read</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>

<P><STRONG><a name="[3ae]"></a>Mem_Buff_release</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_release))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_init
</UL>

<P><STRONG><a name="[3b1]"></a>Mem_Buff_resize</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_resize))
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
</UL>

<P><STRONG><a name="[110]"></a>Mem_Buff_write</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, mem_buff.o(.text.Mem_Buff_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_write &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
</UL>

<P><STRONG><a name="[13c]"></a>ModulesInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(.text.ModulesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModulesInit &rArr; BLENVM_Init &rArr; NVMDB_Init &rArr; NVMDB_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLENVM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>NVMDB_AppendRecord</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, nvm_db.o(.text.NVMDB_AppendRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NVMDB_AppendRecord &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
</UL>

<P><STRONG><a name="[3c4]"></a>NVMDB_CleanDB</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nvm_db.o(.text.NVMDB_CleanDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2276<LI>Call Chain = NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDBType
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
</UL>

<P><STRONG><a name="[16c]"></a>NVMDB_CompareCurrentRecord</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nvm_db.o(.text.NVMDB_CompareCurrentRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVMDB_CompareCurrentRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmCompare
</UL>

<P><STRONG><a name="[16e]"></a>NVMDB_DeleteRecord</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nvm_db.o(.text.NVMDB_DeleteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NVMDB_DeleteRecord &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
</UL>

<P><STRONG><a name="[16f]"></a>NVMDB_Erase</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nvm_db.o(.text.NVMDB_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 2292<LI>Call Chain = NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDBType
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
</UL>

<P><STRONG><a name="[153]"></a>NVMDB_HandleInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nvm_db.o(.text.NVMDB_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLENVM_Init
</UL>

<P><STRONG><a name="[152]"></a>NVMDB_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nvm_db.o(.text.NVMDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVMDB_Init &rArr; NVMDB_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLENVM_Init
</UL>

<P><STRONG><a name="[171]"></a>NVMDB_ReadCurrentRecord</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nvm_db.o(.text.NVMDB_ReadCurrentRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NVMDB_ReadCurrentRecord &rArr; ReadCurrentRecordNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>

<P><STRONG><a name="[172]"></a>NVMDB_ReadNextRecord</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nvm_db.o(.text.NVMDB_ReadNextRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>

<P><STRONG><a name="[3c6]"></a>NVMDB_Tick</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nvm_db.o(.text.NVMDB_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 2292<LI>Call Chain = NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Process
</UL>

<P><STRONG><a name="[25]"></a>NVM_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ble.o(.text.NVM_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300<LI>Call Chain = NVM_Process &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[2a8]"></a>NVM_Process_Schedule</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.NVM_Process_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVM_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxCallback
</UL>

<P><STRONG><a name="[2c8]"></a>PKAMGR_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pka_manager.o(.text.PKAMGR_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[2cd]"></a>PKAMGR_Lock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pka_manager.o(.text.PKAMGR_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[176]"></a>PKAMGR_StartP256PublicKeyGeneration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pka_manager.o(.text.PKAMGR_StartP256PublicKeyGeneration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartP256Key
</UL>

<P><STRONG><a name="[2d0]"></a>PKAMGR_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pka_manager.o(.text.PKAMGR_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_StartP256DHkeyGeneration
</UL>

<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[3c7]"></a>PeriphCommonClock_Config</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, main.o(.text.PeriphCommonClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PeriphCommonClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>RADIO_GetDefaultPALevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_utils.o(.text.RADIO_GetDefaultPALevel))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetDefaultPALevel
</UL>

<P><STRONG><a name="[163]"></a>RADIO_GetMaxPALevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_utils.o(.text.RADIO_GetMaxPALevel))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetMaxPALevel
</UL>

<P><STRONG><a name="[17c]"></a>RADIO_SetHighPower</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, radio_utils.o(.text.RADIO_SetHighPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RADIO_SetHighPower
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
</UL>

<P><STRONG><a name="[18]"></a>RADIO_TIMER_CPU_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.RADIO_TIMER_CPU_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RADIO_TIMER_CPU_WKUP_IRQHandler &rArr; HAL_RADIO_TIMER_CPU_WKUP_IRQHandler &rArr; HAL_RADIO_TIMER_CpuWakeUpCallback &rArr; VTimer_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CPU_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RADIO_TIMER_ERROR_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.RADIO_TIMER_ERROR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RADIO_TIMER_ERROR_IRQHandler &rArr; HAL_RADIO_TIMER_ERROR_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_ERROR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RADIO_TXRX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.RADIO_TXRX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RADIO_TXRX_IRQHandler &rArr; HAL_RADIO_TXRX_IRQHandler &rArr; HAL_RADIO_TxRxCallback &rArr; BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RADIO_TXRX_SEQ_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.RADIO_TXRX_SEQ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RADIO_TXRX_SEQ_IRQHandler &rArr; HAL_RADIO_TXRX_SEQ_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TXRX_SEQ_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[2af]"></a>RTC_EnterInitMode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32wb0x_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2b0]"></a>RTC_ExitInitMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32wb0x_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[291]"></a>RT_DEBUG_GPIO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_debug.o(.text.RT_DEBUG_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[272]"></a>SDB_sap_read_peer_bonded_gatt_client_data</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sdb.o(.text.SDB_sap_read_peer_bonded_gatt_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = SDB_sap_read_peer_bonded_gatt_client_data &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_full_current_record
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[26e]"></a>SDB_sap_write_peer_bonded_gatt_client_data</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, sdb.o(.text.SDB_sap_write_peer_bonded_gatt_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmCompare
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_update_record
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_discard_current_record
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
</UL>

<P><STRONG><a name="[3d5]"></a>SEQ_BitPosition</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32_seq.o(.text.SEQ_BitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>

<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wb0x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[3d1]"></a>SystemClock_Config</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2aa]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_stm32wb0x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, system_stm32wb0x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcontextRestore
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32wb0x_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb09.o(RESET)
</UL>
<P><STRONG><a name="[3d7]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[3d8]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[3d6]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[23]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_RegTask &rArr; SEQ_BitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[3b6]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UTIL_SEQ_Run &rArr; SEQ_BitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
</UL>

<P><STRONG><a name="[3fe]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_cmd_resp_release
</UL>

<P><STRONG><a name="[189]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Process_Schedule
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTimer_Process_Schedule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process_Schedule
</UL>

<P><STRONG><a name="[275]"></a>UUID_cmp</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, uuid.o(.text.UUID_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
</UL>

<P><STRONG><a name="[27b]"></a>UUID_cmp_128bits</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, uuid.o(.text.UUID_cmp_128bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp_128bits &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
</UL>

<P><STRONG><a name="[240]"></a>UUID_get_value_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, uuid.o(.text.UUID_get_value_p))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[276]"></a>UUID_write_to_flat</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, uuid.o(.text.UUID_write_to_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = UUID_write_to_flat &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[24]"></a>VTimer_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ble.o(.text.VTimer_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VTimer_Process &rArr; HAL_RADIO_TIMER_Tick &rArr; _start_timer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[296]"></a>VTimer_Process_Schedule</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.VTimer_Process_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VTimer_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TxRxCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_CpuWakeUpCallback
</UL>

<P><STRONG><a name="[1a2]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, bluenrg_main_func.o(.text._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; BLEPLAT_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_ClearRadioTimerValue &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobDisableBlue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_ClearInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetPartInfo
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init_ucfg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init_ucfg
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init_ucfg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_init_ucfg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_init_ucfg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_supp_csr_ucfg
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chc_csr_ucfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_wr_csr_ucfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_csr_ucfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_controller_privacy_csr_ucfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
</UL>

<P><STRONG><a name="[237]"></a>aci_att_exchange_mtu_resp_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_att_exchange_mtu_resp_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_att_exchange_mtu_resp_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
</UL>

<P><STRONG><a name="[239]"></a>aci_att_srv_exec_write_req_event_push_noinline</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_att_srv_exec_write_req_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_exec_write_req_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
</UL>

<P><STRONG><a name="[4c]"></a>aci_att_srv_prepare_write_req_event_cb</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_att_srv_prepare_write_req_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_gatt.o(.text.aci_att_srv_prepare_write_req_event_push_noinline)
</UL>
<P><STRONG><a name="[3de]"></a>aci_att_srv_prepare_write_req_event_copy</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events.o(.text.aci_att_srv_prepare_write_req_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event_copy &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
</UL>

<P><STRONG><a name="[247]"></a>aci_att_srv_prepare_write_req_event_push_noinline</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_att_srv_prepare_write_req_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
</UL>

<P><STRONG><a name="[142]"></a>aci_event_fifo_push</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(.text.aci_event_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_notify_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event_push_noinline
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event_push_noinline
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_push_noinline
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_push_noinline
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push_noinline
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_push_noinline
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_push_noinline
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_push_noinline
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_discoverability
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_reserve
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push_noinline
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_csa_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_adv_set_terminated_event
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_cb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push_noinline
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push_noinline
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_push_noinline
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_push_noinline
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_push_noinline
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_key_generation_method_selection
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_hndl_pairing_response_mode_through_event
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_features_complete_event_push_noinline
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
</UL>

<P><STRONG><a name="[141]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, events.o(.text.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event_push_noinline
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event_push_noinline
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_push_noinline
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_push_noinline
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push_noinline
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_push_noinline
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_push_noinline
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_push_noinline
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_discoverability
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_reserve
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push_noinline
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_csa_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_adv_set_terminated_event
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_cb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push_noinline
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push_noinline
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_push_noinline
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_push_noinline
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_push_noinline
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_key_generation_method_selection
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_hndl_pairing_response_mode_through_event
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_features_complete_event_push_noinline
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
</UL>

<P><STRONG><a name="[18f]"></a>aci_gap_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_gap.o(.text.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[150]"></a>aci_gap_numeric_comparison_value_confirm_yesno</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gap_numeric_comparison_value_confirm_yesno))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno_api
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[3e0]"></a>aci_gap_numeric_comparison_value_confirm_yesno_api</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_gap_security.o(.text.aci_gap_numeric_comparison_value_confirm_yesno_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_scp_numeric_comparison_response
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
</UL>

<P><STRONG><a name="[3e3]"></a>aci_gap_pairing_complete_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_smp.o(.text.aci_gap_pairing_complete_event_push_noinline))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_protocol_timeout_cb
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[14f]"></a>aci_gap_passkey_resp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gap_passkey_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_passkey_resp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_passkey_resp_api
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[3e4]"></a>aci_gap_passkey_resp_api</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, aci_gap_security.o(.text.aci_gap_passkey_resp_api))
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_passkey_response
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_passkey_resp
</UL>

<P><STRONG><a name="[3e6]"></a>aci_gap_proc_complete_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(.text.aci_gap_proc_complete_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_proc_complete_event_copy &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
</UL>

<P><STRONG><a name="[1f5]"></a>aci_gap_proc_complete_event_wrapper</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, gap_common.o(.text.aci_gap_proc_complete_event_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gap_proc_complete_event_wrapper &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_copy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
</UL>

<P><STRONG><a name="[190]"></a>aci_gap_profile_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gap_profile.o(.text.aci_gap_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aci_gap_profile_init &rArr; Gap_profile_set_dev_name &rArr; Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[193]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_io_capability
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability_api
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[3e8]"></a>aci_gap_set_io_capability_api</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_gap_security.o(.text.aci_gap_set_io_capability_api))
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_set_io_capabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
</UL>

<P><STRONG><a name="[194]"></a>aci_gap_set_security_requirements</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ble_stack_user_cfg.o(.text.aci_gap_set_security_requirements))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_security_requirements &rArr; aci_gap_set_security_requirements_api &rArr; smp_sap_aci_set_authentication_req &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements_api
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[3ea]"></a>aci_gap_set_security_requirements_api</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, aci_gap_security.o(.text.aci_gap_set_security_requirements_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_security_requirements_api &rArr; smp_sap_aci_set_authentication_req &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_set_authentication_req
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_identity_address_type
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements
</UL>

<P><STRONG><a name="[4d]"></a>aci_gatt_clt_indication_event_cb</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_indication_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_indication_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_gatt.o(.text.aci_gatt_clt_indication_event_push_noinline)
</UL>
<P><STRONG><a name="[3ed]"></a>aci_gatt_clt_indication_event_copy</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, events.o(.text.aci_gatt_clt_indication_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_indication_event_copy &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
</UL>

<P><STRONG><a name="[25c]"></a>aci_gatt_clt_indication_event_push_noinline</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_indication_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_indication_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
</UL>

<P><STRONG><a name="[4e]"></a>aci_gatt_clt_multi_notification_int_event_cb</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_multi_notification_int_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_multi_notification_int_event_cb &rArr; aci_gatt_clt_notification_event_notify &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_gatt.o(.text.aci_gatt_clt_multi_notification_int_event_push_noinline)
</UL>
<P><STRONG><a name="[3ee]"></a>aci_gatt_clt_multi_notification_int_event_copy</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, events.o(.text.aci_gatt_clt_multi_notification_int_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_multi_notification_int_event_copy &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_cb
</UL>

<P><STRONG><a name="[25b]"></a>aci_gatt_clt_multi_notification_int_event_push_noinline</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_multi_notification_int_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_multi_notification_int_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
</UL>

<P><STRONG><a name="[4f]"></a>aci_gatt_clt_notification_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_notification_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_notification_event_cb &rArr; aci_gatt_clt_notification_event_notify &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_gatt.o(.text.aci_gatt_clt_notification_event_push_noinline)
</UL>
<P><STRONG><a name="[3f0]"></a>aci_gatt_clt_notification_event_copy</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, events.o(.text.aci_gatt_clt_notification_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_notification_event_copy &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[3ef]"></a>aci_gatt_clt_notification_event_notify</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_notification_event_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_notification_event_notify &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_multi_notification_int_event_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[25a]"></a>aci_gatt_clt_notification_event_push_noinline</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_clt_notification_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_clt_notification_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
</UL>

<P><STRONG><a name="[213]"></a>aci_gatt_proc_timeout_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_proc_timeout_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_proc_timeout_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
</UL>

<P><STRONG><a name="[3e7]"></a>aci_gatt_srv_add_char</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gatt_srv_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_char &rArr; aci_gatt_srv_add_char_api &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char_api
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_profile_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
</UL>

<P><STRONG><a name="[3f1]"></a>aci_gatt_srv_add_char_api</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(.text.aci_gatt_srv_add_char_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_char_api &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char
</UL>

<P><STRONG><a name="[3c0]"></a>aci_gatt_srv_add_service</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gatt_srv_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_service &rArr; aci_gatt_srv_add_service_api &rArr; GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service_api
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_profile_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
</UL>

<P><STRONG><a name="[3f2]"></a>aci_gatt_srv_add_service_api</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(.text.aci_gatt_srv_add_service_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_service_api &rArr; GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
</UL>

<P><STRONG><a name="[266]"></a>aci_gatt_srv_attribute_modified_event_push_noinline</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_srv_attribute_modified_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_attribute_modified_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[233]"></a>aci_gatt_srv_confirmation_event_push_noinline</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_srv_confirmation_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_confirmation_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
</UL>

<P><STRONG><a name="[27d]"></a>aci_gatt_srv_get_char_decl_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gatt_srv_get_char_decl_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_get_char_decl_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle_api
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_profile_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_appearance
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
</UL>

<P><STRONG><a name="[3f3]"></a>aci_gatt_srv_get_char_decl_handle_api</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(.text.aci_gatt_srv_get_char_decl_handle_api))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_char_decl_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
</UL>

<P><STRONG><a name="[3c1]"></a>aci_gatt_srv_get_service_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.aci_gatt_srv_get_service_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_get_service_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle_api
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_profile_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_profile_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_Init
</UL>

<P><STRONG><a name="[3f4]"></a>aci_gatt_srv_get_service_handle_api</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(.text.aci_gatt_srv_get_service_handle_api))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_service_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
</UL>

<P><STRONG><a name="[18e]"></a>aci_gatt_srv_profile_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gatt_profile.o(.text.aci_gatt_srv_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_profile_init &rArr; aci_gatt_srv_add_char &rArr; aci_gatt_srv_add_char_api &rArr; GAT_srv_add_characteristic &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[251]"></a>aci_gatt_srv_read_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_srv_read_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
</UL>

<P><STRONG><a name="[50]"></a>aci_gatt_srv_write_event_cb</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_srv_write_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_gatt.o(.text.aci_gatt_srv_write_event_push_noinline)
</UL>
<P><STRONG><a name="[3f5]"></a>aci_gatt_srv_write_event_copy</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, events.o(.text.aci_gatt_srv_write_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event_copy &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
</UL>

<P><STRONG><a name="[258]"></a>aci_gatt_srv_write_event_push_noinline</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_srv_write_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[221]"></a>aci_gatt_tx_pool_available_event_push_noinline</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, events_gatt.o(.text.aci_gatt_tx_pool_available_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_tx_pool_available_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
</UL>

<P><STRONG><a name="[375]"></a>aci_hal_adv_scan_resp_data_update_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_llc.o(.text.aci_hal_adv_scan_resp_data_update_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_hal_adv_scan_resp_data_update_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchbackupdata_data_struc
</UL>

<P><STRONG><a name="[208]"></a>aci_hal_fw_error_event_push_noinline</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, events_llc.o(.text.aci_hal_fw_error_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = aci_hal_fw_error_event_push_noinline &rArr;  aci_event_fifo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_add_bonding_record
</UL>

<P><STRONG><a name="[18d]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_hal.o(.text.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_tx_power_level &rArr; HAL_Set_TX_Power_Level &rArr; BLEPLAT_SetHighPower &rArr; RADIO_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[18c]"></a>aci_hal_write_config_data</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_hal.o(.text.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_hal_write_config_data &rArr; HAL_Write_ConfigData &rArr; smp_sap_scp_force_debug_key_usage_ucfg &rArr; smp_sap_scp_force_debug_key_usage &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[2d9]"></a>aci_l2cap_command_reject_event_copy</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, events.o(.text.aci_l2cap_command_reject_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_command_reject_event_copy &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2db]"></a>aci_l2cap_connection_update_req_event_copy</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, events.o(.text.aci_l2cap_connection_update_req_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[3a]"></a>aci_l2cap_proc_timeout_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_l2cap.o(.text.aci_l2cap_proc_timeout_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_proc_timeout_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(.text.L2C_timeout_handler_signalling)
</UL>
<P><STRONG><a name="[3f6]"></a>aci_l2cap_proc_timeout_event_copy</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events.o(.text.aci_l2cap_proc_timeout_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[3f7]"></a>addr8_list_add</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, addr8_list.o(.text.addr8_list_add))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_add_address
</UL>

<P><STRONG><a name="[39e]"></a>addr8_list_clear</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, addr8_list.o(.text.addr8_list_clear))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_reset
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[3f9]"></a>addr8_list_remove_by_addr</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, addr8_list.o(.text.addr8_list_remove_by_addr))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_remove_address
</UL>

<P><STRONG><a name="[3f8]"></a>addr8_list_search</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, addr8_list.o(.text.addr8_list_search))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_search_address
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_remove_by_addr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_add
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_check_sreq_or_creq_tx_addr_res_off
</UL>

<P><STRONG><a name="[309]"></a>bis_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_api.o(.text.bis_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
</UL>

<P><STRONG><a name="[58e]"></a>bis_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_api.o(.text.bis_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[39c]"></a>ble_HAL_Init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, aci_hal.o(.text.ble_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_HAL_Init &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[47]"></a>char_copy</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, stacklib_utils.o(.text.char_copy))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpf_encryption.o(.text.LL_encryption)
</UL>
<P><STRONG><a name="[1a1]"></a>chc_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_chan_class.o(.text.chc_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[58f]"></a>chc_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_chan_class.o(.text.chc_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[308]"></a>cis_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_api.o(.text.cis_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[590]"></a>cis_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_api.o(.text.cis_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[2c4]"></a>configBitmapSet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, aci_hal.o(.text.configBitmapSet))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[3fa]"></a>conn_supp_csr</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_scan_connect.o(.text.conn_supp_csr))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_supp_csr_ucfg
</UL>

<P><STRONG><a name="[197]"></a>conn_supp_csr_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.conn_supp_csr_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = conn_supp_csr_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_supp_csr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[60]"></a>copy_swap_buffer</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_utils.o(.text.copy_swap_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_crypto_toolbox.o(.text.smp_crt_g2_generate_num_comp_val)
</UL>
<P><STRONG><a name="[3da]"></a>csmem_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, mem_alloc.o(.text.csmem_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[27]"></a>csmem_mem_0_assign</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, mem_alloc.o(.text.csmem_mem_0_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_mem_allocate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_mem_allocate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_wl_mem_allocate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>
<BR>[Address Reference Count : 4]<UL><LI> events.o(.text.Events_Process_init)
<LI> ll_routines.o(.text.LL_init_ucfg_weak)
<LI> smp_main.o(.text.smp_init)
<LI> llc_connect_mem_alloc.o(.text.llc_conn_mem_allocate)
</UL>
<P><STRONG><a name="[4a]"></a>csmem_mem_assign</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, mem_alloc.o(.text.csmem_mem_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_mem_allocate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbm.o(.text.MBM_init)
</UL>
<P><STRONG><a name="[21c]"></a>cst_sharedCallback</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, stacklib_timers.o(.text.cst_sharedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timeout_cb_wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback_wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_timers_callback_wrapper
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_timers_callback_wrapper
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_cb_wrapper
</UL>

<P><STRONG><a name="[19f]"></a>cte_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_cte.o(.text.cte_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
</UL>

<P><STRONG><a name="[591]"></a>cte_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_cte.o(.text.cte_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[198]"></a>data_length_extension_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_length_update.o(.text.data_length_extension_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[592]"></a>data_length_extension_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_length_update.o(.text.data_length_extension_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[199]"></a>ext_adv_scan_enabled_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ext_adv_scan_enabled_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_default_le_event_mask
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_stop_discoverability
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_extended_adv_scan_supported
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
</UL>

<P><STRONG><a name="[593]"></a>ext_adv_scan_enabled_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.ext_adv_scan_enabled_ucfg_weak), UNUSED)

<P><STRONG><a name="[1e5]"></a>gap_extended_adv_scan_supported</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(.text.gap_extended_adv_scan_supported))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_adv_status
</UL>

<P><STRONG><a name="[53]"></a>gap_timers_callback</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap_common.o(.text.gap_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gap_timers_callback &rArr; GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; GAP_set_advertising_enable_ucfg &rArr; GAP_set_legacy_advertising_enable &rArr; GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb_ucfg
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_common.o(.text.gap_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[28]"></a>gap_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gap_common.o(.text.gap_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = gap_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_common.o(.text.GAP_init_context)
</UL>
<P><STRONG><a name="[46b]"></a>get_rf_rx_path_compensation_db</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_routines.o(.text.get_rf_rx_path_compensation_db))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[1cc]"></a>hal_radio_activity_state_cb_check</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, aci_hal.o(.text.hal_radio_activity_state_cb_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hal_radio_activity_state_cb_check &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[1ce]"></a>hal_radio_activity_state_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_hal.o(.text.hal_radio_activity_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[400]"></a>hal_read_radio_activity_state</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, aci_hal.o(.text.hal_read_radio_activity_state))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_cb_check
</UL>

<P><STRONG><a name="[3fd]"></a>hci_aci_event_notify_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events.o(.text.hci_aci_event_notify_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_notify_cb
</UL>

<P><STRONG><a name="[401]"></a>hci_acl_data_ind_event_int_cb</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, acl.o(.text.hci_acl_data_ind_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_ind_event_int_cb &rArr; L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[84]"></a>hci_acl_data_ind_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_acl_data_ind_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_ind_event_int_cb_ucfg &rArr; hci_acl_data_ind_event_int_cb &rArr; L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[403]"></a>hci_acl_data_tx_cmpl_event_int_cb</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, acl.o(.text.hci_acl_data_tx_cmpl_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_tx_cmpl_event_int_cb &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[83]"></a>hci_acl_data_tx_cmpl_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_acl_data_tx_cmpl_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_tx_cmpl_event_int_cb_ucfg &rArr; hci_acl_data_tx_cmpl_event_int_cb &rArr; L2C_mux_acl_packet &rArr; smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[132]"></a>hci_check_legacy_ext_flag</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, hci_common.o(.text.hci_check_legacy_ext_flag))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[405]"></a>hci_disconnection_complete_event_int_cb</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, events.o(.text.hci_disconnection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event_int_cb &rArr; GAT_att_cmn_disconnection &rArr; GAT_att_srv_bearer_close &rArr; GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_disconnection_complete_evt_hndl
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_disconnection
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[88]"></a>hci_disconnection_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_disconnection_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event_int_cb_ucfg &rArr; hci_disconnection_complete_event_int_cb &rArr; GAT_att_cmn_disconnection &rArr; GAT_att_srv_bearer_close &rArr; GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[409]"></a>hci_encryption_change_event_int_cb</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, events.o(.text.hci_encryption_change_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hci_encryption_change_event_int_cb &rArr; smp_sap_hci_encryption_change_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[89]"></a>hci_encryption_change_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_encryption_change_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hci_encryption_change_event_int_cb_ucfg &rArr; hci_encryption_change_event_int_cb &rArr; smp_sap_hci_encryption_change_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[40b]"></a>hci_encryption_key_refresh_complete_event_int_cb</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, events.o(.text.hci_encryption_key_refresh_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hci_encryption_key_refresh_complete_event_int_cb &rArr; smp_sap_hci_encryption_change_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[8a]"></a>hci_encryption_key_refresh_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_encryption_key_refresh_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hci_encryption_key_refresh_complete_event_int_cb_ucfg &rArr; hci_encryption_key_refresh_complete_event_int_cb &rArr; smp_sap_hci_encryption_change_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[3fb]"></a>hci_event_notify_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events.o(.text.hci_event_notify_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_notify_cb
</UL>

<P><STRONG><a name="[41d]"></a>hci_get_set_legacy_ext_flag</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hci_common.o(.text.hci_get_set_legacy_ext_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>

<P><STRONG><a name="[8c]"></a>hci_le_advertising_report_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_advertising_report_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[594]"></a>hci_le_advertising_report_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_advertising_report_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[94]"></a>hci_le_advertising_set_terminated_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_advertising_set_terminated_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[595]"></a>hci_le_advertising_set_terminated_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_advertising_set_terminated_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[40c]"></a>hci_le_connection_complete_event_int_cb</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, events.o(.text.hci_le_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_int_cb &rArr; GAP_hci_le_connection_complete_evt_hndl &rArr; GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_le_connection_complete_evt_hndl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_connection_complete_evt_hndl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[8b]"></a>hci_le_connection_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_le_connection_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_int_cb_ucfg &rArr; hci_le_connection_complete_event_int_cb &rArr; GAP_hci_le_connection_complete_evt_hndl &rArr; GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[91]"></a>hci_le_directed_advertising_report_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_directed_advertising_report_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[596]"></a>hci_le_directed_advertising_report_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_directed_advertising_report_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[40f]"></a>hci_le_encrypt</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_s1_generate_stk
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_calculate_hash
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>

<P><STRONG><a name="[410]"></a>hci_le_enhanced_connection_complete_event_int_cb</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, events.o(.text.hci_le_enhanced_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_int_cb &rArr; GAP_hci_le_connection_complete_evt_hndl &rArr; GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_le_connection_complete_evt_hndl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[90]"></a>hci_le_enhanced_connection_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_le_enhanced_connection_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_int_cb_ucfg &rArr; hci_le_enhanced_connection_complete_event_int_cb &rArr; GAP_hci_le_connection_complete_evt_hndl &rArr; GAP_peripheral_connection_complete_handler_ucfg &rArr; GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[95]"></a>hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[597]"></a>hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[92]"></a>hci_le_extended_advertising_report_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_extended_advertising_report_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[598]"></a>hci_le_extended_advertising_report_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_extended_advertising_report_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[412]"></a>hci_le_generate_dhkey_api</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_generate_dhkey_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_api &rArr; BLEPLAT_PkaStartDHkey &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartDHkey
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_receive
</UL>

<P><STRONG><a name="[54]"></a>hci_le_generate_dhkey_cb</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_generate_dhkey_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_cb &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_encryption_pka.o(.text.hci_le_generate_dhkey_api)
</UL>
<P><STRONG><a name="[413]"></a>hci_le_generate_dhkey_complete_event_int_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(.text.hci_le_generate_dhkey_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_complete_event_int_cb &rArr; smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_generate_dhkey_complete_evt_hndl &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[8f]"></a>hci_le_generate_dhkey_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_le_generate_dhkey_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_complete_event_int_cb_ucfg &rArr; hci_le_generate_dhkey_complete_event_int_cb &rArr; smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_generate_dhkey_complete_evt_hndl &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[415]"></a>hci_le_long_term_key_request_event_int_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(.text.hci_le_long_term_key_request_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = hci_le_long_term_key_request_event_int_cb &rArr; smp_sap_hci_le_long_term_key_request_evt_hndl &rArr; smp_dep_sdb_find_matching_ltk_read_record &rArr; sdb_sap_read_security_record_matching &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[8d]"></a>hci_le_long_term_key_request_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_le_long_term_key_request_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = hci_le_long_term_key_request_event_int_cb_ucfg &rArr; hci_le_long_term_key_request_event_int_cb &rArr; smp_sap_hci_le_long_term_key_request_evt_hndl &rArr; smp_dep_sdb_find_matching_ltk_read_record &rArr; sdb_sap_read_security_record_matching &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[417]"></a>hci_le_long_term_key_request_negative_reply_api</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_long_term_key_request_negative_reply_api))
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
</UL>

<P><STRONG><a name="[419]"></a>hci_le_long_term_key_request_reply_api</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_long_term_key_request_reply_api))
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
</UL>

<P><STRONG><a name="[41a]"></a>hci_le_read_local_p256_public_key_api</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_read_local_p256_public_key_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGetRandom32
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartP256Key
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
</UL>

<P><STRONG><a name="[55]"></a>hci_le_read_local_p256_public_key_cb</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_le_read_local_p256_public_key_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_cb &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_encryption_pka.o(.text.hci_le_read_local_p256_public_key_api)
</UL>
<P><STRONG><a name="[41b]"></a>hci_le_read_local_p256_public_key_complete_event_int_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(.text.hci_le_read_local_p256_public_key_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_complete_event_int_cb &rArr; smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg
</UL>

<P><STRONG><a name="[8e]"></a>hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg &rArr; hci_le_read_local_p256_public_key_complete_event_int_cb &rArr; smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_int_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[380]"></a>hci_le_read_remote_features_complete_event_push_noinline</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, events_hci.o(.text.hci_le_read_remote_features_complete_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_read_remote_features_complete_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[93]"></a>hci_le_scan_timeout_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_scan_timeout_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[599]"></a>hci_le_scan_timeout_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events.o(.text.hci_le_scan_timeout_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[1fa]"></a>hci_le_set_advertising_enable</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, hci_advertising.o(.text.hci_le_set_advertising_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hci_le_set_advertising_enable &rArr; LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_set_legacy_ext_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_legacy
</UL>

<P><STRONG><a name="[1d8]"></a>hci_le_set_event_mask</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_common.o(.text.hci_le_set_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[1f8]"></a>hci_le_set_random_address</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, hci_common.o(.text.hci_le_set_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_set_random_address &rArr; LL_Set_Advertising_Set_Random_Address &rArr; LL_LE_Set_Advertising_Parameters_Default &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
</UL>

<P><STRONG><a name="[56]"></a>hci_number_of_completed_packets_event_cb</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, events_hci.o(.text.hci_number_of_completed_packets_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_number_of_completed_packets_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_hci.o(.text.hci_number_of_completed_packets_event_push_noinline)
</UL>
<P><STRONG><a name="[41e]"></a>hci_number_of_completed_packets_event_copy</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events.o(.text.hci_number_of_completed_packets_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[41f]"></a>hci_number_of_completed_packets_event_push_noinline</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, events_hci.o(.text.hci_number_of_completed_packets_event_push_noinline))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_number_of_completed_packets_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
</UL>

<P><STRONG><a name="[420]"></a>hci_read_remote_version_information_complete_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(.text.hci_read_remote_version_information_complete_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
</UL>

<P><STRONG><a name="[402]"></a>hci_rx_acl_data</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, hci_acl_data.o(.text.hci_rx_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_rx_acl_data &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[421]"></a>hci_rx_acl_data_event_copy</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, events.o(.text.hci_rx_acl_data_event_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_rx_acl_data_event_copy &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>

<P><STRONG><a name="[3fc]"></a>hci_rx_data_notify_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events.o(.text.hci_rx_data_notify_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_rx_data_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_notify_cb
</UL>

<P><STRONG><a name="[1d9]"></a>hci_set_event_mask</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_common.o(.text.hci_set_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[404]"></a>hci_tx_acl_data_done</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_acl_data.o(.text.hci_tx_acl_data_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_tx_acl_data_done &rArr; hci_number_of_completed_packets_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push_noinline
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
</UL>

<P><STRONG><a name="[422]"></a>hci_vs_force_local_p256_debug_key_api</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, hci_encryption_pka.o(.text.hci_vs_force_local_p256_debug_key_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_vs_force_local_p256_debug_key_api &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_set_local_public_key
</UL>

<P><STRONG><a name="[2d3]"></a>is_Buffer_All_Set_To</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, stacklib_utils.o(.text.is_Buffer_All_Set_To))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_api
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[85]"></a>iso_rx_bn_pdu_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_rx.o(.text.iso_rx_bn_pdu_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[59a]"></a>iso_rx_bn_pdu_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_rx.o(.text.iso_rx_bn_pdu_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[87]"></a>iso_terminate_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_sap.o(.text.iso_terminate_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[59b]"></a>iso_terminate_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_sap.o(.text.iso_terminate_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[86]"></a>iso_tx_bn_pdu_event_int_cb_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_tx.o(.text.iso_tx_bn_pdu_event_int_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.rodata.int_evnt_callback_pfunc)
</UL>
<P><STRONG><a name="[59c]"></a>iso_tx_bn_pdu_event_int_cb_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_isoal_tx.o(.text.iso_tx_bn_pdu_event_int_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[46e]"></a>isr_Acl_Data_Indication_Queue_Full</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, acl.o(.text.isr_Acl_Data_Indication_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[471]"></a>isr_Acl_Data_TX_Cmpl_Queue_Full</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, acl.o(.text.isr_Acl_Data_TX_Cmpl_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[2df]"></a>l2c_cos_channel_descriptor_reset</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.l2c_cos_channel_descriptor_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = l2c_cos_channel_descriptor_reset &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_channel_descriptors_reset_pending
</UL>

<P><STRONG><a name="[19e]"></a>l2c_cos_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.l2c_cos_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[59d]"></a>l2c_cos_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.l2c_cos_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[2e4]"></a>l2c_cos_hndl_incoming_le_frame_ucfg</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_rx_reassembly.o(.text.l2c_cos_hndl_incoming_le_frame_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_release_unexpected_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[59e]"></a>l2c_cos_hndl_incoming_le_frame_ucfg_weak</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_rx_reassembly.o(.text.l2c_cos_hndl_incoming_le_frame_ucfg_weak), UNUSED)

<P><STRONG><a name="[64]"></a>l2c_cos_process_pending_actions_tsk_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.l2c_cos_process_pending_actions_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[59f]"></a>l2c_cos_process_pending_actions_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_cmn.o(.text.l2c_cos_process_pending_actions_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[2ea]"></a>l2c_cos_sdu_enqueue_for_segmentation_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>

<P><STRONG><a name="[5a0]"></a>l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak), UNUSED)

<P><STRONG><a name="[65]"></a>l2c_cos_sdu_reassembly_tsk_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_rx_reassembly.o(.text.l2c_cos_sdu_reassembly_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[5a1]"></a>l2c_cos_sdu_reassembly_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_rx_reassembly.o(.text.l2c_cos_sdu_reassembly_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[67]"></a>l2c_cos_sdu_segmentation_tsk_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_sdu_segmentation_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[5a2]"></a>l2c_cos_sdu_segmentation_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_sdu_segmentation_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[66]"></a>l2c_cos_transmit_pdu_packets_tsk_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_transmit_pdu_packets_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[5a3]"></a>l2c_cos_transmit_pdu_packets_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_hndl_sdu_tx_segmentation.o(.text.l2c_cos_transmit_pdu_packets_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[2d5]"></a>l2c_get_link_control_block_index</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.l2c_get_link_control_block_index))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2dd]"></a>l2c_get_link_control_block_ref</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.l2c_get_link_control_block_ref))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_sap_hci_le_connection_complete_evt_hndl
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
</UL>

<P><STRONG><a name="[2da]"></a>l2c_post_process_incoming_request_packet</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.l2c_post_process_incoming_request_packet))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2d8]"></a>l2c_pre_process_incoming_response_packet</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.l2c_pre_process_incoming_response_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = l2c_pre_process_incoming_response_packet &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2e5]"></a>l2c_release_unexpected_acl_packet</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, l2c_cmn_caf.o(.text.l2c_release_unexpected_acl_packet))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_hndl_incoming_le_frame_ucfg
</UL>

<P><STRONG><a name="[407]"></a>l2c_sap_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, l2c_sap_hci.o(.text.l2c_sap_hci_disconnection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = l2c_sap_hci_disconnection_complete_evt_hndl &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_get_link_control_block_index
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_physical_link_disconnection_hndl_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[40e]"></a>l2c_sap_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, l2c_sap_hci.o(.text.l2c_sap_hci_le_connection_complete_evt_hndl))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_get_link_control_block_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[57]"></a>l2cap_timers_callback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, l2c_main.o(.text.l2cap_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = l2cap_timers_callback &rArr; L2C_timeout_handler_signalling &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(.text.l2cap_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[39]"></a>l2cap_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, l2c_main.o(.text.l2cap_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = l2cap_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(.text.L2C_init)
</UL>
<P><STRONG><a name="[465]"></a>ll_cpe_get_cpid_from_opcode</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_cpid_from_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[322]"></a>ll_cpe_set_unknown_rsp_pending</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_set_unknown_rsp_pending))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[2c1]"></a>ll_write_supported_data_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(.text.ll_write_supported_data_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[5a4]"></a>ll_write_supported_data_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(.text.ll_write_supported_data_ucfg_weak), UNUSED)

<P><STRONG><a name="[391]"></a>llc_big_brc_mem_alloc_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_big_brc_mem_alloc.o(.text.llc_big_brc_mem_alloc_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5a5]"></a>llc_big_brc_mem_alloc_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_big_brc_mem_alloc.o(.text.llc_big_brc_mem_alloc_ucfg_weak), UNUSED)

<P><STRONG><a name="[392]"></a>llc_big_sync_mem_alloc_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_big_sync_mem_alloc.o(.text.llc_big_sync_mem_alloc_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5a6]"></a>llc_big_sync_mem_alloc_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_big_sync_mem_alloc.o(.text.llc_big_sync_mem_alloc_ucfg_weak), UNUSED)

<P><STRONG><a name="[428]"></a>llc_check_sreq_or_creq_tx_addr_res_off</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, llc_filter_accept_list_isr.o(.text.llc_check_sreq_or_creq_tx_addr_res_off))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_check_sreq_or_creq_tx_addr_ucfg
</UL>

<P><STRONG><a name="[118]"></a>llc_check_sreq_or_creq_tx_addr_ucfg</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, llc_filter_accept_list_isr.o(.text.llc_check_sreq_or_creq_tx_addr_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_check_sreq_or_creq_tx_addr_res_off
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[5a7]"></a>llc_check_sreq_or_creq_tx_addr_ucfg_weak</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, llc_filter_accept_list_isr.o(.text.llc_check_sreq_or_creq_tx_addr_ucfg_weak), UNUSED)

<P><STRONG><a name="[393]"></a>llc_cig_cmn_mem_alloc_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_mem_alloc.o(.text.llc_cig_cmn_mem_alloc_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5a8]"></a>llc_cig_cmn_mem_alloc_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_mem_alloc.o(.text.llc_cig_cmn_mem_alloc_ucfg_weak), UNUSED)

<P><STRONG><a name="[42e]"></a>llc_cig_cmn_start_cis_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_sap.o(.text.llc_cig_cmn_start_cis_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[5a9]"></a>llc_cig_cmn_start_cis_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_sap.o(.text.llc_cig_cmn_start_cis_ucfg_weak), UNUSED)

<P><STRONG><a name="[429]"></a>llc_cig_cmn_terminate_cises_on_acl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_sap.o(.text.llc_cig_cmn_terminate_cises_on_acl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_cancel_slot
</UL>

<P><STRONG><a name="[5aa]"></a>llc_cig_cmn_terminate_cises_on_acl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_cig_cmn_sap.o(.text.llc_cig_cmn_terminate_cises_on_acl_ucfg_weak), UNUSED)

<P><STRONG><a name="[437]"></a>llc_conn_calc_skip_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_calc_skip_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[5ab]"></a>llc_conn_calc_skip_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_calc_skip_ucfg_weak), UNUSED)

<P><STRONG><a name="[58]"></a>llc_conn_cancel_slot</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, llc_connect_callback.o(.text.llc_conn_cancel_slot))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_wr_check_pawr_active_ucfg
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_per_state
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cig_cmn_terminate_cises_on_acl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[42b]"></a>llc_conn_check_ctrl_proc_rsp_timer</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_check_ctrl_proc_rsp_timer))
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_exception_opcode_from_sm
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[42c]"></a>llc_conn_check_instant_and_set_params</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_check_instant_and_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_conn_check_instant_and_set_params &rArr; BLEPLAT_CNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetChannelMap
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetTxPhy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_upd_evt_pending_check_isr_ucfg
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_reset_params
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_update_remapping_table
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cig_cmn_start_cis_ucfg
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_upd_pending_ucfg
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[477]"></a>llc_conn_check_subrate_and_set_params_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_connect_isr.o(.text.llc_conn_check_subrate_and_set_params_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[5ac]"></a>llc_conn_check_subrate_and_set_params_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_connect_isr.o(.text.llc_conn_check_subrate_and_set_params_ucfg_weak), UNUSED)

<P><STRONG><a name="[439]"></a>llc_conn_check_supervision_timer</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_check_supervision_timer))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[344]"></a>llc_conn_clr_instant_reached_passed</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_clr_instant_reached_passed))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[37e]"></a>llc_conn_clr_rx_acl_blocked</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_clr_rx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[339]"></a>llc_conn_clr_rx_ctrl_pdu_full</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_clr_rx_ctrl_pdu_full))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[37d]"></a>llc_conn_clr_tx_acl_blocked</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_clr_tx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[43c]"></a>llc_conn_copy_tx_data_packet</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_copy_tx_data_packet))
<BR><BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[323]"></a>llc_conn_disconnect_link_from_cpf</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_disconnect_link_from_cpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = llc_conn_disconnect_link_from_cpf &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[436]"></a>llc_conn_enhanced_get_latency</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_enhanced_get_latency))
<BR><BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketGetDataPtr
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[347]"></a>llc_conn_get_cntxt_p</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_get_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_multi_link_connection
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_search_address
</UL>

<P><STRONG><a name="[2ed]"></a>llc_conn_get_cntxt_per_p</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation_tsk
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_calc_instant
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_state
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_init_sm_ctxt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_next_free_conn_handle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_release_conn_idx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_reserve_conn_idx
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_conn_idx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_version_exchange_cached
</UL>

<P><STRONG><a name="[305]"></a>llc_conn_get_cntxt_per_p_from_handle</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_get_cntxt_per_p_from_handle))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[418]"></a>llc_conn_get_conn_idx</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_negative_reply_api
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply_api
</UL>

<P><STRONG><a name="[32e]"></a>llc_conn_get_ctrl_pdu_data_p</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_ctrl_pdu_data_p))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[2ee]"></a>llc_conn_get_enc_on</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_enc_on))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[341]"></a>llc_conn_get_instant_passed</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_instant_passed))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[340]"></a>llc_conn_get_instant_reached</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_instant_reached))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[427]"></a>llc_conn_get_rx_acl_blocked</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_rx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[426]"></a>llc_conn_get_rx_ctrl_pdu_full</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_rx_ctrl_pdu_full))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[470]"></a>llc_conn_get_tx_acl_blocked</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_tx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[32b]"></a>llc_conn_get_tx_ctrl_pdu_state</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_get_tx_ctrl_pdu_state))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[126]"></a>llc_conn_go_to_connect</STRONG> (Thumb, 1440 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_conn_go_to_connect &rArr; llc_conn_push_csa_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_DemodDelaySt
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetUnmappedChan
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPwr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPhy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxPacketPtr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxPhy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxPacketPtr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxMode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetHopIncr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetDataLength
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetCrcInit
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetChannelMap
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetAccessAddr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmInitTo0
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetTxPwr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetTxPhy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmCteOff
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTxReady
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetRxReady
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_link_calculate_window_widening_from_ppm
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_convert_sca_to_ppm
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_link_get_own_sca_ppm
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_link_calc_packetlength
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_init_sm_ctxt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_init_le_ping_params
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_past_default_params_ucfg
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_init_acceptable_per
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_init_chc_ctxt_ucfg
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init_pcl_ctxt_ucfg
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init_cte_ctxt_ucfg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_update_init_per_st_data_ucfg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel_for_task
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_next_free_conn_handle
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_update_remapping_table
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_blue_packets
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_csa_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_adv_set_terminated_event
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_add_address
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_channel_sel_algo2_enabled
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cis_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
</UL>

<P><STRONG><a name="[457]"></a>llc_conn_guard_time_for_close_conn_event</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_guard_time_for_close_conn_event))
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetTxPhy
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetRxPhy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_return_actual_scheduler_margin
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
</UL>

<P><STRONG><a name="[384]"></a>llc_conn_init</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_init))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_list_reset
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_init_acceptable
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_update_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[445]"></a>llc_conn_init_cte_ctxt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.llc_conn_init_cte_ctxt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[5ad]"></a>llc_conn_init_cte_ctxt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.llc_conn_init_cte_ctxt_ucfg_weak), UNUSED)

<P><STRONG><a name="[446]"></a>llc_conn_init_pcl_ctxt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.llc_conn_init_pcl_ctxt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[5ae]"></a>llc_conn_init_pcl_ctxt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(.text.llc_conn_init_pcl_ctxt_ucfg_weak), UNUSED)

<P><STRONG><a name="[59]"></a>llc_conn_isr</STRONG> (Thumb, 2500 bytes, Stack size unknown bytes, llc_connect_isr.o(.text.llc_conn_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_conn_isr &rArr; Acl_Tx_Cmpl_Pkt_Handler &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_DemodDelaySt
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmToggleNesn
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxCountDirectionBit
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxCount
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxCountDirectionBit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxCount
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetRemapChan
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetMode
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetEncKeyPtr
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetEncIvPtr
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmEncOn
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmEncOff
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SetRcvLen
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetDataPtr
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetCteSamplingEn
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketGetDataPtr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrPllTrig
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrIncChan
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketClrCteSamplingEn
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxOk
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTxDone
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusTimeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusRxOk
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusLenErr
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusEncErr
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_IntGetIntStatusCrcErr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GlobEnableBlue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_ClearRadioTimerValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CalculateRSSI
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_TX_Cmpl_Queue_Full
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_Indication_Queue_Full
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_priority
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_opcode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_update_receive_window
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_tx_ctrl_pdu_state
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_tx_ctrl_pdu_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_tx_acl_blocked
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_rx_ctrl_pdu_full
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_copy_tx_data_packet
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_rx_acl_blocked
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cis_csr_ucfg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_control_pdu_size
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rf_rx_path_compensation_db
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cte_process_rx_cte_ucfg
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_subrate_and_set_params_ucfg
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_update_avg_rssi_ucfg
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_incr_rx_packets_ucfg
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_decrement_enc_count_rx
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[452]"></a>llc_conn_list_add_address</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_list_add_address))
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[330]"></a>llc_conn_list_remove_address</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_list_remove_address))
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_remove_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[459]"></a>llc_conn_list_reset</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_list_reset))
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[11c]"></a>llc_conn_list_search_address</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_list_search_address))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr8_list_search
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[38a]"></a>llc_conn_mem_allocate</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_mem_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_conn_mem_allocate &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[479]"></a>llc_conn_multi_link_connection</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_multi_link_connection))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_multi_link_connection_ucfg
</UL>

<P><STRONG><a name="[2c2]"></a>llc_conn_multi_link_connection_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.llc_conn_multi_link_connection_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_conn_multi_link_connection_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_multi_link_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[336]"></a>llc_conn_per_init</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, llc_connect_mem_alloc.o(.text.llc_conn_per_init))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_csr_ucfg
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_reset_params
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cis_csr_ucfg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_control_pdu_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[480]"></a>llc_conn_peripheral_latency_cancellation_tsk</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_peripheral_latency_cancellation_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = llc_conn_peripheral_latency_cancellation_tsk &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation_tsk_ucfg
</UL>

<P><STRONG><a name="[76]"></a>llc_conn_peripheral_latency_cancellation_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.llc_conn_peripheral_latency_cancellation_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = llc_conn_peripheral_latency_cancellation_tsk_ucfg &rArr; llc_conn_peripheral_latency_cancellation_tsk &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[5a]"></a>llc_conn_program_slot</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, llc_connect_callback.o(.text.llc_conn_program_slot))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SetRcvLen
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketGetDataPtr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_update_receive_window
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_guard_time_for_close_conn_event
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_copy_tx_data_packet
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_anchorstretch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[450]"></a>llc_conn_push_adv_set_terminated_event</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_push_adv_set_terminated_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_conn_push_adv_set_terminated_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[131]"></a>llc_conn_push_connection_complete_event</STRONG> (Thumb, 604 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_push_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_conn_push_connection_complete_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_padv_periodic_adv_sync_wr_csr_ucfg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[451]"></a>llc_conn_push_csa_event</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_push_csa_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_conn_push_csa_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[1c2]"></a>llc_conn_release_conn_idx</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_release_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
</UL>

<P><STRONG><a name="[1c0]"></a>llc_conn_reserve_conn_idx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_reserve_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start_request_radio_tasks
</UL>

<P><STRONG><a name="[144]"></a>llc_conn_send_acl_data</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_send_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetDataPtr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketGetDataPtr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p_from_handle
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_tx_acl_blocked
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_enc_on
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_copy_tx_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[31d]"></a>llc_conn_set_chmap_params</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_chmap_params))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[35b]"></a>llc_conn_set_conn_update_params</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_conn_update_params))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[378]"></a>llc_conn_set_rx_acl_blocked</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_rx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[37a]"></a>llc_conn_set_start_enc</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_start_enc))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[377]"></a>llc_conn_set_stop_enc</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_stop_enc))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[43a]"></a>llc_conn_set_taskslot_params</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_set_taskslot_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_conn_set_taskslot_params &rArr; BLEPLAT_CNTR_SmSetUnmappedChan
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetUnmappedChan
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetTxMode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxMode
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetHopIncr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetAccessAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetPllTrig
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIncChan
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_mod_37
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_link_calculate_window_widening_from_ppm
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel_for_task
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[376]"></a>llc_conn_set_tx_acl_blocked</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_tx_acl_blocked))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[358]"></a>llc_conn_set_tx_ctrl_pdu_has_instant</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_tx_ctrl_pdu_has_instant))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
</UL>

<P><STRONG><a name="[32c]"></a>llc_conn_set_tx_ctrl_pdu_state</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, llc_connect_routines.o(.text.llc_conn_set_tx_ctrl_pdu_state))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5b]"></a>llc_conn_skip_slot</STRONG> (Thumb, 202 bytes, Stack size unknown bytes, llc_connect_callback.o(.text.llc_conn_skip_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_conn_skip_slot &rArr; llc_conn_check_instant_and_set_params &rArr; BLEPLAT_CNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_supervision_timer
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_ctrl_proc_rsp_timer
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_calc_skip_ucfg
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_new_sr_base_event_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_connect_sap.o(.text.llc_conn_go_to_connect)
</UL>
<P><STRONG><a name="[466]"></a>llc_conn_update_receive_window</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_update_receive_window))
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_DemodDelaySt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_program_slot
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[129]"></a>llc_convert_hci_phy_enum_to_hw_phy</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, llc_utils.o(.text.llc_convert_hci_phy_enum_to_hw_phy))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[44e]"></a>llc_convert_sca_to_ppm</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_utils.o(.text.llc_convert_sca_to_ppm))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[320]"></a>llc_cpe_calc_instant</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_cpe.o(.text.llc_cpe_calc_instant))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[44a]"></a>llc_cpe_init_sm_ctxt</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_cpe.o(.text.llc_cpe_init_sm_ctxt))
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_active
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[35e]"></a>llc_cte_get_ctxt</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_get_ctxt))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
</UL>

<P><STRONG><a name="[39a]"></a>llc_cte_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5af]"></a>llc_cte_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[395]"></a>llc_cte_mem_allocate_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_mem_allocate_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5b0]"></a>llc_cte_mem_allocate_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[478]"></a>llc_cte_process_rx_cte_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.llc_cte_process_rx_cte_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[5b1]"></a>llc_cte_process_rx_cte_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cte.o(.text.llc_cte_process_rx_cte_ucfg_weak), UNUSED)

<P><STRONG><a name="[3a3]"></a>llc_cte_timer_error_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_timer_error_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[5b2]"></a>llc_cte_timer_error_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_timer_error_ucfg_weak), UNUSED)

<P><STRONG><a name="[3a1]"></a>llc_cte_timer_stop_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_timer_stop_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[5b3]"></a>llc_cte_timer_stop_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cte_functions.o(.text.llc_cte_timer_stop_ucfg_weak), UNUSED)

<P><STRONG><a name="[313]"></a>llc_eadv_generate_new_rpa_for_one_adv_set</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.llc_eadv_generate_new_rpa_for_one_adv_set))
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_generate_peer_rpa_from_peer_id_ucfg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_generate_local_rpa_from_peer_id_ucfg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_init_random_part_of_one_local_rpa_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[30f]"></a>llc_get_advertising_set_index</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.llc_get_advertising_set_index))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>

<P><STRONG><a name="[1c8]"></a>llc_get_channel_sel_algo2_enabled</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.llc_get_channel_sel_algo2_enabled))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
</UL>

<P><STRONG><a name="[1be]"></a>llc_get_linkms_cntxt_p</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(.text.llc_get_linkms_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_force_chsel_1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_advertising_set_index
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_channel_sel_algo2_enabled
</UL>

<P><STRONG><a name="[442]"></a>llc_get_next_free_conn_handle</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ll_routines.o(.text.llc_get_next_free_conn_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[390]"></a>llc_iso_cmn_mem_alloc_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_iso_cmn_mem_alloc.o(.text.llc_iso_cmn_mem_alloc_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5b4]"></a>llc_iso_cmn_mem_alloc_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_iso_cmn_mem_alloc.o(.text.llc_iso_cmn_mem_alloc_ucfg_weak), UNUSED)

<P><STRONG><a name="[394]"></a>llc_isoal_mem_alloc_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_isoal_mem_alloc.o(.text.llc_isoal_mem_alloc_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5b5]"></a>llc_isoal_mem_alloc_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_isoal_mem_alloc.o(.text.llc_isoal_mem_alloc_ucfg_weak), UNUSED)

<P><STRONG><a name="[443]"></a>llc_mngm_csa2_select_channel_for_task</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_select_channel_for_task))
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetChannelMap
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>

<P><STRONG><a name="[48d]"></a>llc_mngm_csa2_select_subevent_channel_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_select_subevent_channel_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel
</UL>

<P><STRONG><a name="[5b6]"></a>llc_mngm_csa2_select_subevent_channel_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_select_subevent_channel_ucfg_weak), UNUSED)

<P><STRONG><a name="[431]"></a>llc_mngm_csa2_update_remapping_table</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_update_remapping_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_mngm_csa2_update_remapping_table &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[47e]"></a>llc_mngm_mod_37</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_mod_37))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel
</UL>

<P><STRONG><a name="[399]"></a>llc_padv_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_padv_mem_alloc.o(.text.llc_padv_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5b7]"></a>llc_padv_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_padv_mem_alloc.o(.text.llc_padv_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[38b]"></a>llc_padv_mem_allocate_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_padv_mem_alloc.o(.text.llc_padv_mem_allocate_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5b8]"></a>llc_padv_mem_allocate_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_padv_mem_alloc.o(.text.llc_padv_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[3b]"></a>llc_padv_periodic_adv_sync_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_padv_sap.o(.text.llc_padv_periodic_adv_sync_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_default_le_event_mask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpf_feature_exchange.o(.text.LL_Get_Supported_Features)
</UL>
<P><STRONG><a name="[5b9]"></a>llc_padv_periodic_adv_sync_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_padv_sap.o(.text.llc_padv_periodic_adv_sync_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[196]"></a>llc_padv_periodic_adv_sync_wr_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_padv_wr_sap.o(.text.llc_padv_periodic_adv_sync_wr_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_push_connection_complete_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5ba]"></a>llc_padv_periodic_adv_sync_wr_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_padv_wr_sap.o(.text.llc_padv_periodic_adv_sync_wr_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[38e]"></a>llc_past_mem_allocate_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.llc_past_mem_allocate_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5bb]"></a>llc_past_mem_allocate_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(.text.llc_past_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[19b]"></a>llc_priv_controller_privacy_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_controller_privacy_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
</UL>

<P><STRONG><a name="[5bc]"></a>llc_priv_controller_privacy_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_controller_privacy_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[489]"></a>llc_priv_generate_local_rpa_from_peer_id_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_generate_local_rpa_from_peer_id_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_eadv_generate_new_rpa_for_one_adv_set
</UL>

<P><STRONG><a name="[5bd]"></a>llc_priv_generate_local_rpa_from_peer_id_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_generate_local_rpa_from_peer_id_ucfg_weak), UNUSED)

<P><STRONG><a name="[48a]"></a>llc_priv_generate_peer_rpa_from_peer_id_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_isr.o(.text.llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_eadv_generate_new_rpa_for_one_adv_set
</UL>

<P><STRONG><a name="[5be]"></a>llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_isr.o(.text.llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak), UNUSED)

<P><STRONG><a name="[488]"></a>llc_priv_init_random_part_of_one_local_rpa_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_init_random_part_of_one_local_rpa_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_eadv_generate_new_rpa_for_one_adv_set
</UL>

<P><STRONG><a name="[5bf]"></a>llc_priv_init_random_part_of_one_local_rpa_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_init_random_part_of_one_local_rpa_ucfg_weak), UNUSED)

<P><STRONG><a name="[39f]"></a>llc_priv_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5c0]"></a>llc_priv_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[389]"></a>llc_priv_mem_allocate</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, llc_privacy_mem_alloc.o(.text.llc_priv_mem_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_priv_mem_allocate &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[73]"></a>llc_priv_offline_rpa_resolution_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_offline_rpa_resolution_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[5c1]"></a>llc_priv_offline_rpa_resolution_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_offline_rpa_resolution_ucfg_weak), UNUSED)

<P><STRONG><a name="[314]"></a>llc_priv_start_privacy_timer_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_start_privacy_timer_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[5c2]"></a>llc_priv_start_privacy_timer_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_start_privacy_timer_ucfg_weak), UNUSED)

<P><STRONG><a name="[128]"></a>llc_priv_stop_privacy_timer_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_stop_privacy_timer_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR_connect_request_received
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
</UL>

<P><STRONG><a name="[5c3]"></a>llc_priv_stop_privacy_timer_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_privacy_sap.o(.text.llc_priv_stop_privacy_timer_ucfg_weak), UNUSED)

<P><STRONG><a name="[48f]"></a>llc_pscan_get_cntxt_per_p</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, llc_pscan_mem_alloc.o(.text.llc_pscan_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_wr_mem_allocate_ucfg
</UL>

<P><STRONG><a name="[397]"></a>llc_pscan_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_mem_alloc.o(.text.llc_pscan_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5c4]"></a>llc_pscan_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_mem_alloc.o(.text.llc_pscan_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[26]"></a>llc_pscan_isr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_pscan_isr.o(.text.llc_pscan_isr_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.text.BLE_STACK_RadioHandler)
</UL>
<P><STRONG><a name="[5c5]"></a>llc_pscan_isr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_pscan_isr.o(.text.llc_pscan_isr_ucfg_weak), UNUSED)

<P><STRONG><a name="[38d]"></a>llc_pscan_mem_allocate_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_mem_alloc.o(.text.llc_pscan_mem_allocate_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5c6]"></a>llc_pscan_mem_allocate_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_mem_alloc.o(.text.llc_pscan_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[338]"></a>llc_pscan_wr_check_pawr_active_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_pscan_wr_sap.o(.text.llc_pscan_wr_check_pawr_active_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_cancel_slot
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5c7]"></a>llc_pscan_wr_check_pawr_active_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_pscan_wr_sap.o(.text.llc_pscan_wr_check_pawr_active_ucfg_weak), UNUSED)

<P><STRONG><a name="[383]"></a>llc_pscan_wr_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_wr_mem_alloc.o(.text.llc_pscan_wr_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init
</UL>

<P><STRONG><a name="[5c8]"></a>llc_pscan_wr_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_pscan_wr_mem_alloc.o(.text.llc_pscan_wr_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[38f]"></a>llc_pscan_wr_mem_allocate_ucfg</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, llc_pscan_wr_mem_alloc.o(.text.llc_pscan_wr_mem_allocate_ucfg_weak))
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pscan_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5c9]"></a>llc_pscan_wr_mem_allocate_ucfg_weak</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, llc_pscan_wr_mem_alloc.o(.text.llc_pscan_wr_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[312]"></a>llc_scan_get_cntxt_p</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, llc_scanning_mem_alloc.o(.text.llc_scan_get_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_set_scan_channel_bitmap
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
</UL>

<P><STRONG><a name="[396]"></a>llc_scan_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_scanning_mem_alloc.o(.text.llc_scan_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5ca]"></a>llc_scan_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_scanning_mem_alloc.o(.text.llc_scan_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[38c]"></a>llc_scan_mem_allocate_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_scanning_mem_alloc.o(.text.llc_scan_mem_allocate_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[5cb]"></a>llc_scan_mem_allocate_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_scanning_mem_alloc.o(.text.llc_scan_mem_allocate_ucfg_weak), UNUSED)

<P><STRONG><a name="[2c5]"></a>llc_scan_set_scan_channel_bitmap</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, llc_scanning_sap.o(.text.llc_scan_set_scan_channel_bitmap))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_csr_ucfg
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[45b]"></a>llc_subrate_init_acceptable</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_init_acceptable))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[448]"></a>llc_subrate_init_acceptable_per</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_init_acceptable_per))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_subrate_init_acceptable_per &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[438]"></a>llc_subrate_new_sr_base_event_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_new_sr_base_event_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_skip_slot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[5cc]"></a>llc_subrate_new_sr_base_event_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_new_sr_base_event_ucfg_weak), UNUSED)

<P><STRONG><a name="[2fa]"></a>llc_subrate_offline_processing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_subrate_sap.o(.text.llc_subrate_offline_processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[5cd]"></a>llc_subrate_offline_processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, llc_subrate_sap.o(.text.llc_subrate_offline_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[432]"></a>llc_subrate_reset_params</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_reset_params))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_per_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
</UL>

<P><STRONG><a name="[435]"></a>llc_subrate_update_cont_counter_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_update_cont_counter_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_close_event
</UL>

<P><STRONG><a name="[5ce]"></a>llc_subrate_update_cont_counter_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, llc_subrate_routines.o(.text.llc_subrate_update_cont_counter_ucfg_weak), UNUSED)

<P><STRONG><a name="[5e]"></a>llc_timers_callback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_routines.o(.text.llc_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = llc_timers_callback &rArr; LLC_authenticated_payload_timeout_cb &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_routines.o(.text.llc_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[49]"></a>llc_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(.text.llc_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = llc_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_routines.o(.text.LL_init)
</UL>
<P><STRONG><a name="[388]"></a>llc_wl_mem_allocate</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, llc_filter_accept_list_mem_alloc.o(.text.llc_wl_mem_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_wl_mem_allocate &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_init_ucfg_weak
</UL>

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_APPE_Init &rArr; APP_BLE_Init &rArr; BLE_Init &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RADIO_TIMER_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RADIO_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_PKA_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2d2]"></a>nvm_dev_id_data_add_record</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_dev_id_data_add_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nvm_dev_id_data_add_record &rArr; BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[2d1]"></a>nvm_dev_id_data_get_record</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_dev_id_data_get_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nvm_dev_id_data_get_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[3cd]"></a>nvm_discard_current_record</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_discard_current_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_del_bonded_device
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
</UL>

<P><STRONG><a name="[3cc]"></a>nvm_gatt_db_read_full_current_record</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_gatt_db_read_full_current_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nvm_gatt_db_read_full_current_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_convert_bleplat_to_blestack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_read_peer_bonded_gatt_client_data
</UL>

<P><STRONG><a name="[495]"></a>nvm_gatt_db_read_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_gatt_db_read_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
</UL>

<P><STRONG><a name="[491]"></a>nvm_gatt_db_read_next_record</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_gatt_db_read_next_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nvm_gatt_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_convert_bleplat_to_blestack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
</UL>

<P><STRONG><a name="[3ce]"></a>nvm_gatt_db_update_record</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_gatt_db_update_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nvm_gatt_db_update_record &rArr; BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_convert_bleplat_to_blestack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
</UL>

<P><STRONG><a name="[492]"></a>nvm_sec_db_add_record</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_sec_db_add_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nvm_sec_db_add_record &rArr; BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_convert_bleplat_to_blestack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_add_security_record
</UL>

<P><STRONG><a name="[493]"></a>nvm_sec_db_get_record_count</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_sec_db_get_record_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nvm_sec_db_get_record_count &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_get_security_records_count
</UL>

<P><STRONG><a name="[496]"></a>nvm_sec_db_read_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_sec_db_read_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record_matching
</UL>

<P><STRONG><a name="[494]"></a>nvm_sec_db_read_next_record</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_sec_db_read_next_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_convert_bleplat_to_blestack_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record_matching
</UL>

<P><STRONG><a name="[1a0]"></a>pcl_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_pcl.o(.text.pcl_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5cf]"></a>pcl_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_pcl.o(.text.pcl_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[19a]"></a>phy_upd_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_phy_update.o(.text.phy_upd_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_update_receive_window
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_init
</UL>

<P><STRONG><a name="[5d0]"></a>phy_upd_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_phy_update.o(.text.phy_upd_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[19d]"></a>scan_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_scan_connect.o(.text.scan_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_scan_set_scan_channel_bitmap
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Supported_Features
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5d1]"></a>scan_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_scan_connect.o(.text.scan_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[497]"></a>sdb_sap_add_security_record</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, sdb.o(.text.sdb_sap_add_security_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_add_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_add_bonding_record
</UL>

<P><STRONG><a name="[498]"></a>sdb_sap_del_bonded_device</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, sdb.o(.text.sdb_sap_del_bonded_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = sdb_sap_del_bonded_device &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_gatt_search_record
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_remove_security_record_by_address
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_discard_current_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_receive
</UL>

<P><STRONG><a name="[499]"></a>sdb_sap_get_security_records_count</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, sdb.o(.text.sdb_sap_get_security_records_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdb_sap_get_security_records_count &rArr; nvm_sec_db_get_record_count &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_get_record_count
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_get_bonding_records_count
</UL>

<P><STRONG><a name="[3ca]"></a>sdb_sap_read_security_record</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, sdb.o(.text.sdb_sap_read_security_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_resolve_rpa
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_next_record
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_read_peer_bonded_gatt_client_data
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_by_conn_addr
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_read_address
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_add_security_record
</UL>

<P><STRONG><a name="[49b]"></a>sdb_sap_read_security_record_matching</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, sdb.o(.text.sdb_sap_read_security_record_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdb_sap_read_security_record_matching &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_next_record
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_matching_ltk_read_record
</UL>

<P><STRONG><a name="[49d]"></a>secure_connections_csr</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_sap_hci_scp.o(.text.secure_connections_csr))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
</UL>

<P><STRONG><a name="[19c]"></a>secure_connections_csr_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.secure_connections_csr_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = secure_connections_csr_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements_api
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[4f9]"></a>smp_check_is_any_pairing_ongoing</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_sap_aci_cmn.o(.text.smp_check_is_any_pairing_ongoing))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_set_authentication_req
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_set_io_capabilities
</UL>

<P><STRONG><a name="[49e]"></a>smp_cmn_is_peer_rejectlisted</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_hndl_rejectlist.o(.text.smp_cmn_is_peer_rejectlisted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_cmn_is_peer_rejectlisted &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_connection_complete_handler
</UL>

<P><STRONG><a name="[49f]"></a>smp_cmn_rejectlist_init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, smp_hndl_rejectlist.o(.text.smp_cmn_rejectlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_cmn_rejectlist_init &rArr; csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
</UL>

<P><STRONG><a name="[4a0]"></a>smp_cmn_rejectlist_start_probation_timer2</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, smp_hndl_rejectlist.o(.text.smp_cmn_rejectlist_start_probation_timer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_cmn_rejectlist_start_probation_timer2 &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>

<P><STRONG><a name="[4a2]"></a>smp_cmn_repeated_attacks_protection_start</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, smp_hndl_rejectlist.o(.text.smp_cmn_repeated_attacks_protection_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_cmn_repeated_attacks_protection_start &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[4a3]"></a>smp_cmn_repeated_attacks_timer_cb</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, smp_hndl_rejectlist.o(.text.smp_cmn_repeated_attacks_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_cmn_repeated_attacks_timer_cb &rArr; smp_cmn_rejectlist_start_probation_timer2 &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_start_probation_timer2
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_cb
</UL>

<P><STRONG><a name="[4a6]"></a>smp_crt_diversify</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_crt_diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_local_irk
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_csrk
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>

<P><STRONG><a name="[4a7]"></a>smp_crt_f4_generate_confirm</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_f4_generate_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm_excerpt_scp
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
</UL>

<P><STRONG><a name="[4a8]"></a>smp_crt_f5_generate_keys</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_f5_generate_keys))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
</UL>

<P><STRONG><a name="[4a9]"></a>smp_crt_f6_generate_check_val</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_f6_generate_check_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
</UL>

<P><STRONG><a name="[4aa]"></a>smp_crt_g2_generate_num_comp_val</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_g2_generate_num_comp_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_crt_g2_generate_num_comp_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
</UL>

<P><STRONG><a name="[4ab]"></a>smp_crt_generate_cmac_tag</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_generate_cmac_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_crt_generate_cmac_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
</UL>

<P><STRONG><a name="[4ad]"></a>smp_crt_generate_csrk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_generate_csrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_crt_generate_csrk &rArr; smp_crt_diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
</UL>

<P><STRONG><a name="[4ae]"></a>smp_crt_s1_generate_stk</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_s1_generate_stk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_crt_s1_generate_stk &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
</UL>

<P><STRONG><a name="[4af]"></a>smp_debug_trudy__set_config</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_hndl_debug_trudy.o(.text.smp_debug_trudy__set_config))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_debug_trudy__set_config_ucfg
</UL>

<P><STRONG><a name="[2c0]"></a>smp_debug_trudy__set_config_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_debug_trudy__set_config_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_debug_trudy__set_config_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_debug_trudy__set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[4b0]"></a>smp_dep_gap_get_local_identity_address</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_dep_gap.o(.text.smp_dep_gap_get_local_identity_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_dep_gap_get_local_identity_address &rArr; GAP_get_public_address &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
</UL>

<P><STRONG><a name="[4b1]"></a>smp_dep_l2c_send_acl_packet</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_dep_l2c.o(.text.smp_dep_l2c_send_acl_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_send
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_send
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4b3]"></a>smp_dep_l2c_send_acl_short_pdu</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_dep_l2c.o(.text.smp_dep_l2c_send_acl_short_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>

<P><STRONG><a name="[4b4]"></a>smp_dep_sdb_add_bonding_record</STRONG> (Thumb, 274 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_add_bonding_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_add_security_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
</UL>

<P><STRONG><a name="[4b5]"></a>smp_dep_sdb_find_bonding_record_by_conn_addr</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_find_bonding_record_by_conn_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_copy_bonding_record_data_to_remdev
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_check_is_peer_device_bonded
</UL>

<P><STRONG><a name="[4b7]"></a>smp_dep_sdb_find_bonding_record_read_address</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_find_bonding_record_read_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_dep_sdb_find_bonding_record_read_address &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_remote_address_check_addr_type
</UL>

<P><STRONG><a name="[4b8]"></a>smp_dep_sdb_find_matching_ltk_read_record</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_find_matching_ltk_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_dep_sdb_find_matching_ltk_read_record &rArr; sdb_sap_read_security_record_matching &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_copy_bonding_record_data_to_remdev
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
</UL>

<P><STRONG><a name="[4b9]"></a>smp_dep_sdb_get_bonding_records_count</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_get_bonding_records_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_dep_sdb_get_bonding_records_count &rArr; sdb_sap_get_security_records_count &rArr; nvm_sec_db_get_record_count &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_get_security_records_count
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[4c5]"></a>smp_fsm_execute_actions_excerpt_cei_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_hndl_tasks_fsm.o(.text.smp_fsm_execute_actions_excerpt_cei_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[5d2]"></a>smp_fsm_execute_actions_excerpt_cei_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_hndl_tasks_fsm.o(.text.smp_fsm_execute_actions_excerpt_cei_ucfg_weak), UNUSED)

<P><STRONG><a name="[4ba]"></a>smp_fsm_execute_actions_scp_phase2as2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_hndl_tasks_fsm.o(.text.smp_fsm_execute_actions_scp_phase2as2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_fsm_execute_actions_scp_phase2as2 &rArr; smp_scp_phase_2as2_start &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2_ucfg
</UL>

<P><STRONG><a name="[4bd]"></a>smp_fsm_execute_actions_scp_phase2as2_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_fsm_execute_actions_scp_phase2as2_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = smp_fsm_execute_actions_scp_phase2as2_ucfg &rArr; smp_fsm_execute_actions_scp_phase2as2 &rArr; smp_scp_phase_2as2_start &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[4be]"></a>smp_fsm_process_actions_wrt_state_tsk</STRONG> (Thumb, 428 bytes, Stack size unknown bytes, smp_hndl_tasks_fsm.o(.text.smp_fsm_process_actions_wrt_state_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_fsm_process_actions_wrt_state_tsk &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2_ucfg
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange_ucfg
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_excerpt_cei_ucfg
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_get_bonding_records_count
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_by_conn_addr
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage_1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk_ucfg
</UL>

<P><STRONG><a name="[71]"></a>smp_fsm_process_actions_wrt_state_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_fsm_process_actions_wrt_state_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = smp_fsm_process_actions_wrt_state_tsk_ucfg &rArr; smp_fsm_process_actions_wrt_state_tsk &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[4b2]"></a>smp_get_remote_device_list_index</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_hndl_remote_device_lists.o(.text.smp_get_remote_device_list_index))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[4f2]"></a>smp_get_remote_device_list_item</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_hndl_remote_device_lists.o(.text.smp_get_remote_device_list_item))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_security_level
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_scp_numeric_comparison_response
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_passkey_response
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_forget_device_upon_disconnection
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_check_encryption_key_size
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_check_is_peer_device_bonded
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_get_remote_address_check_addr_type
</UL>

<P><STRONG><a name="[4c6]"></a>smp_init</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, smp_main.o(.text.smp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_init &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init_ucfg
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init_ucfg
</UL>

<P><STRONG><a name="[3dc]"></a>smp_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_init_ucfg &rArr; smp_init &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[4c9]"></a>smp_oob_check_is_remote_data_present</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_hndl_remote_device_lists.o(.text.smp_oob_check_is_remote_data_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_oob_check_is_remote_data_present &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_get_remote_data_reference
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4ca]"></a>smp_oob_clear_remote_data_entry</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, smp_hndl_remote_device_lists.o(.text.smp_oob_clear_remote_data_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_oob_clear_remote_data_entry &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
</UL>

<P><STRONG><a name="[4cb]"></a>smp_oob_get_remote_data_reference</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, smp_hndl_remote_device_lists.o(.text.smp_oob_get_remote_data_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_oob_get_remote_data_reference &rArr; smp_oob_check_is_remote_data_present &rArr; BLEPLAT_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
</UL>

<P><STRONG><a name="[4cc]"></a>smp_pka_process_ecc_computation_tsk</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, smp_hndl_tasks_pka.o(.text.smp_pka_process_ecc_computation_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = smp_pka_process_ecc_computation_tsk &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pka_process_ecc_computation_tsk_ucfg
</UL>

<P><STRONG><a name="[70]"></a>smp_pka_process_ecc_computation_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_pka_process_ecc_computation_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = smp_pka_process_ecc_computation_tsk_ucfg &rArr; smp_pka_process_ecc_computation_tsk &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pka_process_ecc_computation_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[4d6]"></a>smp_pp1_auth_req_field_generate_from_device_config</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_auth_req_field_generate_from_device_config))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4d1]"></a>smp_pp1_get_next_free_pairing_idx</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_get_next_free_pairing_idx))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
</UL>

<P><STRONG><a name="[4d5]"></a>smp_pp1_get_pairing_pdu_offset</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_get_pairing_pdu_offset))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4ce]"></a>smp_pp1_hndl_pairing_response_mode_through_event</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_hndl_pairing_response_mode_through_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_pp1_hndl_pairing_response_mode_through_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
</UL>

<P><STRONG><a name="[4cf]"></a>smp_pp1_key_generation_method_selection</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_key_generation_method_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_pp1_key_generation_method_selection &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4d9]"></a>smp_pp1_pairing_packet_build</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_pairing_packet_build))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4d0]"></a>smp_pp1_per_rxp_pairing_request</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_per.o(.text.smp_pp1_per_rxp_pairing_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_pp1_per_rxp_pairing_request &rArr; smp_pp1_hndl_pairing_response_mode_through_event &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_params_check
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_hndl_pairing_response_mode_through_event
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_copy_to_pairing_data
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_get_next_free_pairing_idx
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[4d4]"></a>smp_pp1_per_send_pairing_response</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_per.o(.text.smp_pp1_per_send_pairing_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_pp1_per_send_pairing_response &rArr; smp_pp1_key_generation_method_selection &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_continue_on_exclusive_sc_pairing_ucfg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_get_pairing_pdu_offset
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_key_generation_method_selection
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_extract_from_pairing_data
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_reqrsp_pdu_copy_to_pairing_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_pairing_packet_build
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_auth_req_field_generate_from_device_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
</UL>

<P><STRONG><a name="[4d3]"></a>smp_pp1_reqrsp_pdu_copy_to_pairing_data</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_reqrsp_pdu_copy_to_pairing_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_pp1_reqrsp_pdu_copy_to_pairing_data &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4d8]"></a>smp_pp1_reqrsp_pdu_extract_from_pairing_data</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_reqrsp_pdu_extract_from_pairing_data))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4d2]"></a>smp_pp1_reqrsp_pdu_params_check</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_hndl_pairing_phase1_cmn.o(.text.smp_pp1_reqrsp_pdu_params_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_pp1_reqrsp_pdu_params_check &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
</UL>

<P><STRONG><a name="[4da]"></a>smp_pp2_per_auth_stage1_start_excerpt_scp</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_auth_stage1_start_excerpt_scp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_auth_stage1_start_excerpt_scp &rArr; smp_pp2_per_rx_process_pairing_confirm &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg
</UL>

<P><STRONG><a name="[4dd]"></a>smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg &rArr; smp_pp2_per_auth_stage1_start_excerpt_scp &rArr; smp_pp2_per_rx_process_pairing_confirm &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage1_start_excerpt_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage_1_start
</UL>

<P><STRONG><a name="[4c2]"></a>smp_pp2_per_auth_stage_1_start</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_auth_stage_1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_auth_stage_1_start &rArr; smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg &rArr; smp_pp2_per_auth_stage1_start_excerpt_scp &rArr; smp_pp2_per_rx_process_pairing_confirm &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[4db]"></a>smp_pp2_per_rx_process_pairing_confirm</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_rx_process_pairing_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_confirm &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage1_start_excerpt_scp
</UL>

<P><STRONG><a name="[4e0]"></a>smp_pp2_per_rx_process_pairing_confirm_excerpt_scp</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_rx_process_pairing_confirm_excerpt_scp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f4_generate_confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg
</UL>

<P><STRONG><a name="[4df]"></a>smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_confirm_excerpt_scp &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm_excerpt_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
</UL>

<P><STRONG><a name="[4e1]"></a>smp_pp2_per_rx_process_pairing_random</STRONG> (Thumb, 288 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_rx_process_pairing_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_random &rArr; smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_random_excerpt_scp &rArr; aci_gap_numeric_comparison_value_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_s1_generate_stk
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_lep_confirm_value_compute
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[4e3]"></a>smp_pp2_per_rx_process_pairing_random_excerpt_scp</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_rx_process_pairing_random_excerpt_scp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_random_excerpt_scp &rArr; aci_gap_numeric_comparison_value_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_g2_generate_num_comp_val
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f4_generate_confirm
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg
</UL>

<P><STRONG><a name="[4e2]"></a>smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg &rArr; smp_pp2_per_rx_process_pairing_random_excerpt_scp &rArr; aci_gap_numeric_comparison_value_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
</UL>

<P><STRONG><a name="[4e5]"></a>smp_pp3_keys_distribution_completed</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_hndl_pairing_phase3.o(.text.smp_pp3_keys_distribution_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_start_encryption_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_start
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_signaling_ack
</UL>

<P><STRONG><a name="[4e7]"></a>smp_pp3_keys_distribution_receive</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, smp_hndl_pairing_phase3.o(.text.smp_pp3_keys_distribution_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_keys_distribution_receive &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_cmp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_start
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[4c0]"></a>smp_pp3_keys_distribution_send</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, smp_hndl_pairing_phase3.o(.text.smp_pp3_keys_distribution_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_pp3_keys_distribution_send &rArr; smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_local_irk
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_gap_get_local_identity_address
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_csrk
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_start
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_signaling_ack
</UL>

<P><STRONG><a name="[4e9]"></a>smp_pp3_keys_distribution_signaling_ack</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, smp_hndl_pairing_phase3.o(.text.smp_pp3_keys_distribution_signaling_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_start
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
</UL>

<P><STRONG><a name="[4c3]"></a>smp_pp3_keys_distribution_start</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_hndl_pairing_phase3.o(.text.smp_pp3_keys_distribution_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_signaling_ack
</UL>

<P><STRONG><a name="[4c4]"></a>smp_pp3_pairing_completed_successful</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, smp_hndl_pairing_completion.o(.text.smp_pp3_pairing_completed_successful))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_update_stats
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_clear_remote_data_entry
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_add_bonding_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_completed
</UL>

<P><STRONG><a name="[4eb]"></a>smp_pp3_pairing_completed_update_stats</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_hndl_pairing_completion.o(.text.smp_pp3_pairing_completed_update_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = smp_pp3_pairing_completed_update_stats &rArr; smp_scp_stats_update_on_pairing_complete_ucfg &rArr; smp_scp_stats_update_on_pairing_complete &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_protocol_timeout_cb
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[4ed]"></a>smp_pp3_pairing_failed_receive</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, smp_hndl_pairing_completion.o(.text.smp_pp3_pairing_failed_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_pp3_pairing_failed_receive &rArr; sdb_sap_del_bonded_device &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_del_bonded_device
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[4bc]"></a>smp_pp3_pairing_failed_send</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_hndl_pairing_completion.o(.text.smp_pp3_pairing_failed_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_short_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_scp_numeric_comparison_response
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_receive
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4ee]"></a>smp_rxp_flush_packet_queues</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_flush_packet_queues))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_protocol_timeout_cb
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[4ef]"></a>smp_rxp_process_exception_cases_excerpt_scp</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_process_exception_cases_excerpt_scp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_exception_cases_excerpt_scp &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp_ucfg
</UL>

<P><STRONG><a name="[4f0]"></a>smp_rxp_process_exception_cases_excerpt_scp_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_rxp_process_exception_cases_excerpt_scp_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_exception_cases_excerpt_scp_ucfg &rArr; smp_rxp_process_exception_cases_excerpt_scp &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[4f1]"></a>smp_rxp_process_rxed_packets_tsk</STRONG> (Thumb, 380 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_process_rxed_packets_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_rxed_packets_tsk &rArr; smp_pp3_keys_distribution_receive &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp_ucfg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_head
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_rxp_pairing_request
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_receive
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk_ucfg
</UL>

<P><STRONG><a name="[72]"></a>smp_rxp_process_rxed_packets_tsk_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_rxp_process_rxed_packets_tsk_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_rxed_packets_tsk_ucfg &rArr; smp_rxp_process_rxed_packets_tsk &rArr; smp_pp3_keys_distribution_receive &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.rodata.TSK_pfunc)
</UL>
<P><STRONG><a name="[4f4]"></a>smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[5d3]"></a>smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak), UNUSED)

<P><STRONG><a name="[4f6]"></a>smp_rxp_process_wrt_current_fsm_excerpt_scp</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, smp_hndl_tasks_rxp.o(.text.smp_rxp_process_wrt_current_fsm_excerpt_scp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_wrt_current_fsm_excerpt_scp &rArr; smp_scp_phase_2as2_dhkey_check_receive &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg
</UL>

<P><STRONG><a name="[4f3]"></a>smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg &rArr; smp_rxp_process_wrt_current_fsm_excerpt_scp &rArr; smp_scp_phase_2as2_dhkey_check_receive &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_scp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
</UL>

<P><STRONG><a name="[3e5]"></a>smp_sap_aci_passkey_response</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_sap_aci_cmn.o(.text.smp_sap_aci_passkey_response))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_passkey_resp_api
</UL>

<P><STRONG><a name="[3e1]"></a>smp_sap_aci_scp_numeric_comparison_response</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_sap_aci_scp.o(.text.smp_sap_aci_scp_numeric_comparison_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno_api
</UL>

<P><STRONG><a name="[3ec]"></a>smp_sap_aci_set_authentication_req</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, smp_sap_aci_cmn.o(.text.smp_sap_aci_set_authentication_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_sap_aci_set_authentication_req &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_check_is_any_pairing_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_security_requirements_api
</UL>

<P><STRONG><a name="[3e9]"></a>smp_sap_aci_set_io_capabilities</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_sap_aci_cmn.o(.text.smp_sap_aci_set_io_capabilities))
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_check_is_any_pairing_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability_api
</UL>

<P><STRONG><a name="[271]"></a>smp_sap_check_encryption_key_size</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_check_encryption_key_size))
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>

<P><STRONG><a name="[27a]"></a>smp_sap_check_is_peer_device_bonded</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_check_is_peer_device_bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_sap_check_is_peer_device_bonded &rArr; smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_by_conn_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
</UL>

<P><STRONG><a name="[49c]"></a>smp_sap_crt_generate_ediv</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_sap_crt_generate_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_sap_crt_generate_ediv &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record_matching
</UL>

<P><STRONG><a name="[4e8]"></a>smp_sap_crt_generate_local_irk</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_sap_crt_generate_local_irk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_sap_crt_generate_local_irk &rArr; smp_crt_diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_rpa
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
</UL>

<P><STRONG><a name="[1e8]"></a>smp_sap_crt_generate_rpa</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_sap_crt_generate_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_sap_crt_generate_rpa &rArr; smp_sap_crt_generate_local_irk &rArr; smp_crt_diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_local_irk
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_calculate_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
</UL>

<P><STRONG><a name="[49a]"></a>smp_sap_crt_resolve_rpa</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_sap_crt_resolve_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_sap_crt_resolve_rpa &rArr; smp_crt_calculate_hash &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_calculate_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_read_security_record
</UL>

<P><STRONG><a name="[20e]"></a>smp_sap_forget_device_upon_disconnection</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_forget_device_upon_disconnection))
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[26d]"></a>smp_sap_get_remote_address_check_addr_type</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_get_remote_address_check_addr_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_sap_get_remote_address_check_addr_type &rArr; smp_dep_sdb_find_bonding_record_read_address &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_read_address
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[270]"></a>smp_sap_get_security_level</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_get_security_level))
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>

<P><STRONG><a name="[406]"></a>smp_sap_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_sap_hci_disconnection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_disconnection_complete_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_flush_packet_queues
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_update_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[40a]"></a>smp_sap_hci_encryption_change_evt_hndl</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_sap_hci_encryption_change_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_encryption_change_evt_hndl &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_int_cb
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_int_cb
</UL>

<P><STRONG><a name="[40d]"></a>smp_sap_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_sap_hci_le_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_connection_complete_evt_hndl &rArr; smp_connection_complete_handler &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_connection_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[411]"></a>smp_sap_hci_le_enhanced_connection_complete_evt_hndl</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_sap_hci_le_enhanced_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_enhanced_connection_complete_evt_hndl &rArr; smp_connection_complete_handler &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_connection_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[4fb]"></a>smp_sap_hci_le_generate_dhkey_complete_evt_hndl</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, smp_sap_hci_scp.o(.text.smp_sap_hci_le_generate_dhkey_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_generate_dhkey_complete_evt_hndl &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg
</UL>

<P><STRONG><a name="[414]"></a>smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_generate_dhkey_complete_evt_hndl &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_int_cb
</UL>

<P><STRONG><a name="[416]"></a>smp_sap_hci_le_long_term_key_request_evt_hndl</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_sap_hci_le_long_term_key_request_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_long_term_key_request_evt_hndl &rArr; smp_dep_sdb_find_matching_ltk_read_record &rArr; sdb_sap_read_security_record_matching &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_negative_reply_api
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply_api
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_matching_ltk_read_record
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_diversify
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_int_cb
</UL>

<P><STRONG><a name="[4fc]"></a>smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, smp_sap_hci_scp.o(.text.smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_set_local_public_key
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg
</UL>

<P><STRONG><a name="[41c]"></a>smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg &rArr; smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_int_cb
</UL>

<P><STRONG><a name="[2e6]"></a>smp_sap_l2c_acl_data_hndl</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, smp_sap_host_cmn.o(.text.smp_sap_l2c_acl_data_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = smp_sap_l2c_acl_data_hndl &rArr; smp_pp3_keys_distribution_signaling_ack &rArr; smp_pp3_keys_distribution_start &rArr; smp_pp3_keys_distribution_completed &rArr; smp_pp3_pairing_completed_successful &rArr; smp_dep_sdb_add_bonding_record &rArr; sdb_sap_add_security_record &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_signaling_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[4fe]"></a>smp_sap_scp_force_debug_key_usage</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_sap_hci_scp.o(.text.smp_sap_scp_force_debug_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_sap_scp_force_debug_key_usage &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init_ucfg
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_is_another_sc_pairing_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_scp_force_debug_key_usage_ucfg
</UL>

<P><STRONG><a name="[2bf]"></a>smp_sap_scp_force_debug_key_usage_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_sap_scp_force_debug_key_usage_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_sap_scp_force_debug_key_usage_ucfg &rArr; smp_sap_scp_force_debug_key_usage &rArr; smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_scp_force_debug_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[256]"></a>smp_sap_sm2_packet_data_signing_validate</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, smp_sap_host_mode2_data_signing.o(.text.smp_sap_sm2_packet_data_signing_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_sap_sm2_packet_data_signing_validate &rArr; smp_crt_generate_cmac_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_item
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[500]"></a>smp_scp_continue_on_exclusive_sc_pairing</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_continue_on_exclusive_sc_pairing))
<BR><BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_is_another_sc_pairing_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_continue_on_exclusive_sc_pairing_ucfg
</UL>

<P><STRONG><a name="[4d7]"></a>smp_scp_continue_on_exclusive_sc_pairing_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_scp_continue_on_exclusive_sc_pairing_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_scp_continue_on_exclusive_sc_pairing_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_continue_on_exclusive_sc_pairing
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_per_send_pairing_response
</UL>

<P><STRONG><a name="[4cd]"></a>smp_scp_execute_public_key_generation_request</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_execute_public_key_generation_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_api
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pka_process_ecc_computation_tsk
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl
</UL>

<P><STRONG><a name="[501]"></a>smp_scp_init</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_force_local_p256_debug_key_api
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init_ucfg
</UL>

<P><STRONG><a name="[4c8]"></a>smp_scp_init_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_scp_init_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_scp_init_ucfg &rArr; smp_scp_init &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_scp_force_debug_key_usage
</UL>

<P><STRONG><a name="[4ff]"></a>smp_scp_is_another_sc_pairing_ongoing</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_is_another_sc_pairing_ongoing))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_continue_on_exclusive_sc_pairing
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_scp_force_debug_key_usage
</UL>

<P><STRONG><a name="[4dc]"></a>smp_scp_oob_confirm_receive_verify</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_oob_confirm_receive_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_scp_oob_confirm_receive_verify &rArr; smp_crt_f4_generate_confirm &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_get_remote_data_reference
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f4_generate_confirm
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_auth_stage1_start_excerpt_scp
</UL>

<P><STRONG><a name="[4f7]"></a>smp_scp_phase_2as2_dhkey_check_receive</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_phase_2as2_dhkey_check_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_scp_phase_2as2_dhkey_check_receive &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_send
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_start_encryption_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_scp
</UL>

<P><STRONG><a name="[4bb]"></a>smp_scp_phase_2as2_start</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_phase_2as2_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_scp_phase_2as2_start &rArr; smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f5_generate_keys
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_send
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_set_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2
</UL>

<P><STRONG><a name="[505]"></a>smp_scp_public_key_prepare_and_exchange</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_public_key_prepare_and_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_scp_public_key_prepare_and_exchange &rArr; smp_scp_public_key_send &rArr; smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_send
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange_ucfg
</UL>

<P><STRONG><a name="[4c1]"></a>smp_scp_public_key_prepare_and_exchange_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_scp_public_key_prepare_and_exchange_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = smp_scp_public_key_prepare_and_exchange_ucfg &rArr; smp_scp_public_key_prepare_and_exchange &rArr; smp_scp_public_key_send &rArr; smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
</UL>

<P><STRONG><a name="[4f8]"></a>smp_scp_public_key_receive</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_public_key_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_scp_public_key_receive &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_api
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_wrt_current_fsm_excerpt_scp
</UL>

<P><STRONG><a name="[506]"></a>smp_scp_public_key_send</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_public_key_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_scp_public_key_send &rArr; smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_public_key_prepare_and_exchange
</UL>

<P><STRONG><a name="[4fd]"></a>smp_scp_set_local_public_key</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_set_local_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_scp_set_local_public_key &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_force_local_p256_debug_key_api
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl
</UL>

<P><STRONG><a name="[507]"></a>smp_scp_stats_update_on_pairing_complete</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_stats_update_on_pairing_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = smp_scp_stats_update_on_pairing_complete &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_is_another_sc_pairing_ongoing
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete_ucfg
</UL>

<P><STRONG><a name="[4ec]"></a>smp_scp_stats_update_on_pairing_complete_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_stack_user_cfg.o(.text.smp_scp_stats_update_on_pairing_complete_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = smp_scp_stats_update_on_pairing_complete_ucfg &rArr; smp_scp_stats_update_on_pairing_complete &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_stats_update_on_pairing_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_update_stats
</UL>

<P><STRONG><a name="[4e6]"></a>smp_start_encryption_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_hndl_mode1_encryption.o(.text.smp_start_encryption_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_completed
</UL>

<P><STRONG><a name="[5d4]"></a>smp_start_encryption_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_hndl_mode1_encryption.o(.text.smp_start_encryption_ucfg_weak), UNUSED)

<P><STRONG><a name="[4c7]"></a>smp_timer_init</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_hndl_timers.o(.text.smp_timer_init))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_init
</UL>

<P><STRONG><a name="[4a1]"></a>smp_timer_reset</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_hndl_timers.o(.text.smp_timer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_exception_cases_excerpt_scp
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_receive
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_start_probation_timer2
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_process_abort
</UL>

<P><STRONG><a name="[62]"></a>smp_timers_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_hndl_timers.o(.text.smp_timers_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_timers_cb &rArr; smp_cmn_repeated_attacks_timer_cb &rArr; smp_cmn_rejectlist_start_probation_timer2 &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_protocol_timeout_cb
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_hndl_timers.o(.text.smp_timers_cb_wrapper)
</UL>
<P><STRONG><a name="[61]"></a>smp_timers_cb_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, smp_hndl_timers.o(.text.smp_timers_cb_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_timers_cb_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_hndl_timers.o(.text.smp_timer_init)
</UL>
<P><STRONG><a name="[508]"></a>smp_timers_protocol_timeout_cb</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_hndl_timers.o(.text.smp_timers_protocol_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = smp_timers_protocol_timeout_cb &rArr; smp_pp3_pairing_completed_update_stats &rArr; smp_scp_stats_update_on_pairing_complete_ucfg &rArr; smp_scp_stats_update_on_pairing_complete &rArr; smp_scp_execute_public_key_generation_request &rArr; hci_le_read_local_p256_public_key_api &rArr; BLEPLAT_PkaStartP256Key &rArr; PKAMGR_StartP256PublicKeyGeneration &rArr; HW_PKA_StartP256DHkeyGeneration &rArr; HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteSingleInput
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_flush_packet_queues
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_update_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timers_cb
</UL>

<P><STRONG><a name="[346]"></a>subrate_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_subrate.o(.text.subrate_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[5d5]"></a>subrate_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_subrate.o(.text.subrate_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[3db]"></a>tsk_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[1ae]"></a>tsk_no_idle_check</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_no_idle_check))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_SleepCheck
</UL>

<P><STRONG><a name="[1ac]"></a>tsk_notify_idx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_notify_idx))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_scp_numeric_comparison_response
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_aci_passkey_response
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_process_rxed_packets_tsk
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_execute_actions_scp_phase2as2
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_fsm_process_actions_wrt_state_tsk
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_generate_dhkey_complete_evt_hndl
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timeout_cb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_encryption_change_evt_hndl
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_disconnection_complete_evt_hndl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_cancel_slot
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_init_le_ping_params
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_tx_ctrl_pdu_state
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_l2c_acl_data_hndl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_bearer_close
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_execute_public_key_generation_request
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_oob_confirm_receive_verify
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_connection_complete_handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>

<P><STRONG><a name="[1af]"></a>tsk_scheduler</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_scheduler))
<BR><BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsbit
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Tick
</UL>

<P><STRONG><a name="[3c2]"></a>tsk_signal_resource_idx</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_signal_resource_idx))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
</UL>

<P><STRONG><a name="[222]"></a>tsk_wait_resource_idx</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.tsk_wait_resource_idx))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_keys_distribution_send
</UL>

<P><STRONG><a name="[154]"></a>AES_CMAC_Encrypt_Append</STRONG> (Thumb, 610 bytes, Stack size 72 bytes, crypto.o(i.AES_CMAC_Encrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_HW_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptAppend
</UL>

<P><STRONG><a name="[155]"></a>AES_CMAC_Encrypt_Finish</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, crypto.o(i.AES_CMAC_Encrypt_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptFinish
</UL>

<P><STRONG><a name="[156]"></a>AES_CMAC_Encrypt_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, crypto.o(i.AES_CMAC_Encrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AES_CMAC_Encrypt_Init &rArr; AESstdInitEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInitEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptInit
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_complete_event
</UL>

<P><STRONG><a name="[50b]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[b8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[50c]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b9]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gpio.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[290]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, radio.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_MspInit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RADIO_Init
</UL>

<P><STRONG><a name="[b0]"></a>mul32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blue_unit_conversion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>

<P><STRONG><a name="[27f]"></a>LL_GetRAMSize</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, miscutil.o(.text.LL_GetRAMSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_GetRAMSize
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPartInfo
</UL>

<P><STRONG><a name="[1b8]"></a>NVMDB_get_info</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nvm_db.o(.text.NVMDB_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVMDB_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>

<P><STRONG><a name="[3a6]"></a>ReadNextRecordNoLock</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nvm_db.o(.text.ReadNextRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecordNoLock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadNextRecord
</UL>

<P><STRONG><a name="[3c9]"></a>NextRecordNoLock</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, nvm_db.o(.text.NextRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NextRecordNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
</UL>

<P><STRONG><a name="[3a7]"></a>ReadCurrentRecordNoLock</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, nvm_db.o(.text.ReadCurrentRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadCurrentRecordNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadCurrentRecord
</UL>

<P><STRONG><a name="[3c3]"></a>write_data</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, nvm_db.o(.text.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>

<P><STRONG><a name="[3c5]"></a>GetDBType</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nvm_db.o(.text.GetDBType))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
</UL>

<P><STRONG><a name="[1c9]"></a>EraseSmallDB</STRONG> (Thumb, 132 bytes, Stack size 2112 bytes, nvm_db.o(.text.EraseSmallDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2260<LI>Call Chain = EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
</UL>

<P><STRONG><a name="[1b5]"></a>LoadDBToRAM</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, nvm_db.o(.text.LoadDBToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>

<P><STRONG><a name="[1b6]"></a>WriteBufferToFlash</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nvm_db.o(.text.WriteBufferToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteBufferToFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>

<P><STRONG><a name="[1b4]"></a>CleanLargeDB</STRONG> (Thumb, 200 bytes, Stack size 2120 bytes, nvm_db.o(.text.CleanLargeDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2268<LI>Call Chain = CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>

<P><STRONG><a name="[1b9]"></a>CleanPage</STRONG> (Thumb, 228 bytes, Stack size 2120 bytes, nvm_db.o(.text.CleanPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2268<LI>Call Chain = CleanPage &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>

<P><STRONG><a name="[22]"></a>BLEStack_Process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_ble.o(.text.BLEStack_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BLEStack_Process &rArr; BLEStack_Process_Schedule &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_RESET
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_SET
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_SleepCheck
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Tick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEStack_Process_Schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[147]"></a>gap_cmd_resp_release</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ble.o(.text.gap_cmd_resp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_cmd_resp_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[149]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[14e]"></a>connection_complete_event</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, app_ble.o(.text.connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = connection_complete_event &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SVC_APP_EvtRx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEEVT_App_Notification
</UL>

<P><STRONG><a name="[4b]"></a>MY_SVC_EventHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_svc.o(.text.MY_SVC_EventHandler))
<BR>[Address Reference Count : 1]<UL><LI> my_svc.o(.text.MY_SVC_Init)
</UL>
<P><STRONG><a name="[281]"></a>FLASH_Program_Burst</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32wb0x_hal_flash.o(.text.FLASH_Program_Burst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Burst
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[282]"></a>FLASH_Program_Word</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wb0x_hal_flash.o(.text.FLASH_Program_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[28a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wb0x_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[299]"></a>_get_calibration_data</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text._get_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_calibration_data
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
</UL>

<P><STRONG><a name="[29b]"></a>_update_xtal_startup_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text._update_xtal_startup_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _update_xtal_startup_time
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
</UL>

<P><STRONG><a name="[29c]"></a>_start_timer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32wb0x_hal_radio_timer.o(.text._start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _start_timer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StartVirtualTimerSysTime
</UL>

<P><STRONG><a name="[29d]"></a>_configureTxRxDelay</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, stm32wb0x_hal_radio_timer.o(.text._configureTxRxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _configureTxRxDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
</UL>

<P><STRONG><a name="[32]"></a>_calibration_callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32wb0x_hal_radio_timer.o(.text._calibration_callback))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wb0x_hal_radio_timer.o(.text.HAL_RADIO_TIMER_Init)
</UL>
<P><STRONG><a name="[2a0]"></a>_update_user_timeout</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32wb0x_hal_radio_timer.o(.text._update_user_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StopVirtualTimer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>

<P><STRONG><a name="[297]"></a>_get_system_time_and_machine</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32wb0x_hal_radio_timer.o(.text._get_system_time_and_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetAnchorPoint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>

<P><STRONG><a name="[29e]"></a>_check_radio_activity</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, stm32wb0x_hal_radio_timer.o(.text._check_radio_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _check_radio_activity &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_GetCurrentSysTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_Tick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_SetRadioTimerValue
</UL>

<P><STRONG><a name="[29f]"></a>_virtualTimeBaseEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32wb0x_hal_radio_timer.o(.text._virtualTimeBaseEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StopVirtualTimer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calibration_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_SetRadioTimerValue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RADIO_TIMER_StartVirtualTimerSysTime
</UL>

<P><STRONG><a name="[2b8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32wb0x_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32wb0x_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wb0x_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[3d3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_stm32wb0x.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[50a]"></a>AESstdInitEnc</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, crypto.o(i.AESstdInitEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AESstdInitEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
</UL>

<P><STRONG><a name="[3df]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, events.o(.text.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[1cb]"></a>event_notify_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events.o(.text.event_notify_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_aci_event_notify_cb
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_data_notify_cb
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_notify_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>

<P><STRONG><a name="[1ca]"></a>hci_hardware_error_event_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(.text.hci_hardware_error_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_hardware_error_event_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[1f6]"></a>GAP_stop_discoverability</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, gap_common.o(.text.GAP_stop_discoverability))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_stop_discoverability &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_peripheral_connection_complete_handler_ucfg
</UL>

<P><STRONG><a name="[2b]"></a>GAT_att_cmn_handle_disconnec_iterate_f</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_handle_disconnec_iterate_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_handle_disconnec_iterate_f &rArr; GAT_att_srv_bearer_close &rArr; GAT_srv_bearer_close &rArr; SDB_sap_write_peer_bonded_gatt_client_data &rArr; sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_bearer_close
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_bearer_close
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_push_noinline
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(.text.GAT_att_cmn_timer_expire_tsk)
</UL>
<P><STRONG><a name="[21b]"></a>GAT_att_cmn_get_timer_index</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_cmn.o(.text.GAT_att_cmn_get_timer_index))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
</UL>

<P><STRONG><a name="[210]"></a>GAT_att_cmn_get_opcode</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_cmn_get_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_request_user_pending
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[24c]"></a>GAT_att_srv_get_exec_fn_id_by_op</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_get_exec_fn_id_by_op))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[238]"></a>GAT_att_srv_write_err_packet</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_write_err_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_write_err_packet &rArr; ACL_pkt_write &rArr; Mem_Buff_write &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[24b]"></a>GAT_att_srv_run</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_pckt
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_channel_descr_p
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[108]"></a>ACL_pkt_read_8b</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_srv.o(.text.ACL_pkt_read_8b))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_buff_off
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
</UL>

<P><STRONG><a name="[254]"></a>GAT_att_srv_send_response</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[23b]"></a>GAT_att_srv_get_handle_range</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_get_handle_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_get_handle_range &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[232]"></a>GAT_att_srv_flush_rx_pckts</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_flush_rx_pckts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_flush_rx_pckts &rArr; L2C_get_cid_from_basic_packet_header &rArr; ACL_pkt_read_16b &rArr; ACL_pkt_read &rArr; Mem_Buff_read &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_bearer_close
</UL>

<P><STRONG><a name="[112]"></a>ACL_pkt_write_8b</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_att_srv.o(.text.ACL_pkt_write_8b))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_buff_off
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[79]"></a>GAT_att_srv_exchange_mtu_exc</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_exchange_mtu_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_exchange_mtu_exc &rArr; aci_att_exchange_mtu_resp_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_push_noinline
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[7a]"></a>GAT_att_srv_find_info_exc</STRONG> (Thumb, 250 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_find_info_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_info_exc &rArr; GAT_srv_get_attr_type &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_get_value_p
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[7b]"></a>GAT_att_srv_find_by_type_val_exc</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_find_by_type_val_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_by_type_val_exc &rArr; GAT_att_srv_value_read &rArr; aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[23d]"></a>GAT_att_srv_value_read</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_value_read &rArr; aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push_noinline
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[7c]"></a>GAT_att_srv_read_by_type_exc</STRONG> (Thumb, 530 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_read_by_type_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_by_type_exc &rArr; GAT_att_srv_value_read &rArr; aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[7d]"></a>GAT_att_srv_read_exc</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_read_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_exc &rArr; GAT_att_srv_value_read &rArr; aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[7e]"></a>GAT_att_srv_read_multi_exc</STRONG> (Thumb, 474 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_read_multi_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_multi_exc &rArr; aci_gatt_srv_read_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push_noinline
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_16b
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[7f]"></a>GAT_att_srv_write_exc</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_write_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_write_exc &rArr; aci_gatt_srv_write_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_push_noinline
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_sm2_packet_data_signing_validate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[246]"></a>GAT_att_srv_set_attr_value_check</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_set_attr_value_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_set_attr_value_check &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_check_client_support_feature &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[80]"></a>GAT_att_srv_prep_wr_exc</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_prep_wr_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_prep_wr_exc &rArr; aci_att_srv_prepare_write_req_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_push_noinline
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_16b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[81]"></a>GAT_att_srv_exec_wr_exc</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_exec_wr_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_exec_wr_exc &rArr; aci_att_srv_exec_write_req_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event_push_noinline
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write_8b
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[82]"></a>GAT_att_srv_confirm_exc</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_att_srv.o(.text.GAT_att_srv_confirm_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_confirm_exc &rArr; aci_gatt_srv_confirmation_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_change_aware
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event_push_noinline
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.rodata.exec_fn_table_a_full)
</UL>
<P><STRONG><a name="[26b]"></a>GAT_srv_is_bonded</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_is_bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = GAT_srv_is_bonded &rArr; smp_sap_check_is_peer_device_bonded &rArr; smp_dep_sdb_find_bonding_record_by_conn_addr &rArr; sdb_sap_read_security_record &rArr; nvm_sec_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_check_is_peer_device_bonded
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[269]"></a>GAT_srv_set_zip_val</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_set_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[26a]"></a>GAT_srv_set_cccd_val</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_set_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[268]"></a>GAT_srv_get_zip_val</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_get_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_bearer_close
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
</UL>

<P><STRONG><a name="[2f]"></a>GAT_srv_aes_cmac_append</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_aes_cmac_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GAT_srv_aes_cmac_append &rArr; BLEPLAT_AesCMACEncryptAppend &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCMACEncryptAppend
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_srv.o(.text.GAT_srv_db_hash_tsk)
</UL>
<P><STRONG><a name="[30]"></a>GAT_srv_tx_service_change</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_tx_service_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAT_srv_tx_service_change &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_ch_descr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_client_support_feature
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_srv.o(.text.GAT_srv_send_srv_change_tsk)
</UL>
<P><STRONG><a name="[265]"></a>GAT_srv_attr_direct_value_write</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, gat_srv.o(.text.GAT_srv_attr_direct_value_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAT_srv_attr_direct_value_write &rArr; aci_gatt_srv_attribute_modified_event_push_noinline &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_cid_from_basic_packet_header
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push_noinline
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[456]"></a>llc_conn_set_blue_packets</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_set_blue_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_conn_set_blue_packets &rArr; BLEPLAT_CNTR_PacketInitTo0
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimerTrigRcv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimer2Active
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetPllTrig
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNsEn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextTxMode
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextSlot
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetNextPtr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetKeepsemareq
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntTxOk
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntTimeout
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntRcvOk
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntDone
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIntCrcErr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetIncChan
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetDataPtr
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketSetCrcinitSel
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_PacketInitTo0
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_GetTimer2TimeoutForIfs
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_go_to_connect
</UL>

<P><STRONG><a name="[47a]"></a>llc_conn_peripheral_latency</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_peripheral_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_send_acl_data
</UL>

<P><STRONG><a name="[47b]"></a>llc_conn_peripheral_latency_cancellation</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, llc_connect_sap.o(.text.llc_conn_peripheral_latency_cancellation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetUnmappedChan
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetHopIncr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetAccessAddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_mod_37
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_link_calculate_window_widening_from_ppm
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel_for_task
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency_cancellation_tsk
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_peripheral_latency
</UL>

<P><STRONG><a name="[32a]"></a>LL_cpe_get_ctrl_flds_common_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_get_ctrl_flds_common_p))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_clr_rx_pdu_discarded_by_one_sm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_rx_pdu_discarded_by_one_sm
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_active
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_active
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[327]"></a>ll_cpe_get_ctrl_flds_per_sm_p</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_ctrl_flds_per_sm_p))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[326]"></a>ll_cpe_get_cpid_from_sm</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_cpid_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_get_proc_id_from_sm
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_exception_opcode_from_sm
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[329]"></a>ll_cpe_set_active</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_set_active))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cpe_init_sm_ctxt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[32d]"></a>ll_cpe_check_rx_pdu_can_be_processed</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_check_rx_pdu_can_be_processed))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_tx_ctrl_pdu_state
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_rx_ctrl_pdu_full
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[32f]"></a>ll_cpe_get_blocked_status</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_blocked_status))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[331]"></a>ll_cpe_get_expected_opcode</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_expected_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[332]"></a>ll_cpe_get_state</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_state))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[333]"></a>LL_cpe_rxctrlpdu_checkreject</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_rxctrlpdu_checkreject))
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[334]"></a>valid_first_opcode</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, ll_cpe.o(.text.valid_first_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[335]"></a>ll_cpe_reset_state_machines</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_reset_state_machines))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33a]"></a>ll_cpe_get_active</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_active))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33b]"></a>ll_cpe_get_rx_pdu_discarded_by_one_sm</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_rx_pdu_discarded_by_one_sm))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33c]"></a>ll_cpe_process_rx_pdu</STRONG> (Thumb, 468 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_process_rx_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_is_opcode_supporting_instant
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_first_opcode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_rx_acl_blocked
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_ctrl_pdu_data_p
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_clr_rx_ctrl_pdu_full
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33d]"></a>ll_cpe_get_instant_active</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_instant_active))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33e]"></a>LL_cpe_get_cpf</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_get_cpf))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[33f]"></a>ll_cpe_set_expected_opcode</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_set_expected_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[342]"></a>ll_cpe_clr_rx_pdu_discarded_by_one_sm</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_clr_rx_pdu_discarded_by_one_sm))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[343]"></a>ll_cpe_check_instant_blocked</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_check_instant_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_is_opcode_supporting_instant
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[345]"></a>ll_cpe_set_state</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_set_state))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[425]"></a>ll_cpe_get_instant_supported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(.text.ll_cpe_get_instant_supported))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[424]"></a>LL_cpe_is_opcode_supporting_instant</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_cpe.o(.text.LL_cpe_is_opcode_supporting_instant))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[2ef]"></a>LLC_authenticated_payload_timeout_start_le_ping</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(.text.LLC_authenticated_payload_timeout_start_le_ping))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
</UL>

<P><STRONG><a name="[303]"></a>LL_Context_ReturnFree</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_Context_ReturnFree))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_linkms_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
</UL>

<P><STRONG><a name="[30b]"></a>LL_LE_Set_Advertising_Parameters_Default</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.LL_LE_Set_Advertising_Parameters_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_LE_Set_Advertising_Parameters_Default &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_get_advertising_set_index
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
</UL>

<P><STRONG><a name="[1c5]"></a>EADV_stop</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.EADV_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_priv_stop_privacy_timer_ucfg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_cancel_request
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_release_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[11e]"></a>UTIL_u8GetNextAdvChannel</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.UTIL_u8GetNextAdvChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = UTIL_u8GetNextAdvChannel &rArr; Hal_Get_Random_Number &rArr; BLEPLAT_RngGetRandom16
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[133]"></a>hci_le_advertising_set_terminated_event_push</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.hci_le_advertising_set_terminated_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_set_terminated_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[134]"></a>EADV_stop_isr</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.EADV_stop_isr))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_cancel_request
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_release_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[11a]"></a>hci_le_scan_request_received_event_push</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_ext_adv.o(.text.hci_le_scan_request_received_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_le_scan_request_received_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[3ad]"></a>MBM_release_balance</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, mbm.o(.text.MBM_release_balance))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_resize
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_release
</UL>

<P><STRONG><a name="[3af]"></a>MBM_move_class</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, mbm.o(.text.MBM_move_class))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_unreserve
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBM_reserve
</UL>

<P><STRONG><a name="[4e4]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
</UL>

<P><STRONG><a name="[3e2]"></a>aci_gap_numeric_comparison_value_event_push</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.aci_gap_numeric_comparison_value_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random_excerpt_scp
</UL>

<P><STRONG><a name="[4de]"></a>smp_pp2_per_lep_confirm_value_compute</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, smp_hndl_pairing_phase2.o(.text.smp_pp2_per_lep_confirm_value_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_pp2_per_lep_confirm_value_compute &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_get_pairing_pdu_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_random
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp2_per_rx_process_pairing_confirm
</UL>

<P><STRONG><a name="[504]"></a>smp_scp_pp2_as2_set_addresses</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_pp2_as2_set_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_scp_pp2_as2_set_addresses &rArr; BLEPLAT_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_dhkey_check_generate
</UL>

<P><STRONG><a name="[502]"></a>smp_scp_pp2_as2_dhkey_check_generate</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_pp2_as2_dhkey_check_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = smp_scp_pp2_as2_dhkey_check_generate &rArr; smp_crt_f6_generate_check_val &rArr; AES_CMAC_Encrypt &rArr; BLEPLAT_AesCMACEncryptFinish &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_f6_generate_check_val
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_get_remote_data_reference
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_pp2_as2_set_addresses
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp1_get_pairing_pdu_offset
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
</UL>

<P><STRONG><a name="[503]"></a>smp_scp_pp2_as2_dhkey_check_send</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, smp_hndl_scp_procedures.o(.text.smp_scp_pp2_as2_dhkey_check_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = smp_scp_pp2_as2_dhkey_check_send &rArr; smp_dep_l2c_send_acl_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_get
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_l2c_send_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_dhkey_check_receive
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_scp_phase_2as2_start
</UL>

<P><STRONG><a name="[1f9]"></a>GAP_set_discoverability_mode</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_set_discoverability_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GAP_set_discoverability_mode &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[1e4]"></a>GAP_suspend_resume_active_advertising_sets_legacy</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gap_peripheral.o(.text.GAP_suspend_resume_active_advertising_sets_legacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GAP_suspend_resume_active_advertising_sets_legacy &rArr; hci_le_set_advertising_enable &rArr; LL_LE_Set_Advertise_Enable &rArr; LL_Set_Extented_Advertising_Enable &rArr; EADV_stop &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_ucfg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResumeAdvertising_ucfg
</UL>

<P><STRONG><a name="[204]"></a>GAT_att_cmn_get_opcode</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_cmn_get_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[10a]"></a>ACL_pkt_read_8b</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_clt.o(.text.ACL_pkt_read_8b))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_buff_off
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
</UL>

<P><STRONG><a name="[1]"></a>GAT_att_clt_unexpect_rx</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_att_clt.o(.text.GAT_att_clt_unexpect_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_unexpect_rx &rArr; aci_hal_fw_error_event_push_noinline &rArr;  aci_event_fifo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push_noinline
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_clt.o(.data.rcv_fn_p)
</UL>
<P><STRONG><a name="[229]"></a>GAT_att_db_get_att_idx</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_get_att_idx))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
</UL>

<P><STRONG><a name="[223]"></a>GAT_att_db_find_attr_idx_with_handle</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_attr_idx_with_handle))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
</UL>

<P><STRONG><a name="[224]"></a>GAT_att_db_find_attr_idx_from_handle</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_find_attr_idx_from_handle))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_reverse_find_attr_of_type
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>

<P><STRONG><a name="[228]"></a>GAT_att_db_get_last_group_attribute</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gat_att_db.o(.text.GAT_att_db_get_last_group_attribute))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>

<P><STRONG><a name="[25e]"></a>GAT_srv_db_update_allowed</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_db_update_allowed))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_request_user_pending
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirmation_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[25f]"></a>GAT_srv_check_group_size</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_srv_api.o(.text.GAT_srv_check_group_size))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_last_attr_of_type
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[434]"></a>llc_conn_close_event</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, llc_connect_isr.o(.text.llc_conn_close_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = llc_conn_close_event &rArr; llc_conn_check_instant_and_set_params &rArr; BLEPLAT_CNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_release
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_enhanced_get_latency
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_set_taskslot_params
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_supervision_timer
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_instant_and_set_params
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_check_ctrl_proc_rsp_timer
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_calc_skip_ucfg
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_update_cont_counter_ucfg
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_subrate_new_sr_base_event_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[43e]"></a>llc_conn_decrement_enc_count_rx</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, llc_connect_isr.o(.text.llc_conn_decrement_enc_count_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = llc_conn_decrement_enc_count_rx &rArr; BLEPLAT_CNTR_SmSetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmSetRxCount
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CNTR_SmGetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_conn_isr
</UL>

<P><STRONG><a name="[48b]"></a>llc_mngm_csa2_select_channel</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_select_channel))
<BR><BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_mod_37
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_subevent_channel_ucfg
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_permutation
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel_for_task
</UL>

<P><STRONG><a name="[48c]"></a>llc_mngm_csa2_permutation</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, llc_csa2.o(.text.llc_mngm_csa2_permutation))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_mngm_csa2_select_channel
</UL>

<P><STRONG><a name="[359]"></a>llc_conn_upd_params_check</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(.text.llc_conn_upd_params_check))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[379]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[37b]"></a>hci_encryption_key_refresh_complete_event_push</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.hci_encryption_key_refresh_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_encryption_key_refresh_complete_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[37c]"></a>hci_encryption_change_event_push</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.hci_encryption_change_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_encryption_change_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[37f]"></a>llc_enc_prepare_reject</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_cpf_encryption.o(.text.llc_enc_prepare_reject))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3a5]"></a>hci_read_remote_version_information_complete_event_push</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(.text.hci_read_remote_version_information_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hci_read_remote_version_information_complete_event_push &rArr; aci_event_fifo_push &rArr; event_notify_cb &rArr; hci_aci_event_notify_cb &rArr; BLE_STACK_Event &rArr; BLEEVT_App_Notification &rArr; aci_gap_numeric_comparison_value_confirm_yesno &rArr; aci_gap_numeric_comparison_value_confirm_yesno_api &rArr; smp_sap_aci_scp_numeric_comparison_response &rArr; smp_pp3_pairing_failed_send &rArr; smp_dep_l2c_send_acl_short_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; llc_conn_send_acl_data &rArr; llc_conn_peripheral_latency &rArr; llc_conn_peripheral_latency_cancellation &rArr; LL_sched_engine &rArr; BLEPLAT_SetRadioTimerValue &rArr; HAL_RADIO_TIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_copy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[3cf]"></a>sdb_remove_security_record_by_address</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sdb.o(.text.sdb_remove_security_record_by_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 2300 + Unknown Stack Size
<LI>Call Chain = sdb_remove_security_record_by_address &rArr; nvm_discard_current_record &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_discard_current_record
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_next_record
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_del_bonded_device
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_add_security_record
</UL>

<P><STRONG><a name="[3cb]"></a>sdb_gatt_search_record</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, sdb.o(.text.sdb_gatt_search_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = sdb_gatt_search_record &rArr; nvm_gatt_db_read_next_record &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCmp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_next_record
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_sap_del_bonded_device
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_write_peer_bonded_gatt_client_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_sap_read_peer_bonded_gatt_client_data
</UL>

<P><STRONG><a name="[4a5]"></a>smp_crt_calculate_hash</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_calculate_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_crt_calculate_hash &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; BLEPLAT_AesEcbEncrypt &rArr; HW_AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemCpy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_generate_rpa
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_crt_resolve_rpa
</UL>

<P><STRONG><a name="[4ac]"></a>smp_crt_left_shift</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_crypto_toolbox.o(.text.smp_crt_left_shift))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_crt_generate_cmac_tag
</UL>

<P><STRONG><a name="[4b6]"></a>smp_dep_sdb_copy_bonding_record_data_to_remdev</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, smp_dep_sdb.o(.text.smp_dep_sdb_copy_bonding_record_data_to_remdev))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_bonding_record_by_conn_addr
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dep_sdb_find_matching_ltk_read_record
</UL>

<P><STRONG><a name="[4ea]"></a>smp_pp3_pairing_process_abort</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, smp_hndl_pairing_completion.o(.text.smp_pp3_pairing_process_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = smp_pp3_pairing_process_abort &rArr; smp_timer_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_rxp_flush_packet_queues
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_timer_reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_remote_device_list_index
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push_noinline
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_update_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_receive
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_completed_successful
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pp3_pairing_failed_send
</UL>

<P><STRONG><a name="[4a4]"></a>smp_connection_complete_handler</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, smp_sap_hci_cmn.o(.text.smp_connection_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_connection_complete_handler &rArr; BLEPLAT_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_MemSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_is_peer_rejectlisted
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sap_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[490]"></a>nvm_convert_bleplat_to_blestack_status</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stacklib_nvm.o(.text.nvm_convert_bleplat_to_blestack_status))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_next_record
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_read_full_current_record
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_gatt_db_update_record
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_read_next_record
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvm_sec_db_add_record
</UL>

<P><STRONG><a name="[509]"></a>lsbit</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_tasks.o(.text.lsbit))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_scheduler
</UL>

<P><STRONG><a name="[1b3]"></a>Timer_TryStartFirstActive</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, stacklib_timers.o(.text.Timer_TryStartFirstActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_StopTimer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>

<P><STRONG><a name="[1b2]"></a>Timer_StartFirstActive_sysT</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, stacklib_timers.o(.text.Timer_StartFirstActive_sysT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Timer_StartFirstActive_sysT &rArr; BLEPLAT_StartTimer &rArr; HAL_RADIO_TIMER_StartVirtualTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_RADIO_TIMER_StopVirtualTimer &rArr; _update_user_timeout &rArr; HAL_RADIO_TIMER_GetCurrentSysTime &rArr; _get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_StopTimer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_StartTimer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetCurrentSysTime
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>

<P><STRONG><a name="[259]"></a>GAT_clt_get_proc_per_channel</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_get_proc_per_channel))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
</UL>

<P><STRONG><a name="[211]"></a>GAT_att_cmn_get_opcode</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_att_cmn_get_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_pkt_read_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
</UL>

<P><STRONG><a name="[10b]"></a>ACL_pkt_read_8b</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_clt.o(.text.ACL_pkt_read_8b))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_buff_off
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_opcode
</UL>

<P><STRONG><a name="[0]"></a>GAT_clt_exec_empty</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gat_clt.o(.text.GAT_clt_exec_empty))
<BR>[Address Reference Count : 1]<UL><LI> gat_clt.o(.data.exec_fn_p)
</UL>
<P><STRONG><a name="[c6]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c5]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[20]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ec]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
